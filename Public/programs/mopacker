#!/usr/bin/env python3

import sys,os,time,pickle,math,getopt,subprocess
from math import *


############## machine parameters #########################
ARROWS_HOME     = __file__.split("TinyArrows")[0] + "TinyArrows"

mopac     = ARROWS_HOME + "/compute-bin/run_mopac7 "
wrkdir    = ARROWS_HOME + "/Work"
############## machine parameters #########################


periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}




############################# main program ###################################
usage = \
"""
Remote mopacker program

  Usage: mopacker job.nw 

  -h prints this message

"""

opts, args = getopt.getopt(sys.argv[1:], "h")

for o, a in opts:
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<1):
   print(usage)
   exit()

filename = args[0]
with open(filename,'r') as ff:
   data = ff.read()

title  = data.split("title")[1].strip().split("\n")[0].strip('"')
swnc   = data.split("swnc:")[1].strip().split()[0].strip()
theory = data.split("theory=")[1].split()[0].strip()
if (data.lower().find("charge ")!=-1):
   charge = data.lower().split("charge ")[-1].split()[0].strip()
else:
   charge = "0"
if (data.lower().find("mult ")!=-1):
   mult = data.lower().split("mult ")[-1].split()[0].strip()
else:
   mult = "1"
geometry0 = data.split("geometry")[1].split("end")[0].split("\n")
geometry = "\n".join(geometry0[1:])
geometry = geometry.strip()


#SINGLET DOUBLE TRIPLET QUARTET QUINTET SEXTET SEPTET
print("============================== echo of input deck ==============================")
print(data)
print("================================================================================")
print()
print("MOPACKER JOB STARTED")
print("hostname        = TinyArrows Debian Docker container")
print("nproc           = 1")
print("MOPACKER filename = "+filename)
print("MOPACKER theory   = "+theory.lower())
print("MOPACKER charge   = "+charge)
print("MOPACKER mult     = "+mult)
print("Charge           : " + charge)
print("Spin multiplicity: " + mult)
print("MOPACKER swnc     = "+swnc)
print("MOPACKER INITIAL GEOMETRY: ")
print(geometry)
print(":MOPACKER INITIAL GEOMETRY")
mult = eval(mult)
ADDMULT = ""
if mult==2: ADDMULT = " DOUBLET "
if mult==3: ADDMULT = " TRIPLET "
if mult==4: ADDMULT = " QUARTET "
if mult==5: ADDMULT = " QUINTET "
if mult==6: ADDMULT = " SEXTET "
if mult==7: ADDMULT = " SEPTET "
if mult==8: ADDMULT = " OCTET "
if mult==9: ADDMULT = " NONET "

total_time = 0.0
for job in swnc:
   print("job="+job)
   
   if job=='o':
      print("MOPACKER GEOMETRY OPTIMIZATION")
      with open("myjobo.dat","w") as ff:
         ff.write(theory.upper() + " GEO-OK T=2.5D PRECISE CHARGE=" + charge.strip()+ADDMULT+" DEBUG &\n")
         ff.write("VERBOSE GRAD COMPFG MMOK\n\n")
         for ll in geometry.split("\n"):
            ss = ll.split()
            ff.write(ss[0]+" "+ss[1]+" 1 "+ss[2]+" 1 "+ss[3]+" 1\n")
      cmdo = mopac + "myjobo"
      resulto = subprocess.check_output(cmdo,shell=True)
      print(resulto)

      heat   = resulto.split("FINAL HEAT OF FORMATION =")[1].split()[0].strip()
      energy = resulto.split("TOTAL ENERGY            =")[1].split()[0].strip()
      elec   = resulto.split("ELECTRONIC ENERGY       =")[1].split()[0].strip()
      core   = resulto.split("CORE-CORE REPULSION     =")[1].split()[0].strip()
      total_time += eval(resulto.split("TOTAL CPU TIME:")[1].split()[0].strip())

      print("@ Step       Energy      Delta E   Gmax     Grms     Xrms     Xmax   Walltime")
      print("@ ---- ---------------- -------- -------- -------- -------- -------- --------")
      tmp = resulto.split("CYCLE:")
      tmp = tmp[1:]
      tt = 0.0
      if (len(tmp)==0):
         gnorm = 0.0
         de1 = 0.0
         e1 = eval(energy)/27.2116 
         print("@  %3d  %15.8f %8.1e %8.5f %8.5f %8.5f %8.5f %8.1f" % (1,e1,de1,gnorm,gnorm,0.0,0.0,tt))
      for cc in tmp:
         ll = cc.split('\n')[0]
         ss = ll.split()
         ncycle = eval(ss[0])
         tt += eval(ss[2])
         #ee = eval(ss[9])
         #gnorm = eval(ss[7])/(27.2116*23.06)
         ee = eval(ll.split("HEAT:")[1])
         gnorm = eval(ll.split("GRAD.:")[1].split("HEAT:")[0])/(27.2116*23.06)
         e1 = eval(energy)/27.2116 - (eval(heat)-ee)/(27.2116*23.06)
         de1 =  (eval(heat)-ee)/(27.2116*23.06)
         print("@  %3d  %15.8f %8.1e %8.5f %8.5f %8.5f %8.5f %8.1f" % (ncycle,e1,de1,gnorm,gnorm,0.0,0.0,tt))

      print()
      print("MOPACKER HEAT OF FORMATION = " + heat)
      print("MOPACKER TOTAL ENERGY = " + energy)
      print("MOPACKER ELECTRONIC ENERGY = " + elec)
      print("MOPACKER CORE-CORE REPULSION ENERGY = " + core)

      ### print eigenvalues ###
      print()
      print("DFT Final Molecular Orbital Analysis")
      eigs = resulto.split("EIGENVALUES")[1].split("NET ATOMIC CHARGES AND DIPOLE CONTRIBUTIONS")[0].strip().split()
      nfilled = eval(resulto.split("NO. OF FILLED LEVELS    =")[1].split('\n')[0].strip())
      if ("AND NO. OF OPEN LEVELS  =") in resulto:
         nopen = eval(resulto.split("AND NO. OF OPEN LEVELS  =")[1].split('\n')[0].strip())
      else:
         nopen = 0
      count = 0
      for eig in eigs:
         count += 1
         e = eval(eig)/27.2116
         o = 2.0
         if (count<=(nfilled-nopen)):
            occ = 2.0
         elif (count<=(nfilled)):
            occ = 1.0
         else:
            occ = 0.0
         print("Vector %5d  Occ=%.6e  E=%.6e" % (count,occ,e))
      print()
      print()

      ### update geometry ###
      tmp = resulto.split("NO.       ATOM               X         Y         Z")[-1].strip()
      tmp = tmp.split("ATOMIC ORBITAL ELECTRON POPULATIONS")[0].strip()
      geometry = ''
      for ll in tmp.split('\n'):
         ss = ll.split()
         geometry += ss[1] + " " + ss[2] + " " + ss[3] + " " + ss[4] + "\n"
      geometry = geometry.strip()
      print("Optimization converged")
      print("MOPACKER OPTIMIZED GEOMETRY:")
      print()
      print("  No.       Tag          Charge          X              Y              Z")
      print(" ---- ---------------- ---------- -------------- -------------- --------------")
      nion = 0
      for ll in geometry.split('\n'):
         nion += 1
         ss = ll.split()
         mysymbol = ss[0]
         mycharge = periodic_table_charge[mysymbol]
         x = eval(ss[1])
         y = eval(ss[2])
         z = eval(ss[3])
         print("%5d %2s %10.4f %16.8f %16.8f %16.8f" % (nion,mysymbol,mycharge,x,y,z))
      print()
      print()
      print(":MOPACKER OPTIMIZED GEOMETRY")



   if job=='v':
      print("MOPACKER VIBRATION CALCULATION")
      with open("myjobv.dat","w") as ff:
         ff.write(theory.upper() + " GEO-OK T=2.5D PRECISE CHARGE=" + charge.strip()+ADDMULT+" DEBUG VERBOSE &\n")
         ff.write("GRAD FORCE THERMO(300,300) ROT=1 COMPFG MMOK\n\n")
         for ll in geometry.split("\n"):
            ss = ll.split()
            ff.write(ss[0]+" "+ss[1]+" 0 "+ss[2]+" 0 "+ss[3]+" 0\n")
      cmdv = mopac + "myjobv"
      resultv = subprocess.check_output(cmdv,shell=True)
      print(resultv)
      total_time += eval(resultv.split("TOTAL CPU TIME:")[1].split()[0].strip())
      tmp = resultv.split("TOT.")[1].split('\n')[0].strip()
      try:
         enthalpy = eval(tmp.split()[1])/(1000.0)
      except:
         enthalpy = 0.0
      try:
         entropy  = eval(tmp.split()[3])
      except:
         entropy  = 0.0
      linear = "MOLECULE IS LINEAR" in resultv
      print("Thermal correction to Enthalpy   = %8.3f kcal/mol  ( %10.6f au)" % (enthalpy,enthalpy/(27.2116*23.06)))
      print("Total Entropy                    = %8.3f cal/mol-K" % entropy)
      print()
      freqblob0 = resultv.split("NORMAL COORDINATE ANALYSIS")[1].split("MASS-WEIGHTED COORDINATE ANALYSIS")[0]
      freqblob = ''
      for ll in freqblob0.split('\n'):
         if (len(ll)> 5):
            freqblob += ll + '\n'
      freqblob = freqblob.strip()

      freqs0   = []
      freqdat0 = []
      fn = 0
      fsz = 0
      count = -1
      for ll in freqblob.split('\n'):
         if "ROOT NO." in ll:
            count = 0
            fn += fsz
            fsz = len(ll.strip().split()) - 2
            for i in range(fsz):
               freqdat0.append([])
         elif (count==0):
            count += 1
            freqs0 += [eval(ff) for ff in ll.split()]
         elif (count>0):
            count += 1
            freq6 = ll.split()[1:]
            for i in range(fsz):
               freqdat0[fn+i].append(eval(freq6[i]))
      freqs0[-5] = 0.0
      freqs0[-4] = 0.0
      freqs0[-3] = 0.0
      freqs0[-2] = 0.0
      freqs0[-1] = 0.0
      if (not linear): freqs0[-6] = 0.0
      #print("freqs=",freqs)
      #print("freqdat=",freqdat)
      freqs   = []
      freqdat = []
      for i in range(len(freqs0)):
         if (freqs0[i]<0.0):
            freqs.append(freqs0[i])
            freqdat.append(freqdat0[i])
      freqs.append(freqs0[-5])
      freqs.append(freqs0[-4])
      freqs.append(freqs0[-3])
      freqs.append(freqs0[-2])
      freqs.append(freqs0[-1])
      freqdat.append(freqdat0[-5])
      freqdat.append(freqdat0[-4])
      freqdat.append(freqdat0[-3])
      freqdat.append(freqdat0[-2])
      freqdat.append(freqdat0[-1])
      if (not linear): 
         freqs.append(freqs0[-6])
         freqdat.append(freqdat0[-6])
      for i in range(len(freqs0)):
         if (freqs0[i]>0.00001):
            freqs.append(freqs0[i])
            freqdat.append(freqdat0[i])

      iistart = 0
      while (iistart<len(freqs)):
         iiend = iistart + 6
         if (iiend>len(freqs)): 
            iiend = len(freqs)
         str0 = "        "
         str1 = " P.Frequency"
         for ii in range(iistart,iiend):
            str0 += " %11d" % (ii+1)
            str1 += " %11.2f" % freqs[ii]
         str2 = ""
         for jj in range(len(freqdat[0])):
            str2 += "%12d" % (jj+1)
            for ii in range(iistart,iiend):
               str2 += " %11.5f" % freqdat[ii][jj]
            str2 += "\n"
         print()
         print(str0)
         print()
         print(str1)
         print()
         print(str2.rstrip())
         iistart += 6

      print()
      print()
      mode = 0
      ii   = 0
      for f in freqs:
         if (f<0.0):
            mode += 1
            print("===============================================================================")
            print("Negative Nuclear Hessian Mode %4d  Eigenvalue = %9.2f cm**(-1)" % (mode,f))
            print(" -------------------------------------------------------------------------------")
            print("Raw step length:  0.280 angstroms ;  The Raw step for this mode is:")
            nion = 0
            for ll in geometry.split('\n'):
               nion += 1
               ss = ll.split()
               mysymbol = ss[0]
               mycharge = periodic_table_charge[mysymbol]
               x =  freqdat[ii][3*(nion-1)]
               y =  freqdat[ii][3*(nion-1)+1]
               z =  freqdat[ii][3*(nion-1)+2]
               print("%5d %2s %10.4f %16.8f %16.8f %16.8f" % (nion,mysymbol,mycharge,x,y,z))
            print()
            print()
            str =  "Geometry after  100.0% step for mode" 
            str += "%3d; Step length =  0.280 angstroms" % mode
            print(str)
            print("Maximum component (any atom: x,y, or z) displacement:  0.137")
            nion = 0
            for ll in geometry.split('\n'):
               nion += 1
               ss = ll.split()
               mysymbol = ss[0]
               mycharge = periodic_table_charge[mysymbol]
               x = eval(ss[1]) + freqdat[ii][3*(nion-1)]
               y = eval(ss[2]) + freqdat[ii][3*(nion-1)+1]
               z = eval(ss[3]) + freqdat[ii][3*(nion-1)+2]
               print("%5d %2s %10.4f %16.8f %16.8f %16.8f" % (nion,mysymbol,mycharge,x,y,z))
            print()
            print()
            str =  "Geometry after -100.0% step for mode" 
            str += "%3d; Step length =  0.280 angstroms" % mode
            print(str)
            print("Maximum component (any atom: x,y, or z) displacement:  0.137")
            nion = 0
            for ll in geometry.split('\n'):
               nion += 1
               ss = ll.split()
               mysymbol = ss[0]
               mycharge = periodic_table_charge[mysymbol]
               x = eval(ss[1]) - freqdat[ii][3*(nion-1)]
               y = eval(ss[2]) - freqdat[ii][3*(nion-1)+1]
               z = eval(ss[3]) - freqdat[ii][3*(nion-1)+2]
               print("%5d %2s %10.4f %16.8f %16.8f %16.8f" % (nion,mysymbol,mycharge,x,y,z))
            print()
            print()
         ii += 1

      #### Generate IR Spectra Table ####
      tdipole = []
      for ll in resultv.split("T-DIPOLE")[1:]:
         tdipole.append(eval(ll.split()[0]))
      freqdipole = []
      for ll in resultv.split("FREQ.")[1:]:
         freqdipole.append(eval(ll.split()[0]))
      print(" ----------------------------------------------------------------------------")
      print(" Normal Eigenvalue ||           Projected Infra Red Intensities")
      print("  Mode   [cm**-1]  || [atomic units] [(debye/angs)**2] [(KM/mol)] [arbitrary]")
      print(" ------ ---------- || -------------- ----------------- ---------- -----------")
      j = 0
      for f in freqs:
         j += 1
         ii = -1
         for i in range(len(freqdipole)):
            if (abs(f-freqdipole[i])<1.0e-2): ii = i
         if (ii>=0):
            td = tdipole[ii]
         else:
            td = 0.0
         print("%6d  %10.3f || %12.6f %12.3f %12.3f %12.3f" % (j,f,td,td,td,td))
      print(" ----------------------------------------------------------------------------")
      print()
      print()

      print("Task  times  cpu: %10.1fs    wall: %10.1fs" % (total_time,total_time))




   if job=='c':
      print("MOPACKER COSMO CALCULATION")
      with open("myjobc.dat","w") as ff:
         ff.write(theory.upper() + " GEO-OK T=2.5D PRECISE CHARGE=" + charge.strip()+ADDMULT+" DEBUG &\n")
         ff.write("VERBOSE GRAD COMPFG EPS=78.4 MMOK\n\n")
         for ll in geometry.split("\n"):
            ss = ll.split()
            ff.write(ss[0]+" "+ss[1]+" 0 "+ss[2]+" 0 "+ss[3]+" 0\n")
      cmdc = mopac + "myjobc"
      resultc = subprocess.check_output(cmdc,shell=True)
      print(resultc)
      total_time += eval(resultc.split("TOTAL CPU TIME:")[1].split()[0].strip())

      cosmo_heat   = resultc.split("FINAL HEAT OF FORMATION =")[1].split()[0].strip()
      cosmo_energy = resultc.split("TOTAL ENERGY            =")[1].split()[0].strip()
      cosmo_elec   = resultc.split("ELECTRONIC ENERGY       =")[1].split()[0].strip()
      cosmo_core   = resultc.split("CORE-CORE REPULSION     =")[1].split()[0].strip()
      cosmo_diel   = resultc.split("DIELECTRIC ENERGY       =")[1].split()[0].strip()
      print(" dielectric constant -eps-     =  78.40")
      print("MOPACKER COSMO HEAT OF FORMATION = " + cosmo_heat)
      print("MOPACKER COSMO TOTAL ENERGY = " + cosmo_energy)
      print("MOPACKER COSMO ELECTRONIC ENERGY = " + cosmo_elec)
      print("MOPACKER COSMO CORE-CORE REPULSION ENERGY = " + cosmo_core)
      print("MOPACKER COSMO DIELECTRIC ENERGY = " + cosmo_diel)
      try:
         cosmo = (eval(energy) - eval(cosmo_energy))/27.2116
      except:
         cosmo = 0.0
      print()
      print("                COSMO solvation results")
      print("                -----------------------")
      print()
      print("                gas phase energy = %20.10f" % (eval(energy)/27.2116))
      print("                sol phase energy = %20.10f" % (eval(cosmo_energy)/27.2116))
      print("(electrostatic) solvation energy = %20.10f ( %8.2f kcal/mol)" % (cosmo,cosmo*27.2116*23.06))
      print()

      ### print eigenvalues ###
      print()
      print("DFT Final Molecular Orbital Analysis")
      eigs = resultc.split("EIGENVALUES")[1].split("NET ATOMIC CHARGES AND DIPOLE CONTRIBUTIONS")[0].strip().split()
      nfilled = eval(resultc.split("NO. OF FILLED LEVELS    =")[1].split('\n')[0].strip())
      if ("AND NO. OF OPEN LEVELS  =") in resulto:
         nopen = eval(resultc.split("AND NO. OF OPEN LEVELS  =")[1].split('\n')[0].strip())
      else:
         nopen = 0
      count = 0
      for eig in eigs:
         count += 1
         try:
            e = eval(eig)/27.2116
         except:
            e = 0.0
         o = 2.0
         if (count<=(nfilled-nopen)):
            occ = 2.0
         elif (count<=(nfilled)):
            occ = 1.0
         else:
            occ = 0.0
         print("Vector %5d  Occ=%.6e  E=%.6e" % (count,occ,e))
      print()
      print()



print("MOPACKER JOB FINISHED")
print("Total times  cpu: %10.1fs    wall: %10.1fs" % (total_time,total_time))
    

