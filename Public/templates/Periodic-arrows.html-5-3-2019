<!doctype html>
<!-- The DOCTYPE declaration above will set the     -->
<!-- browser's rendering engine into                -->
<!-- "Standards Mode". Replacing this declaration   -->
<!-- with a "Quirks Mode" doctype is not supported. -->

<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>EMSL Arrows</title>

<!-- Alternative location for ace editor -->
<!-- script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.3.1/ace.js" type="text/javascript" charset="utf-8"></script> -->
<!--script src="https://unpkg.com/ace-builds@1.3.1/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"></script-->

<!-- Location scripts for EMSL Arrows API -->
<script type="text/javascript" language="javascript" src="{{ url_for('static', filename='jsme/jsme.nocache.js')}}"></script>
<script type="text/javascript" language="javascript" src="{{ url_for('static', filename='jsmol/JSmol.min.js')}}"></script>
<script src="https://unpkg.com/ace-builds@1.4.1/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>

<!-- Location scripts for debugging and development -->
<!--script type="text/javascript" language="javascript" src="/static/jsme/jsme.nocache.js"></script-->
<!--script type="text/javascript" language="javascript" src="/static/jsmol/JSmol.min.js"></script-->
<!--script src="https://unpkg.com/ace-builds@1.4.1/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"></script-->


<style>
   blink, .blink {
   animation: blinker 1s linear infinite;
   }
   @keyframes blinker {
   50% { opacity: 0; }
   }
</style>


<style type="text/css" media="screen">
    #editor {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }
   .button2 {width:75px;text-align: left;}
   .button3 {width:100px;text-align: left;}

/* Style the tab */
.tab {
    //overflow: hidden;
    //border: 2px solid #ccc;
   // background-color: #f1f1f1;
   // margin: auto;

background-image: linear-gradient(#FEFEFE, #F1F1F1);
    position: relative;
    margin: auto;
    overflow: hidden;
    border-radius: 6px;
    border-color: #DEDEDE;
}

.tabBlock {
  margin: 0 0 2.5rem;
}
/* Style the buttons that are used to open the tab content */
.tab button {
    display: inline-block;
    list-style-type: none;
    background-color: inherit;
    display: block;
    position: relative;
    float: left;
    border: none;
    border-style: solid;
    border-width: 1px;
    border-color: #DEDEDE;
    outline: none;
    //outline: 2px solid #ccc;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 15px;
    font-weight: bold;
    font-family: times;
}


/* Change background color of buttons on hover */
.tab button:hover {
    background-color: #cfc;
}

/* Create an active/current tablink class */
.tab button.active {
    background-color: #add;
}

/* Style the tab content */
.tabcontent {
    display: none;
    padding: 6px 12px;
    //border: 1px solid #ccc;
    border-top: none;
}

.tabcontent {
    animation: fadeEffect 1s; /* Fading effect takes 1 second */
}

/* Go from zero to full opacity */
@keyframes fadeEffect {
    from {opacity: 0;}
    to {opacity: 1;}
}



</style>


<script type="text/javascript">

	//this function will be called after the JavaScriptApplet code has been loaded.
	function jsmeOnLoad() {

		//Instantiate a new JSME: 380px  340px
		//arguments: HTML id, width, height (must be string not number!)
		//jsmeApplet = new JSApplet.JSME("appletContainer", "700px", "467px", {

		jsmeApplet = new JSApplet.JSME("appletContainer", "750px", "500px", {
			//optional parameters
			"options" : "query,hydrogens,canonize,removehs"
		});

		//Alternative method: the size is not specified: the applet will use 100% of the space of its parent container "appletContainer".
		//Be sure that the parent container size > 0, otherwise the applet will not be visible

		/*    	jsmeApplet = new JSApplet.JSME("appletContainer",  {
		 //optional parameters
		 "options" : "query,hydrogens",
		 "jme" : startingStructure
		 });
		 */

		//Opera patch: if some applet elements are not displayed, force repaint
		//jsmeApplet.deferredRepaint(); //the applet will be repainted after the browser event loop returns
		//it is recommended to use it if the JSME is created outside this jsmeOnLoad() function

		//jsmeApplet has the same API as the original Java applet
		//One can mimic the JME Java applet access to simplify the adaptation of HTML and JavaScript code:
		document.JME = jsmeApplet;

		//suggestion 
		//all buttons that access the jsme variable were disabled in the html
		//Now enable all buttons that can access the jsme variable since the applet is ready
		//example:
		//document.getElementById("button").disabled=false;

	}
        function jsmereaction() {
           jsmeApplet.options("query,hydrogens,canonize,removehs,reaction");
           //jsmeApplet.reset();
        }
        function jsmenoreaction() {
           jsmeApplet.options("query,hydrogens,canonize,removehs,noreaction");
           //jsmeApplet.reset();
        }

     delete Jmol._tracker;
     function jmolOnLoad() {
            Info = {
            width: 750,
            height: 500,
            debug: false,
            //File location for EMSL Arrows API
            //j2sPath: "{{ url_for('static', filename='jsmol/j2s')}}",

            //File location for debugging and development
            j2sPath: "/static/jsmol/j2s",
            
            //color: "0x3BBC52",
            //color: "0x3BBC52",
            //color: "0xc6ed80",
            color: "0x4286f4",
            disableJ2SLoadMonitor: true,
            disableInitialConsole: true,
            addSelectionOptions: true,

            //File location for EMSL Arrows API
            //serverURL: "{{ url_for('static', filename='jsmol/jsmol.php')}}",

            //File location for debugging and development
            serverURL: "/static/jsmol/jsmol.php",

            use: "HTML5",
            readyFunction: null,
            //script: "load  /static/jjj.xyz ; set modelKitMode "
            script: "set modelKitMode "
         };
         $("#jsmoldiv").html(Jmol.getAppletHtml("jmolApplet0", Info));
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0,"select *;spacefill 75%" ,"Space Fill") + Jmol.jmolButton(jmolApplet0, "select *; wireframe 0.15; spacefill 23%;","Ball and Stick") +  Jmol.jmolButton(jmolApplet0, "select *; wireframe 0.03; spacefill 1%;","Stick") ); 

         //jm_cmdlist_add();
      }

        function convertMOL2XYZ(str) {
           var i,n,x,data;
           var lines = str.split("\n");
           if (str.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
           } 
           else { 
              data=str;
           }
           return data;
        } 

        function gennum(v) {
           var x;
           if (v=='') {
               x = 1.0;
           } else {
              var vv = v.split('/');
              x = parseFloat(vv[0]);
              if (vv.length>1) {
                 x = x/parseFloat(vv[1]);
              }
           }
           return x;
        }

        function opmatrix(xyzstr) {
           var xs,pp,pm,pi,sgn,i,ii,v;
           var op = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
           for (var ijk=0; ijk<3; ++ijk) {
              xs = xyzstr.split(',')[ijk]
              pp = xs.split('+');
              pm = [];
              for (i=0; i<pp.length; ++i) {
                 pm.push(pp[i].split('-'));
              }
              for (i=0; i<pm.length; ++i) {
                 pi = pm[i];
                 sgn = +1;
                 for (ii=0; ii<pi.length; ++ii) {
                    if (pi[ii].indexOf('x')!=-1) {
                       v = pi[ii].split('x')[0];
                       op[ijk] += sgn*gennum(v);
                    } else if (pi[ii].indexOf('y')!=-1) {
                       v = pi[ii].split('y')[0];
                       op[ijk+3] += sgn*gennum(v);
                    } else if (pi[ii].indexOf('z')!=-1) {
                       v = pi[ii].split('z')[0];
                       op[ijk+6] += sgn*gennum(v);
                    } else {
                       v = pi[ii];
                       if (v!='') {
                          op[ijk+9] += sgn*gennum(v);
                       }
                    }
                    sgn = -1;
                 }
              }
           }
           return op;
        }

        function compare_ops(ops1,ops2) {
           var i1,i2,m1,m2,j,msame;
           var same=false;
           if (ops1.length==ops2.length) {
              for (i1=0; i1<ops1.length; ++i1) {
                 m1 = opmatrix(ops1[i1]);
                 same = false;
                 for (i2=0; i2<ops2.length; ++i2) {
                    m2 = opmatrix(ops2[i2]);
                    msame = true;
                    for (j=0; j<12; ++j) {
                       msame = msame && (Math.abs(m1[j]-m2[j])<1.0e-6);
                    }
                    same = same || msame;
                 }
                 if (!same) { break; }
              }
           }
           return same;
        }

        function symmetry_genfracgeom(symops,symb,x,y,z) {
           var fracgeom2 = [];
           var op,x2,y2,z2;
           for (var i=0; i<symops.length; ++i) {
              op = opmatrix(symops[i]);
              x2 = op[0]*x + op[3]*y + op[6]*z + op[9];
              y2 = op[1]*x + op[4]*y + op[7]*z + op[10];
              z2 = op[2]*x + op[5]*y + op[8]*z + op[11];
              fracgeom2.push([symb,x2,y2,z2]);
           }
           for (var j=0; j<fracgeom2.length; ++j) {
              fracgeom2[j][1] = fracgeom2[j][1] - Math.round(fracgeom2[j][1]);
              fracgeom2[j][2] = fracgeom2[j][2] - Math.round(fracgeom2[j][2]);
              fracgeom2[j][3] = fracgeom2[j][3] - Math.round(fracgeom2[j][3]);
           }
           return fracgeom2;
        }

        function jsUcfirst(string) 
        {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        function isLetter(str) {
           return str.length === 1 && str.match(/[a-z]/i);
        }


        // ****************************
        // *                          *
        // *        parse_cif         *
        // *                          *
        // ****************************
        function parse_cif(data) {
           var a = parseFloat(data.split("_cell_length_a")[1].split("\n")[0].trim().split("(")[0]);
           var b = parseFloat(data.split("_cell_length_b")[1].split("\n")[0].trim().split("(")[0]);
           var c = parseFloat(data.split("_cell_length_c")[1].split("\n")[0].trim().split("(")[0]);
           var alpha = parseFloat(data.split("_cell_angle_alpha")[1].split("\n")[0].trim().split("(")[0]);
           var beta  = parseFloat(data.split("_cell_angle_beta")[1].split("\n")[0].trim().split("(")[0]);
           var gamma = parseFloat(data.split("_cell_angle_gamma")[1].split("\n")[0].trim().split("(")[0]);

           console.log("alpha=",alpha);
           console.log("beta=",beta);
           console.log("gamma=",gamma);

           // symmetry here
           var symops,nops,j,groupfound,setting,gname,cname,groupname,groupnumber;

           groupname = "P1";
           if (data.includes("_symmetry_space_group_name_H-M")) {
              groupname = data.split("_symmetry_space_group_name_H-M")[1].split("\n")[0].trim();
           }
           groupnumber = 1;
           if (data.includes("_space_group_IT_number")) {
              groupnumber = data.split("_space_group_IT_number")[1].split("\n")[0].trim();
           }
           cname = "Triclinic"
           if (data.includes("_symmetry_cell_setting")) {
              cname = jsUcfirst(data.split("_symmetry_cell_setting")[1].split("\n")[0].trim());
           }
           symops = ["x,y,z"];
           if (data.includes("_symmetry_equiv_pos_as_xyz") || data.includes("_space_group_symop_operation_xyz")) {
              if (data.includes("_symmetry_equiv_pos_as_xyz")) {
                 symops = data.split("_symmetry_equiv_pos_as_xyz")[1].split("loop_")[0].trim().replace(/'/g,"").replace(/ /g, "").split("\n");
              } else {
                 symops = data.split("_space_group_symop_operation_xyz")[1].split("loop_")[0].trim().replace(/'/g,"").replace(/ /g, "").split("\n");
              }
              nops   = symops.length-1;
           }

           // geometry here 
           var loops = data.split("loop_")
           j=0;
           var geomfound = false;
           while ((!geomfound) && (j<loops.length)) {
              geomfound = loops[j].includes("_atom_site_type_symbol");
              geomfound = geomfound || loops[j].includes("_atom_site_label");
              j += 1;
           }
           var looplines = loops[j-1].trim().split("\n");
           var isym,ix,iy,iz,istart,ss,symb;
           isym = -1; ix = -1; iy = -1; iz = -1; istart = -1;
           for (j=0; j<looplines.length; ++j) {
              if (looplines[j].includes("_atom_site_type_symbol")) {
                 isym = j;
              }
              if ((looplines[j].includes("_atom_site_label")) && (isym<0)) {
                 isym = j;
              }
              if (looplines[j].includes("_atom_site_fract_x")) {
                 ix = j;
              }
              if (looplines[j].includes("_atom_site_fract_y")) {
                 iy = j;
              }
              if (looplines[j].includes("_atom_site_fract_z")) {
                 iz = j;
              }
              if (looplines[j].includes("_")) {istart = j;}
           }
            console.log(isym);
            console.log(ix); console.log(iy); console.log(iz);
            istart += 1;
            var fracgeom2;
            var fracgeom = [] ;
            for (j=istart; j<looplines.length; ++j) {
               ss = looplines[j].trim().split(/[ ,]+/);
               if (ss[isym].length>1) {
                  symb = ss[isym].charAt(0);
                  if (isLetter(ss[isym].charAt(1))) { symb += ss[isym].charAt(1); }
               } else {
                  symb = ss[isym].charAt(0);
               }
               x = parseFloat(ss[ix].split("(")[0]);
               y = parseFloat(ss[iy].split("(")[0]);
               z = parseFloat(ss[iz].split("(")[0]);

               fracgeom2 = symmetry_genfracgeom(symops,symb,x,y,z);
               for (n=0; n<fracgeom2.length; ++n) {
                  m = 0;
                  geomfound = false;
                  while ((!geomfound) && (m<fracgeom.length)) {
                     geomfound = (fracgeom2[n][0]==fracgeom[m][0]);
                     geomfound = geomfound && (Math.abs(fracgeom2[n][1]-fracgeom[m][1])<1.0e-6);
                     geomfound = geomfound && (Math.abs(fracgeom2[n][2]-fracgeom[m][2])<1.0e-6);
                     geomfound = geomfound && (Math.abs(fracgeom2[n][3]-fracgeom[m][3])<1.0e-6);
                     m += 1;
                  }
                  if (!geomfound) {
                     fracgeom.push(fracgeom2[n]);
                  }
               }
            }

           var lattice = abcabg_to_lattice(a,b,c,alpha,beta,gamma);
           var symmetry = [groupnumber,groupname,symops,cname];
           return [fracgeom,lattice,symmetry];
        }



        // ****************************
        // *                          *
        // *     editor_fetchXYZ      *
        // *                          *
        // ****************************
        // fetches the xyz data from the editor
        function editor_fetchXYZ() {
           var i,n,m,x,y,z,nion;
           var data = editor.getValue(); // or session.getValue
           var lines = data.split("\n");
           var ucell = "";
           if (data.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
           } 

           if (data.includes("geometry")) {
              n = lines.length;
              m = 0;
              x = false;
              data = "";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                 } else if (lines[i].includes("end")) {
                    x = false;
                 } else if (x) {
                    data += lines[i] + "\n";
                    m += 1;
                 }
              }
              data = m.toString() + "\n\n" + data;
           }
           if (data.includes("_cell_length_a")) {
              var a = parseFloat(data.split("_cell_length_a")[1].split("\n")[0].trim().split("(")[0]);
              var b = parseFloat(data.split("_cell_length_b")[1].split("\n")[0].trim().split("(")[0]);
              var c = parseFloat(data.split("_cell_length_c")[1].split("\n")[0].trim().split("(")[0]);
              var alpha = parseFloat(data.split("_cell_angle_alpha")[1].split("\n")[0].trim().split("(")[0]);
              var beta  = parseFloat(data.split("_cell_angle_beta")[1].split("\n")[0].trim().split("(")[0]);
              var gamma = parseFloat(data.split("_cell_angle_gamma")[1].split("\n")[0].trim().split("(")[0]);
              document.getElementById("cell_a").value = a;
              document.getElementById("cell_b").value = b;
              document.getElementById("cell_c").value = c;
              document.getElementById("cell_alpha").value = alpha;
              document.getElementById("cell_beta").value  = beta;
              document.getElementById("cell_gamma").value = gamma;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Origin unit cell";
              console.log("alpha=",alpha);
              console.log("beta=",beta);
              console.log("gamma=",gamma);
              jsmcellchange(true,false);



              var symall= [[1, 1, '        P1', 'Triclinic', '+x,+y,+z'], [2, 1, '       P-1', 'Triclinic', '+x,+y,+z', '-x,-y,-z'], [3, 1, '        P2', 'Monoclinic', '+x,+y,+z', '-x,+y,-z'], [4, 1, '      P2_1', 'Monoclinic', '+x,+y,+z', '-x,+y+1/2,-z'], [5, 1, '        C2', 'Monoclinic', '+x,+y,+z', '-x,+y,-z', '+x+1/2,+y+1/2,+z', '-x+1/2,+y+1/2,-z'], [6, 1, '        Pm', 'Monoclinic', '+x,+y,+z', '+x,-y,+z'], [7, 1, '        Pc', 'Monoclinic', '+x,+y,+z', '+x,-y,+z+1/2'], [8, 1, '        Cm', 'Monoclinic', '+x,+y,+z', '+x,-y,+z', '+x+1/2,+y+1/2,+z', '+x+1/2,-y+1/2,+z'], [9, 1, '        Cc', 'Monoclinic', '+x,+y,+z', '+x,-y,+z+1/2', '+x+1/2,+y+1/2,+z', '+x+1/2,-y+1/2,+z+1/2'], [10, 1, '      P2/m', 'Monoclinic', '+x,+y,+z', '-x,+y,-z', '-x,-y,-z', '+x,-y,+z'], [11, 1, '    P2_1/m', 'Monoclinic', '+x,+y,+z', '-x,+y+1/2,-z', '-x,-y,-z', '+x,-y+1/2,+z'], [12, 1, '      C2/m', 'Monoclinic', '+x,+y,+z', '-x,+y,-z', '-x,-y,-z', '+x,-y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,+y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,-y+1/2,+z'], [13, 1, '      P2/c', 'Monoclinic', '+x,+y,+z', '-x,+y,-z+1/2', '-x,-y,-z', '+x,-y,+z+1/2'], [14, 1, '    P2_1/c', 'Monoclinic', '+x,+y,+z', '-x,+y+1/2,-z+1/2', '-x,-y,-z', '+x,-y+1/2,+z+1/2'], [15, 1, '      C2/c', 'Monoclinic', '+x,+y,+z', '-x,+y,-z+1/2', '-x,-y,-z', '+x,-y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,+y+1/2,-z+1/2', '-x+1/2,-y+1/2,-z', '+x+1/2,-y+1/2,+z+1/2'], [16, 1, '      P222', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z'], [17, 1, '    P222_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '-x,+y,-z+1/2', '+x,-y,-z'], [18, 1, '  P2_12_12', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z'], [19, 1, 'P2_12_12_1', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z'], [20, 1, '    C222_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '-x,+y,-z+1/2', '+x,-y,-z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z'], [21, 1, '      C222', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z'], [22, 1, '      F222', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z'], [23, 1, '      I222', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2'], [24, 1, 'I2_12_12_1', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2'], [25, 1, '      Pmm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z', '-x,+y,+z'], [26, 1, '    Pmc2_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '+x,-y,+z+1/2', '-x,+y,+z'], [27, 1, '      Pcc2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z+1/2', '-x,+y,+z+1/2'], [28, 1, '      Pma2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y,+z', '-x+1/2,+y,+z'], [29, 1, '    Pca2_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '+x+1/2,-y,+z', '-x+1/2,+y,+z+1/2'], [30, 1, '      Pnc2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2'], [31, 1, '    Pmn2_1', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '+x+1/2,-y,+z+1/2', '-x,+y,+z'], [32, 1, '      Pba2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [33, 1, '    Pna2_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z+1/2'], [34, 1, '      Pnn2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [35, 1, '      Cmm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [36, 1, '    Cmc2_1', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '+x,-y,+z+1/2', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z'], [37, 1, '      Ccc2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [38, 1, '      Amm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z', '-x,+y,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2'], [39, 1, '      Abm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y+1/2,+z', '-x,+y+1/2,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x,-y+1,+z+1/2', '-x,+y+1,+z+1/2'], [40, 1, '      Ama2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y,+z', '-x+1/2,+y,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [41, 1, '      Aba2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x+1/2,-y+1,+z+1/2', '-x+1/2,+y+1,+z+1/2'], [42, 1, '      Fmm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z', '-x,+y,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '+x+1/2,-y,+z+1/2', '-x+1/2,+y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [43, 1, '      Fdd2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/4,-y+1/4,+z+1/4', '-x+1/4,+y+1/4,+z+1/4', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '+x+1/4,-y+3/4,+z+3/4', '-x+1/4,+y+3/4,+z+3/4', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '+x+3/4,-y+1/4,+z+3/4', '-x+3/4,+y+1/4,+z+3/4', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '+x+3/4,-y+3/4,+z+1/4', '-x+3/4,+y+3/4,+z+1/4'], [44, 1, '      Imm2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x,-y,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [45, 1, '      Iba2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+x+1,-y+1,+z+1/2', '-x+1,+y+1,+z+1/2'], [46, 1, '      Ima2', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '+x+1/2,-y,+z', '-x+1/2,+y,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+x+1,-y+1/2,+z+1/2', '-x+1,+y+1/2,+z+1/2'], [47, 1, '      Pmmm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z'], [48, 1, '      Pnnn', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [49, 1, '      Pccm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2'], [50, 1, '      Pban', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [51, 1, '      Pmma', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z', '-x,+y,-z', '+x+1/2,-y,-z', '-x,-y,-z', '+x+1/2,+y,-z', '+x,-y,+z', '-x+1/2,+y,+z'], [52, 1, '      Pnna', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z', '-x+1/2,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '-x,-y,-z', '+x+1/2,+y,-z', '+x+1/2,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2'], [53, 1, '      Pmna', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x,-y,-z', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x+1/2,-y,+z+1/2', '-x,+y,+z'], [54, 1, '      Pcca', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z', '-x,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '-x,-y,-z', '+x+1/2,+y,-z', '+x,-y,+z+1/2', '-x+1/2,+y,+z+1/2'], [55, 1, '      Pbam', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x,-y,-z', '+x,+y,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [56, 1, '      Pccn', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y+1/2,+z', '-x,+y+1/2,-z+1/2', '+x+1/2,-y,-z+1/2', '-x,-y,-z', '+x+1/2,+y+1/2,-z', '+x,-y+1/2,+z+1/2', '-x+1/2,+y,+z+1/2'], [57, 1, '      Pbcm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z', '-x,-y,-z', '+x,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z'], [58, 1, '      Pnnm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [59, 1, '      Pmmn', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x,-y,+z', '-x,+y,+z'], [60, 1, '      Pbcn', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-x,+y,-z+1/2', '+x+1/2,-y+1/2,-z', '-x,-y,-z', '+x+1/2,+y+1/2,-z+1/2', '+x,-y,+z+1/2', '-x+1/2,+y+1/2,+z'], [61, 1, '      Pbca', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z'], [62, 1, '      Pnma', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z', '+x+1/2,-y+1/2,-z+1/2', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z', '-x+1/2,+y+1/2,+z+1/2'], [63, 1, '      Cmcm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z+1/2', '-x,+y,-z+1/2', '+x,-y,-z', '-x,-y,-z', '+x,+y,-z+1/2', '+x,-y,+z+1/2', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z'], [64, 1, '      Cmca', 'Orthorhombic', '+x,+y,+z', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y,-z', '-x,-y,-z', '+x,+y+1/2,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1,+z+1/2', '-x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1,+z+1/2', '-x+1/2,+y+1/2,+z'], [65, 1, '      Cmmm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [66, 1, '      Cccm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [67, 1, '      Cmma', 'Orthorhombic', '+x,+y,+z', '-x,-y+1/2,+z', '-x,+y+1/2,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y+1/2,-z', '+x,-y+1/2,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1,+z', '-x+1/2,+y+1,-z', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1,-z', '+x+1/2,-y+1,+z', '-x+1/2,+y+1/2,+z'], [68, 1, '      Ccca', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y+1/2,+z', '-x,+y,-z', '+x+1/2,-y+1/2,-z', '-x,-y+1/2,-z+1/2', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1,-y+1,+z', '-x+1/2,+y+1/2,-z', '+x+1,-y+1,-z', '-x+1/2,-y+1,-z+1/2', '+x+1,+y+1/2,-z+1/2', '+x+1/2,-y+1,+z+1/2', '-x+1,+y+1/2,+z+1/2'], [69, 1, '      Fmmm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '-x,-y+1/2,-z+1/2', '+x,+y+1/2,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '-x+1/2,-y,-z+1/2', '+x+1/2,+y,-z+1/2', '+x+1/2,-y,+z+1/2', '-x+1/2,+y,+z+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z'], [70, 1, '      Fddd', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x+1/4,-y+1/4,-z+1/4', '+x+1/4,+y+1/4,-z+1/4', '+x+1/4,-y+1/4,+z+1/4', '-x+1/4,+y+1/4,+z+1/4', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '-x+1/4,-y+3/4,-z+3/4', '+x+1/4,+y+3/4,-z+3/4', '+x+1/4,-y+3/4,+z+3/4', '-x+1/4,+y+3/4,+z+3/4', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '-x+3/4,-y+1/4,-z+3/4', '+x+3/4,+y+1/4,-z+3/4', '+x+3/4,-y+1/4,+z+3/4', '-x+3/4,+y+1/4,+z+3/4', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x+3/4,-y+3/4,-z+1/4', '+x+3/4,+y+3/4,-z+1/4', '+x+3/4,-y+3/4,+z+1/4', '-x+3/4,+y+3/4,+z+1/4'], [71, 1, '      Immm', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [72, 1, '      Ibam', 'Orthorhombic', '+x,+y,+z', '-x,-y,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-x,-y,-z', '+x,+y,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1,+y+1,-z+1/2', '+x+1,-y+1,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1,-y+1,+z+1/2', '-x+1,+y+1,+z+1/2'], [73, 1, '      Ibca', 'Orthorhombic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1,+y+1/2,-z+1', '+x+1/2,-y+1,+z+1', '-x+1,+y+1,+z+1/2'], [74, 1, '      Imma', 'Orthorhombic', '+x,+y,+z', '-x,-y+1/2,+z', '-x,+y+1/2,-z', '+x,-y,-z', '-x,-y,-z', '+x,+y+1/2,-z', '+x,-y+1/2,+z', '-x,+y,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1,+z+1/2', '-x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1,+z+1/2', '-x+1/2,+y+1/2,+z+1/2'], [75, 1, '        P4', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z'], [76, 1, '      P4_1', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y,+x,+z+1/4', '+y,-x,+z+3/4'], [77, 1, '      P4_2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2'], [78, 1, '      P4_3', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y,+x,+z+3/4', '+y,-x,+z+1/4'], [79, 1, '        I4', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2'], [80, 1, '      I4_1', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4'], [81, 1, '       P-4', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z'], [82, 1, '       I-4', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2'], [83, 1, '      P4/m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z'], [84, 1, '    P4_2/m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z+1/2', '-y,+x,-z+1/2'], [85, 1, '      P4/n', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z', '+y+1/2,-x+1/2,+z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+y,-x,-z', '-y,+x,-z'], [86, 1, '    P4_2/n', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y,-x,-z', '-y,+x,-z'], [87, 1, '      I4/m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2'], [88, 1, '    I4_1/a', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '-x,-y+1/2,-z+1/4', '+x+1/2,+y,-z+3/4', '+y,-x,-z', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '-x+1/2,-y+1,-z+3/4', '+x+1,+y+1/2,-z+5/4', '+y+1/2,-x+1/2,-z+1/2', '-y+1,+x+1,-z+1'], [89, 1, '      P422', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z'], [90, 1, '    P42_12', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z', '+y+1/2,-x+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+y,+x,-z', '-y,-x,-z'], [91, 1, '    P4_122', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y,+x,+z+1/4', '+y,-x,+z+3/4', '-x,+y,-z', '+x,-y,-z+1/2', '+y,+x,-z+3/4', '-y,-x,-z+1/4'], [92, 1, '  P4_12_12', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y+1/2,+x+1/2,+z+1/4', '+y+1/2,-x+1/2,+z+3/4', '-x+1/2,+y+1/2,-z+1/4', '+x+1/2,-y+1/2,-z+3/4', '+y,+x,-z', '-y,-x,-z+1/2'], [93, 1, '    P4_222', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z+1/2', '-y,-x,-z+1/2'], [94, 1, '  P4_22_12', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y,+x,-z', '-y,-x,-z'], [95, 1, '    P4_322', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y,+x,+z+3/4', '+y,-x,+z+1/4', '-x,+y,-z', '+x,-y,-z+1/2', '+y,+x,-z+1/4', '-y,-x,-z+3/4'], [96, 1, '  P4_32_12', 'Tetragonal', '+x,+y,+z', '-x,-y,+z+1/2', '-y+1/2,+x+1/2,+z+3/4', '+y+1/2,-x+1/2,+z+1/4', '-x+1/2,+y+1/2,-z+3/4', '+x+1/2,-y+1/2,-z+1/4', '+y,+x,-z', '-y,-x,-z+1/2'], [97, 1, '      I422', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2'], [98, 1, '    I4_122', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '-x+1/2,+y,-z+3/4', '+x,-y+1/2,-z+1/4', '+y+1/2,+x+1/2,-z+1/2', '-y,-x,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '-x+1,+y+1/2,-z+5/4', '+x+1/2,-y+1,-z+3/4', '+y+1,+x+1,-z+1', '-y+1/2,-x+1/2,-z+1/2'], [99, 1, '      P4mm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z', '+y,+x,+z'], [100, 1, '      P4bm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [101, 1, '    P4_2cm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z', '+y,+x,+z'], [102, 1, '    P4_2nm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y,-x,+z', '+y,+x,+z'], [103, 1, '      P4cc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [104, 1, '      P4nc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [105, 1, '    P4_2mc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [106, 1, '    P4_2bc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [107, 1, '      I4mm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z', '+y,+x,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [108, 1, '      I4cm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z+1/2', '+y,+x,+z+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '+x+1/2,-y+1/2,+z+1', '-x+1/2,+y+1/2,+z+1', '-y+1/2,-x+1/2,+z+1', '+y+1/2,+x+1/2,+z+1'], [109, 1, '    I4_1md', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '+x,-y,+z', '-x+1/2,+y+1/2,+z+1/2', '-y,-x+1/2,+z+1/4', '+y+1/2,+x,+z+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '+x+1/2,-y+1/2,+z+1/2', '-x+1,+y+1,+z+1', '-y+1/2,-x+1,+z+3/4', '+y+1,+x+1/2,+z+5/4'], [110, 1, '    I4_1cd', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '+x,-y,+z+1/2', '-x+1/2,+y+1/2,+z', '-y,-x+1/2,+z+3/4', '+y+1/2,+x,+z+1/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '+x+1/2,-y+1/2,+z+1', '-x+1,+y+1,+z+1/2', '-y+1/2,-x+1,+z+5/4', '+y+1,+x+1/2,+z+3/4'], [111, 1, '     P-42m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x,+y,-z', '+x,-y,-z', '-y,-x,+z', '+y,+x,+z'], [112, 1, '     P-42c', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [113, 1, '   P-42_1m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [114, 1, '   P-42_1c', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [115, 1, '     P-4m2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '+y,+x,-z', '-y,-x,-z'], [116, 1, '     P-4c2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '+y,+x,-z+1/2', '-y,-x,-z+1/2'], [117, 1, '     P-4b2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '+y+1/2,+x+1/2,-z', '-y+1/2,-x+1/2,-z'], [118, 1, '     P-4n2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2'], [119, 1, '     I-4m2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '+y,+x,-z', '-y,-x,-z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2'], [120, 1, '     I-4c2', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1', '-x+1/2,+y+1/2,+z+1', '+y+1/2,+x+1/2,-z+1', '-y+1/2,-x+1/2,-z+1'], [121, 1, '     I-42m', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x,+y,-z', '+x,-y,-z', '-y,-x,+z', '+y,+x,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [122, 1, '     I-42d', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '+y,-x,-z', '-y,+x,-z', '-x+1/2,+y,-z+3/4', '+x+1/2,-y,-z+3/4', '-y+1/2,-x,+z+3/4', '+y+1/2,+x,+z+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '-x+1,+y+1/2,-z+5/4', '+x+1,-y+1/2,-z+5/4', '-y+1,-x+1/2,+z+5/4', '+y+1,+x+1/2,+z+5/4'], [123, 1, '    P4/mmm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z', '+y,+x,+z'], [124, 1, '    P4/mcc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [125, 1, '    P4/nbm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+y+1/2,-x+1/2,-z', '-y+1/2,+x+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [126, 1, '    P4/nnc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [127, 1, '    P4/mbm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+y+1/2,+x+1/2,-z', '-y+1/2,-x+1/2,-z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [128, 1, '    P4/mnc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [129, 1, '    P4/nmm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z', '+y+1/2,-x+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+y,+x,-z', '-y,-x,-z', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [130, 1, '    P4/ncc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z', '+y+1/2,-x+1/2,+z', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [131, 1, '  P4_2/mmc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z+1/2', '-y,+x,-z+1/2', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [132, 1, '  P4_2/mcm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '+y,+x,-z', '-y,-x,-z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z+1/2', '-y,+x,-z+1/2', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z', '+y,+x,+z'], [133, 1, '  P4_2/nbc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '+y+1/2,+x+1/2,-z', '-y+1/2,-x+1/2,-z', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y,-x,+z+1/2', '+y,+x,+z+1/2'], [134, 1, '  P4_2/nnm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x,+y,-z', '+x,-y,-z', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y,-x,-z', '-y,+x,-z', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y,-x,+z', '+y,+x,+z'], [135, 1, '  P4_2/mbc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z+1/2', '+y,-x,+z+1/2', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z+1/2', '-y,+x,-z+1/2', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [136, 1, '  P4_2/mnm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y,+x,-z', '-y,-x,-z', '-x,-y,-z', '+x,+y,-z', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y,-x,+z', '+y,+x,+z'], [137, 1, '  P4_2/nmc', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y,+x,-z', '-y,-x,-z', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [138, 1, '  P4_2/ncm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z'], [139, 1, '    I4/mmm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z', '+x,-y,-z', '+y,+x,-z', '-y,-x,-z', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z', '-x,+y,+z', '-y,-x,+z', '+y,+x,+z', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2'], [140, 1, '    I4/mcm', 'Tetragonal', '+x,+y,+z', '-x,-y,+z', '-y,+x,+z', '+y,-x,+z', '-x,+y,-z+1/2', '+x,-y,-z+1/2', '+y,+x,-z+1/2', '-y,-x,-z+1/2', '-x,-y,-z', '+x,+y,-z', '+y,-x,-z', '-y,+x,-z', '+x,-y,+z+1/2', '-x,+y,+z+1/2', '-y,-x,+z+1/2', '+y,+x,+z+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1', '+x+1/2,-y+1/2,-z+1', '+y+1/2,+x+1/2,-z+1', '-y+1/2,-x+1/2,-z+1', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1', '-x+1/2,+y+1/2,+z+1', '-y+1/2,-x+1/2,+z+1', '+y+1/2,+x+1/2,+z+1'], [141, 1, '  I4_1/amd', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '-x+1/2,+y,-z+3/4', '+x,-y+1/2,-z+1/4', '+y+1/2,+x+1/2,-z+1/2', '-y,-x,-z', '-x,-y+1/2,-z+1/4', '+x+1/2,+y,-z+3/4', '+y,-x,-z', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x,+y,+z', '-y+1/2,-x,+z+3/4', '+y,+x+1/2,+z+1/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '-x+1,+y+1/2,-z+5/4', '+x+1/2,-y+1,-z+3/4', '+y+1,+x+1,-z+1', '-y+1/2,-x+1/2,-z+1/2', '-x+1/2,-y+1,-z+3/4', '+x+1,+y+1/2,-z+5/4', '+y+1/2,-x+1/2,-z+1/2', '-y+1,+x+1,-z+1', '+x+1,-y+1,+z+1', '-x+1/2,+y+1/2,+z+1/2', '-y+1,-x+1/2,+z+5/4', '+y+1/2,+x+1,+z+3/4'], [142, 1, '  I4_1/acd', 'Tetragonal', '+x,+y,+z', '-x+1/2,-y+1/2,+z+1/2', '-y,+x+1/2,+z+1/4', '+y+1/2,-x,+z+3/4', '-x+1/2,+y,-z+1/4', '+x,-y+1/2,-z+3/4', '+y+1/2,+x+1/2,-z', '-y,-x,-z+1/2', '-x,-y+1/2,-z+1/4', '+x+1/2,+y,-z+3/4', '+y,-x,-z', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,-y+1/2,+z', '-x,+y,+z+1/2', '-y+1/2,-x,+z+1/4', '+y,+x+1/2,+z+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1,+z+1', '-y+1/2,+x+1,+z+3/4', '+y+1,-x+1/2,+z+5/4', '-x+1,+y+1/2,-z+3/4', '+x+1/2,-y+1,-z+5/4', '+y+1,+x+1,-z+1/2', '-y+1/2,-x+1/2,-z+1', '-x+1/2,-y+1,-z+3/4', '+x+1,+y+1/2,-z+5/4', '+y+1/2,-x+1/2,-z+1/2', '-y+1,+x+1,-z+1', '+x+1,-y+1,+z+1/2', '-x+1/2,+y+1/2,+z+1', '-y+1,-x+1/2,+z+3/4', '+y+1/2,+x+1,+z+5/4'], [143, 1, '        P3', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z'], [144, 1, '      P3_1', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3'], [145, 1, '      P3_2', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3'], [146, 1, '        R3', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3'], [147, 1, '       P-3', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z'], [148, 1, '       R-3', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '-x+2/3,-y+1/3,-z+1/3', '+y+2/3,-x+y+1/3,-z+1/3', '+x-y+2/3,+x+1/3,-z+1/3', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '-x+1/3,-y+2/3,-z+2/3', '+y+1/3,-x+y+2/3,-z+2/3', '+x-y+1/3,+x+2/3,-z+2/3'], [149, 1, '      P312', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z'], [150, 1, '      P321', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z'], [151, 1, '    P3_112', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '-y,-x,-z+2/3', '-x+y,+y,-z+1/3', '+x,+x-y,-z'], [152, 1, '    P3_121', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '+y,+x,-z', '+x-y,-y,-z+2/3', '-x,-x+y,-z+1/3'], [153, 1, '    P3_212', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '-y,-x,-z+1/3', '-x+y,+y,-z+2/3', '+x,+x-y,-z'], [154, 1, '    P3_221', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '+y,+x,-z', '+x-y,-y,-z+1/3', '-x,-x+y,-z+2/3'], [155, 1, '       R32', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '+y+2/3,+x+1/3,-z+1/3', '+x-y+2/3,-y+1/3,-z+1/3', '-x+2/3,-x+y+1/3,-z+1/3', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '+y+1/3,+x+2/3,-z+2/3', '+x-y+1/3,-y+2/3,-z+2/3', '-x+1/3,-x+y+2/3,-z+2/3'], [156, 1, '      P3m1', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z'], [157, 1, '      P31m', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [158, 1, '      P3c1', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2'], [159, 1, '      P31c', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [160, 1, '       R3m', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '-y+2/3,-x+1/3,+z+1/3', '-x+y+2/3,+y+1/3,+z+1/3', '+x+2/3,+x-y+1/3,+z+1/3', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '-y+1/3,-x+2/3,+z+2/3', '-x+y+1/3,+y+2/3,+z+2/3', '+x+1/3,+x-y+2/3,+z+2/3'], [161, 1, '       R3c', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '-y+2/3,-x+1/3,+z+5/6', '-x+y+2/3,+y+1/3,+z+5/6', '+x+2/3,+x-y+1/3,+z+5/6', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '-y+1/3,-x+2/3,+z+7/6', '-x+y+1/3,+y+2/3,+z+7/6', '+x+1/3,+x-y+2/3,+z+7/6'], [162, 1, '     P-31m', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [163, 1, '     P-31c', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-y,-x,-z+1/2', '-x+y,+y,-z+1/2', '+x,+x-y,-z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [164, 1, '     P-3m1', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z'], [165, 1, '     P-3c1', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z+1/2', '+x-y,-y,-z+1/2', '-x,-x+y,-z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2'], [166, 1, '      R-3m', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '+y+2/3,+x+1/3,-z+1/3', '+x-y+2/3,-y+1/3,-z+1/3', '-x+2/3,-x+y+1/3,-z+1/3', '-x+2/3,-y+1/3,-z+1/3', '+y+2/3,-x+y+1/3,-z+1/3', '+x-y+2/3,+x+1/3,-z+1/3', '-y+2/3,-x+1/3,+z+1/3', '-x+y+2/3,+y+1/3,+z+1/3', '+x+2/3,+x-y+1/3,+z+1/3', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '+y+1/3,+x+2/3,-z+2/3', '+x-y+1/3,-y+2/3,-z+2/3', '-x+1/3,-x+y+2/3,-z+2/3', '-x+1/3,-y+2/3,-z+2/3', '+y+1/3,-x+y+2/3,-z+2/3', '+x-y+1/3,+x+2/3,-z+2/3', '-y+1/3,-x+2/3,+z+2/3', '-x+y+1/3,+y+2/3,+z+2/3', '+x+1/3,+x-y+2/3,+z+2/3'], [167, 1, '      R-3c', 'Trigonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+y,+x,-z+1/2', '+x-y,-y,-z+1/2', '-x,-x+y,-z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+x+2/3,+y+1/3,+z+1/3', '-y+2/3,+x-y+1/3,+z+1/3', '-x+y+2/3,-x+1/3,+z+1/3', '+y+2/3,+x+1/3,-z+5/6', '+x-y+2/3,-y+1/3,-z+5/6', '-x+2/3,-x+y+1/3,-z+5/6', '-x+2/3,-y+1/3,-z+1/3', '+y+2/3,-x+y+1/3,-z+1/3', '+x-y+2/3,+x+1/3,-z+1/3', '-y+2/3,-x+1/3,+z+5/6', '-x+y+2/3,+y+1/3,+z+5/6', '+x+2/3,+x-y+1/3,+z+5/6', '+x+1/3,+y+2/3,+z+2/3', '-y+1/3,+x-y+2/3,+z+2/3', '-x+y+1/3,-x+2/3,+z+2/3', '+y+1/3,+x+2/3,-z+7/6', '+x-y+1/3,-y+2/3,-z+7/6', '-x+1/3,-x+y+2/3,-z+7/6', '-x+1/3,-y+2/3,-z+2/3', '+y+1/3,-x+y+2/3,-z+2/3', '+x-y+1/3,+x+2/3,-z+2/3', '-y+1/3,-x+2/3,+z+7/6', '-x+y+1/3,+y+2/3,+z+7/6', '+x+1/3,+x-y+2/3,+z+7/6'], [168, 1, '        P6', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z'], [169, 1, '      P6_1', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '-x,-y,+z+1/2', '+y,-x+y,+z+5/6', '+x-y,+x,+z+1/6'], [170, 1, '      P6_5', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '-x,-y,+z+1/2', '+y,-x+y,+z+1/6', '+x-y,+x,+z+5/6'], [171, 1, '      P6_2', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '-x,-y,+z', '+y,-x+y,+z+2/3', '+x-y,+x,+z+1/3'], [172, 1, '      P6_4', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '-x,-y,+z', '+y,-x+y,+z+1/3', '+x-y,+x,+z+2/3'], [173, 1, '      P6_3', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2'], [174, 1, '       P-6', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z'], [175, 1, '      P6/m', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z'], [176, 1, '    P6_3/m', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z+1/2', '-y,+x-y,-z+1/2', '-x+y,-x,-z+1/2'], [177, 1, '      P622', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z'], [178, 1, '    P6_122', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '-x,-y,+z+1/2', '+y,-x+y,+z+5/6', '+x-y,+x,+z+1/6', '+y,+x,-z+1/3', '+x-y,-y,-z', '-x,-x+y,-z+2/3', '-y,-x,-z+5/6', '-x+y,+y,-z+1/2', '+x,+x-y,-z+1/6'], [179, 1, '    P6_522', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '-x,-y,+z+1/2', '+y,-x+y,+z+1/6', '+x-y,+x,+z+5/6', '+y,+x,-z+2/3', '+x-y,-y,-z', '-x,-x+y,-z+1/3', '-y,-x,-z+1/6', '-x+y,+y,-z+1/2', '+x,+x-y,-z+5/6'], [180, 1, '    P6_222', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+2/3', '-x+y,-x,+z+1/3', '-x,-y,+z', '+y,-x+y,+z+2/3', '+x-y,+x,+z+1/3', '+y,+x,-z+2/3', '+x-y,-y,-z', '-x,-x+y,-z+1/3', '-y,-x,-z+2/3', '-x+y,+y,-z', '+x,+x-y,-z+1/3'], [181, 1, '    P6_422', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z+1/3', '-x+y,-x,+z+2/3', '-x,-y,+z', '+y,-x+y,+z+1/3', '+x-y,+x,+z+2/3', '+y,+x,-z+1/3', '+x-y,-y,-z', '-x,-x+y,-z+2/3', '-y,-x,-z+1/3', '-x+y,+y,-z', '+x,+x-y,-z+2/3'], [182, 1, '    P6_322', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-y,-x,-z+1/2', '-x+y,+y,-z+1/2', '+x,+x-y,-z+1/2'], [183, 1, '      P6mm', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [184, 1, '      P6cc', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [185, 1, '    P6_3cm', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [186, 1, '    P6_3mc', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [187, 1, '     P-6m2', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z'], [188, 1, '     P-6c2', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x,+y,-z+1/2', '-y,+x-y,-z+1/2', '-x+y,-x,-z+1/2', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z'], [189, 1, '     P-62m', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [190, 1, '     P-62c', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '+x,+y,-z+1/2', '-y,+x-y,-z+1/2', '-x+y,-x,-z+1/2', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [191, 1, '    P6/mmm', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [192, 1, '    P6/mcc', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z', '+y,-x+y,+z', '+x-y,+x,+z', '+y,+x,-z+1/2', '+x-y,-y,-z+1/2', '-x,-x+y,-z+1/2', '-y,-x,-z+1/2', '-x+y,+y,-z+1/2', '+x,+x-y,-z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z', '-y,+x-y,-z', '-x+y,-x,-z', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [193, 1, '  P6_3/mcm', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '+y,+x,-z+1/2', '+x-y,-y,-z+1/2', '-x,-x+y,-z+1/2', '-y,-x,-z', '-x+y,+y,-z', '+x,+x-y,-z', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z+1/2', '-y,+x-y,-z+1/2', '-x+y,-x,-z+1/2', '-y,-x,+z+1/2', '-x+y,+y,+z+1/2', '+x,+x-y,+z+1/2', '+y,+x,+z', '+x-y,-y,+z', '-x,-x+y,+z'], [194, 1, '  P6_3/mmc', 'Hexagonal', '+x,+y,+z', '-y,+x-y,+z', '-x+y,-x,+z', '-x,-y,+z+1/2', '+y,-x+y,+z+1/2', '+x-y,+x,+z+1/2', '+y,+x,-z', '+x-y,-y,-z', '-x,-x+y,-z', '-y,-x,-z+1/2', '-x+y,+y,-z+1/2', '+x,+x-y,-z+1/2', '-x,-y,-z', '+y,-x+y,-z', '+x-y,+x,-z', '+x,+y,-z+1/2', '-y,+x-y,-z+1/2', '-x+y,-x,-z+1/2', '-y,-x,+z', '-x+y,+y,+z', '+x,+x-y,+z', '+y,+x,+z+1/2', '+x-y,-y,+z+1/2', '-x,-x+y,+z+1/2'], [195, 1, '       P23', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x'], [196, 1, '       F23', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x'], [197, 1, '       I23', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1/2', '-z+1/2,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y+1/2', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x+1/2', '-y+1/2,-z+1/2,+x+1/2'], [198, 1, '     P2_13', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2'], [199, 1, '     I2_13', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1,-x+1,-y+1/2', '-z+1,-x+1/2,+y+1', '-z+1/2,+x+1,-y+1', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1', '+y+1,-z+1,-x+1/2', '-y+1,-z+1/2,+x+1'], [200, 1, '      Pm-3', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x'], [201, 1, '      Pn-3', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1/2,+x+1/2,+y+1/2', '+z+1/2,+x+1/2,-y+1/2', '+z+1/2,-x+1/2,+y+1/2', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x+1/2', '+y+1/2,+z+1/2,-x+1/2'], [202, 1, '      Fm-3', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '-x,-y+1/2,-z+1/2', '+x,+y+1/2,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2', '-z,-x+1/2,-y+1/2', '-z,+x+1/2,+y+1/2', '+z,+x+1/2,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z+1/2,-x+1/2', '+y,-z+1/2,+x+1/2', '-y,+z+1/2,+x+1/2', '+y,+z+1/2,-x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '-x+1/2,-y,-z+1/2', '+x+1/2,+y,-z+1/2', '+x+1/2,-y,+z+1/2', '-x+1/2,+y,+z+1/2', '-z+1/2,-x,-y+1/2', '-z+1/2,+x,+y+1/2', '+z+1/2,+x,-y+1/2', '+z+1/2,-x,+y+1/2', '-y+1/2,-z,-x+1/2', '+y+1/2,-z,+x+1/2', '-y+1/2,+z,+x+1/2', '+y+1/2,+z,-x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-z+1/2,-x+1/2,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x+1/2,-y', '+z+1/2,-x+1/2,+y', '-y+1/2,-z+1/2,-x', '+y+1/2,-z+1/2,+x', '-y+1/2,+z+1/2,+x', '+y+1/2,+z+1/2,-x'], [203, 1, '      Fd-3', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '-x+1/4,-y+1/4,-z+1/4', '+x+1/4,+y+1/4,-z+1/4', '+x+1/4,-y+1/4,+z+1/4', '-x+1/4,+y+1/4,+z+1/4', '-z+1/4,-x+1/4,-y+1/4', '-z+1/4,+x+1/4,+y+1/4', '+z+1/4,+x+1/4,-y+1/4', '+z+1/4,-x+1/4,+y+1/4', '-y+1/4,-z+1/4,-x+1/4', '+y+1/4,-z+1/4,+x+1/4', '-y+1/4,+z+1/4,+x+1/4', '+y+1/4,+z+1/4,-x+1/4', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '-x+1/4,-y+3/4,-z+3/4', '+x+1/4,+y+3/4,-z+3/4', '+x+1/4,-y+3/4,+z+3/4', '-x+1/4,+y+3/4,+z+3/4', '-z+1/4,-x+3/4,-y+3/4', '-z+1/4,+x+3/4,+y+3/4', '+z+1/4,+x+3/4,-y+3/4', '+z+1/4,-x+3/4,+y+3/4', '-y+1/4,-z+3/4,-x+3/4', '+y+1/4,-z+3/4,+x+3/4', '-y+1/4,+z+3/4,+x+3/4', '+y+1/4,+z+3/4,-x+3/4', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '-x+3/4,-y+1/4,-z+3/4', '+x+3/4,+y+1/4,-z+3/4', '+x+3/4,-y+1/4,+z+3/4', '-x+3/4,+y+1/4,+z+3/4', '-z+3/4,-x+1/4,-y+3/4', '-z+3/4,+x+1/4,+y+3/4', '+z+3/4,+x+1/4,-y+3/4', '+z+3/4,-x+1/4,+y+3/4', '-y+3/4,-z+1/4,-x+3/4', '+y+3/4,-z+1/4,+x+3/4', '-y+3/4,+z+1/4,+x+3/4', '+y+3/4,+z+1/4,-x+3/4', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '-x+3/4,-y+3/4,-z+1/4', '+x+3/4,+y+3/4,-z+1/4', '+x+3/4,-y+3/4,+z+1/4', '-x+3/4,+y+3/4,+z+1/4', '-z+3/4,-x+3/4,-y+1/4', '-z+3/4,+x+3/4,+y+1/4', '+z+3/4,+x+3/4,-y+1/4', '+z+3/4,-x+3/4,+y+1/4', '-y+3/4,-z+3/4,-x+1/4', '+y+3/4,-z+3/4,+x+1/4', '-y+3/4,+z+3/4,+x+1/4', '+y+3/4,+z+3/4,-x+1/4'], [204, 1, '      Im-3', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1/2', '-z+1/2,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y+1/2', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x+1/2', '-y+1/2,-z+1/2,+x+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1/2,+x+1/2,+y+1/2', '+z+1/2,+x+1/2,-y+1/2', '+z+1/2,-x+1/2,+y+1/2', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x+1/2', '+y+1/2,+z+1/2,-x+1/2'], [205, 1, '      Pa-3', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z', '-z,-x,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z,-x', '+y,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x', '+y+1/2,+z,-x+1/2'], [206, 1, '      Ia-3', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z', '-z,-x,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z,-x', '+y,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x', '+y+1/2,+z,-x+1/2', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1,-x+1,-y+1/2', '-z+1,-x+1/2,+y+1', '-z+1/2,+x+1,-y+1', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1', '+y+1,-z+1,-x+1/2', '-y+1,-z+1/2,+x+1', '-x+1/2,-y+1/2,-z+1/2', '+x+1,+y+1/2,-z+1', '+x+1/2,-y+1,+z+1', '-x+1,+y+1,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1,+x+1,+y+1/2', '+z+1,+x+1/2,-y+1', '+z+1/2,-x+1,+y+1', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1,+x+1', '-y+1,+z+1,+x+1/2', '+y+1,+z+1/2,-x+1'], [207, 1, '      P432', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x'], [208, 1, '    P4_232', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2'], [209, 1, '      F432', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+y,+x+1/2,-z+1/2', '-y,-x+1/2,-z+1/2', '+y,-x+1/2,+z+1/2', '-y,+x+1/2,+z+1/2', '+x,+z+1/2,-y+1/2', '-x,+z+1/2,+y+1/2', '-x,-z+1/2,-y+1/2', '+x,-z+1/2,+y+1/2', '+z,+y+1/2,-x+1/2', '+z,-y+1/2,+x+1/2', '-z,+y+1/2,+x+1/2', '-z,-y+1/2,-x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+y+1/2,+x,-z+1/2', '-y+1/2,-x,-z+1/2', '+y+1/2,-x,+z+1/2', '-y+1/2,+x,+z+1/2', '+x+1/2,+z,-y+1/2', '-x+1/2,+z,+y+1/2', '-x+1/2,-z,-y+1/2', '+x+1/2,-z,+y+1/2', '+z+1/2,+y,-x+1/2', '+z+1/2,-y,+x+1/2', '-z+1/2,+y,+x+1/2', '-z+1/2,-y,-x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '+y+1/2,+x+1/2,-z', '-y+1/2,-x+1/2,-z', '+y+1/2,-x+1/2,+z', '-y+1/2,+x+1/2,+z', '+x+1/2,+z+1/2,-y', '-x+1/2,+z+1/2,+y', '-x+1/2,-z+1/2,-y', '+x+1/2,-z+1/2,+y', '+z+1/2,+y+1/2,-x', '+z+1/2,-y+1/2,+x', '-z+1/2,+y+1/2,+x', '-z+1/2,-y+1/2,-x'], [210, 1, '    F4_132', 'Cubic', '+x,+y,+z', '-x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z', '+x+1/2,-y,-z+1/2', '+z,+x,+y', '+z+1/2,-x,-y+1/2', '-z,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y', '+y,+z,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z,-x+1/2', '-y,-z+1/2,+x+1/2', '+y+3/4,+x+1/4,-z+3/4', '-y+1/4,-x+1/4,-z+1/4', '+y+1/4,-x+3/4,+z+3/4', '-y+3/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+3/4', '-x+3/4,+z+3/4,+y+1/4', '-x+1/4,-z+1/4,-y+1/4', '+x+1/4,-z+3/4,+y+3/4', '+z+3/4,+y+1/4,-x+3/4', '+z+1/4,-y+3/4,+x+3/4', '-z+3/4,+y+3/4,+x+1/4', '-z+1/4,-y+1/4,-x+1/4', '+x,+y+1/2,+z+1/2', '-x,-y+1,+z+1', '-x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1/2,-z+1', '+z,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1', '-z,-x+1,+y+1', '-z+1/2,+x+1,-y+1/2', '+y,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1/2', '+y+1/2,-z+1/2,-x+1', '-y,-z+1,+x+1', '+y+3/4,+x+3/4,-z+5/4', '-y+1/4,-x+3/4,-z+3/4', '+y+1/4,-x+5/4,+z+5/4', '-y+3/4,+x+5/4,+z+3/4', '+x+3/4,+z+3/4,-y+5/4', '-x+3/4,+z+5/4,+y+3/4', '-x+1/4,-z+3/4,-y+3/4', '+x+1/4,-z+5/4,+y+5/4', '+z+3/4,+y+3/4,-x+5/4', '+z+1/4,-y+5/4,+x+5/4', '-z+3/4,+y+5/4,+x+3/4', '-z+1/4,-y+3/4,-x+3/4', '+x+1/2,+y,+z+1/2', '-x+1/2,-y+1/2,+z+1', '-x+1,+y+1/2,-z+1/2', '+x+1,-y,-z+1', '+z+1/2,+x,+y+1/2', '+z+1,-x,-y+1', '-z+1/2,-x+1/2,+y+1', '-z+1,+x+1/2,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1,+z+1/2,-x+1/2', '+y+1,-z,-x+1', '-y+1/2,-z+1/2,+x+1', '+y+5/4,+x+1/4,-z+5/4', '-y+3/4,-x+1/4,-z+3/4', '+y+3/4,-x+3/4,+z+5/4', '-y+5/4,+x+3/4,+z+3/4', '+x+5/4,+z+1/4,-y+5/4', '-x+5/4,+z+3/4,+y+3/4', '-x+3/4,-z+1/4,-y+3/4', '+x+3/4,-z+3/4,+y+5/4', '+z+5/4,+y+1/4,-x+5/4', '+z+3/4,-y+3/4,+x+5/4', '-z+5/4,+y+3/4,+x+3/4', '-z+3/4,-y+1/4,-x+3/4', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1,+z+1/2', '-x+1,+y+1,-z', '+x+1,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y', '+z+1,-x+1/2,-y+1/2', '-z+1/2,-x+1,+y+1/2', '-z+1,+x+1,-y', '+y+1/2,+z+1/2,+x', '-y+1,+z+1,-x', '+y+1,-z+1/2,-x+1/2', '-y+1/2,-z+1,+x+1/2', '+y+5/4,+x+3/4,-z+3/4', '-y+3/4,-x+3/4,-z+1/4', '+y+3/4,-x+5/4,+z+3/4', '-y+5/4,+x+5/4,+z+1/4', '+x+5/4,+z+3/4,-y+3/4', '-x+5/4,+z+5/4,+y+1/4', '-x+3/4,-z+3/4,-y+1/4', '+x+3/4,-z+5/4,+y+3/4', '+z+5/4,+y+3/4,-x+3/4', '+z+3/4,-y+5/4,+x+3/4', '-z+5/4,+y+5/4,+x+1/4', '-z+3/4,-y+3/4,-x+1/4'], [211, 1, '      I432', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1/2', '-z+1/2,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y+1/2', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x+1/2', '-y+1/2,-z+1/2,+x+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2'], [212, 1, '    P4_332', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+y+1/4,+x+3/4,-z+3/4', '-y+1/4,-x+1/4,-z+1/4', '+y+3/4,-x+3/4,+z+1/4', '-y+3/4,+x+1/4,+z+3/4', '+x+1/4,+z+3/4,-y+3/4', '-x+3/4,+z+1/4,+y+3/4', '-x+1/4,-z+1/4,-y+1/4', '+x+3/4,-z+3/4,+y+1/4', '+z+1/4,+y+3/4,-x+3/4', '+z+3/4,-y+3/4,+x+1/4', '-z+3/4,+y+1/4,+x+3/4', '-z+1/4,-y+1/4,-x+1/4'], [213, 1, '    P4_132', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+y+3/4,+x+1/4,-z+1/4', '-y+3/4,-x+3/4,-z+3/4', '+y+1/4,-x+1/4,+z+3/4', '-y+1/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+1/4', '-x+1/4,+z+3/4,+y+1/4', '-x+3/4,-z+3/4,-y+3/4', '+x+1/4,-z+1/4,+y+3/4', '+z+3/4,+y+1/4,-x+1/4', '+z+1/4,-y+1/4,+x+3/4', '-z+1/4,+y+3/4,+x+1/4', '-z+3/4,-y+3/4,-x+3/4'], [214, 1, '    I4_132', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+y+3/4,+x+1/4,-z+1/4', '-y+3/4,-x+3/4,-z+3/4', '+y+1/4,-x+1/4,+z+3/4', '-y+1/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+1/4', '-x+1/4,+z+3/4,+y+1/4', '-x+3/4,-z+3/4,-y+3/4', '+x+1/4,-z+1/4,+y+3/4', '+z+3/4,+y+1/4,-x+1/4', '+z+1/4,-y+1/4,+x+3/4', '-z+1/4,+y+3/4,+x+1/4', '-z+3/4,-y+3/4,-x+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1,-x+1,-y+1/2', '-z+1,-x+1/2,+y+1', '-z+1/2,+x+1,-y+1', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1', '+y+1,-z+1,-x+1/2', '-y+1,-z+1/2,+x+1', '+y+5/4,+x+3/4,-z+3/4', '-y+5/4,-x+5/4,-z+5/4', '+y+3/4,-x+3/4,+z+5/4', '-y+3/4,+x+5/4,+z+3/4', '+x+5/4,+z+3/4,-y+3/4', '-x+3/4,+z+5/4,+y+3/4', '-x+5/4,-z+5/4,-y+5/4', '+x+3/4,-z+3/4,+y+5/4', '+z+5/4,+y+3/4,-x+3/4', '+z+3/4,-y+3/4,+x+5/4', '-z+3/4,+y+5/4,+x+3/4', '-z+5/4,-y+5/4,-x+5/4'], [215, 1, '     P-43m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,+z', '-y,-x,+z', '+y,-x,-z', '-y,+x,-z', '+x,+z,+y', '-x,+z,-y', '-x,-z,+y', '+x,-z,-y', '+z,+y,+x', '+z,-y,-x', '-z,+y,-x', '-z,-y,+x'], [216, 1, '     F-43m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,+z', '-y,-x,+z', '+y,-x,-z', '-y,+x,-z', '+x,+z,+y', '-x,+z,-y', '-x,-z,+y', '+x,-z,-y', '+z,+y,+x', '+z,-y,-x', '-z,+y,-x', '-z,-y,+x', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+y,+x+1/2,+z+1/2', '-y,-x+1/2,+z+1/2', '+y,-x+1/2,-z+1/2', '-y,+x+1/2,-z+1/2', '+x,+z+1/2,+y+1/2', '-x,+z+1/2,-y+1/2', '-x,-z+1/2,+y+1/2', '+x,-z+1/2,-y+1/2', '+z,+y+1/2,+x+1/2', '+z,-y+1/2,-x+1/2', '-z,+y+1/2,-x+1/2', '-z,-y+1/2,+x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+y+1/2,+x,+z+1/2', '-y+1/2,-x,+z+1/2', '+y+1/2,-x,-z+1/2', '-y+1/2,+x,-z+1/2', '+x+1/2,+z,+y+1/2', '-x+1/2,+z,-y+1/2', '-x+1/2,-z,+y+1/2', '+x+1/2,-z,-y+1/2', '+z+1/2,+y,+x+1/2', '+z+1/2,-y,-x+1/2', '-z+1/2,+y,-x+1/2', '-z+1/2,-y,+x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '+y+1/2,+x+1/2,+z', '-y+1/2,-x+1/2,+z', '+y+1/2,-x+1/2,-z', '-y+1/2,+x+1/2,-z', '+x+1/2,+z+1/2,+y', '-x+1/2,+z+1/2,-y', '-x+1/2,-z+1/2,+y', '+x+1/2,-z+1/2,-y', '+z+1/2,+y+1/2,+x', '+z+1/2,-y+1/2,-x', '-z+1/2,+y+1/2,-x', '-z+1/2,-y+1/2,+x'], [217, 1, '     I-43m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,+z', '-y,-x,+z', '+y,-x,-z', '-y,+x,-z', '+x,+z,+y', '-x,+z,-y', '-x,-z,+y', '+x,-z,-y', '+z,+y,+x', '+z,-y,-x', '-z,+y,-x', '-z,-y,+x', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1/2', '-z+1/2,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y+1/2', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x+1/2', '-y+1/2,-z+1/2,+x+1/2', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+z+1/2,+y+1/2,+x+1/2', '+z+1/2,-y+1/2,-x+1/2', '-z+1/2,+y+1/2,-x+1/2', '-z+1/2,-y+1/2,+x+1/2'], [218, 1, '     P-43n', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+z+1/2,+y+1/2,+x+1/2', '+z+1/2,-y+1/2,-x+1/2', '-z+1/2,+y+1/2,-x+1/2', '-z+1/2,-y+1/2,+x+1/2'], [219, 1, '     F-43c', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+z+1/2,+y+1/2,+x+1/2', '+z+1/2,-y+1/2,-x+1/2', '-z+1/2,+y+1/2,-x+1/2', '-z+1/2,-y+1/2,+x+1/2', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+y+1/2,+x+1,+z+1', '-y+1/2,-x+1,+z+1', '+y+1/2,-x+1,-z+1', '-y+1/2,+x+1,-z+1', '+x+1/2,+z+1,+y+1', '-x+1/2,+z+1,-y+1', '-x+1/2,-z+1,+y+1', '+x+1/2,-z+1,-y+1', '+z+1/2,+y+1,+x+1', '+z+1/2,-y+1,-x+1', '-z+1/2,+y+1,-x+1', '-z+1/2,-y+1,+x+1', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+y+1,+x+1/2,+z+1', '-y+1,-x+1/2,+z+1', '+y+1,-x+1/2,-z+1', '-y+1,+x+1/2,-z+1', '+x+1,+z+1/2,+y+1', '-x+1,+z+1/2,-y+1', '-x+1,-z+1/2,+y+1', '+x+1,-z+1/2,-y+1', '+z+1,+y+1/2,+x+1', '+z+1,-y+1/2,-x+1', '-z+1,+y+1/2,-x+1', '-z+1,-y+1/2,+x+1', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '+y+1,+x+1,+z+1/2', '-y+1,-x+1,+z+1/2', '+y+1,-x+1,-z+1/2', '-y+1,+x+1,-z+1/2', '+x+1,+z+1,+y+1/2', '-x+1,+z+1,-y+1/2', '-x+1,-z+1,+y+1/2', '+x+1,-z+1,-y+1/2', '+z+1,+y+1,+x+1/2', '+z+1,-y+1,-x+1/2', '-z+1,+y+1,-x+1/2', '-z+1,-y+1,+x+1/2'], [220, 1, '     I-43d', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+y+1/4,+x+1/4,+z+1/4', '-y+1/4,-x+3/4,+z+3/4', '+y+3/4,-x+1/4,-z+3/4', '-y+3/4,+x+3/4,-z+1/4', '+x+1/4,+z+1/4,+y+1/4', '-x+3/4,+z+3/4,-y+1/4', '-x+1/4,-z+3/4,+y+3/4', '+x+3/4,-z+1/4,-y+3/4', '+z+1/4,+y+1/4,+x+1/4', '+z+3/4,-y+1/4,-x+3/4', '-z+3/4,+y+3/4,-x+1/4', '-z+1/4,-y+3/4,+x+3/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1,-x+1,-y+1/2', '-z+1,-x+1/2,+y+1', '-z+1/2,+x+1,-y+1', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1', '+y+1,-z+1,-x+1/2', '-y+1,-z+1/2,+x+1', '+y+3/4,+x+3/4,+z+3/4', '-y+3/4,-x+5/4,+z+5/4', '+y+5/4,-x+3/4,-z+5/4', '-y+5/4,+x+5/4,-z+3/4', '+x+3/4,+z+3/4,+y+3/4', '-x+5/4,+z+5/4,-y+3/4', '-x+3/4,-z+5/4,+y+5/4', '+x+5/4,-z+3/4,-y+5/4', '+z+3/4,+y+3/4,+x+3/4', '+z+5/4,-y+3/4,-x+5/4', '-z+5/4,+y+5/4,-x+3/4', '-z+3/4,-y+5/4,+x+5/4'], [221, 1, '     Pm-3m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '-y,-x,+z', '+y,+x,+z', '-y,+x,-z', '+y,-x,-z', '-x,-z,+y', '+x,-z,-y', '+x,+z,+y', '-x,+z,-y', '-z,-y,+x', '-z,+y,-x', '+z,-y,-x', '+z,+y,+x'], [222, 1, '     Pn-3n', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1/2,+x+1/2,+y+1/2', '+z+1/2,+x+1/2,-y+1/2', '+z+1/2,-x+1/2,+y+1/2', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x+1/2', '+y+1/2,+z+1/2,-x+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,-x+1/2', '+z+1/2,+y+1/2,+x+1/2'], [223, 1, '     Pm-3n', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,-x+1/2', '+z+1/2,+y+1/2,+x+1/2'], [224, 1, '     Pn-3m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1/2,+x+1/2,+y+1/2', '+z+1/2,+x+1/2,-y+1/2', '+z+1/2,-x+1/2,+y+1/2', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x+1/2', '+y+1/2,+z+1/2,-x+1/2', '-y,-x,+z', '+y,+x,+z', '-y,+x,-z', '+y,-x,-z', '-x,-z,+y', '+x,-z,-y', '+x,+z,+y', '-x,+z,-y', '-z,-y,+x', '-z,+y,-x', '+z,-y,-x', '+z,+y,+x'], [225, 1, '     Fm-3m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '-y,-x,+z', '+y,+x,+z', '-y,+x,-z', '+y,-x,-z', '-x,-z,+y', '+x,-z,-y', '+x,+z,+y', '-x,+z,-y', '-z,-y,+x', '-z,+y,-x', '+z,-y,-x', '+z,+y,+x', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+y,+x+1/2,-z+1/2', '-y,-x+1/2,-z+1/2', '+y,-x+1/2,+z+1/2', '-y,+x+1/2,+z+1/2', '+x,+z+1/2,-y+1/2', '-x,+z+1/2,+y+1/2', '-x,-z+1/2,-y+1/2', '+x,-z+1/2,+y+1/2', '+z,+y+1/2,-x+1/2', '+z,-y+1/2,+x+1/2', '-z,+y+1/2,+x+1/2', '-z,-y+1/2,-x+1/2', '-x,-y+1/2,-z+1/2', '+x,+y+1/2,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2', '-z,-x+1/2,-y+1/2', '-z,+x+1/2,+y+1/2', '+z,+x+1/2,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z+1/2,-x+1/2', '+y,-z+1/2,+x+1/2', '-y,+z+1/2,+x+1/2', '+y,+z+1/2,-x+1/2', '-y,-x+1/2,+z+1/2', '+y,+x+1/2,+z+1/2', '-y,+x+1/2,-z+1/2', '+y,-x+1/2,-z+1/2', '-x,-z+1/2,+y+1/2', '+x,-z+1/2,-y+1/2', '+x,+z+1/2,+y+1/2', '-x,+z+1/2,-y+1/2', '-z,-y+1/2,+x+1/2', '-z,+y+1/2,-x+1/2', '+z,-y+1/2,-x+1/2', '+z,+y+1/2,+x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+y+1/2,+x,-z+1/2', '-y+1/2,-x,-z+1/2', '+y+1/2,-x,+z+1/2', '-y+1/2,+x,+z+1/2', '+x+1/2,+z,-y+1/2', '-x+1/2,+z,+y+1/2', '-x+1/2,-z,-y+1/2', '+x+1/2,-z,+y+1/2', '+z+1/2,+y,-x+1/2', '+z+1/2,-y,+x+1/2', '-z+1/2,+y,+x+1/2', '-z+1/2,-y,-x+1/2', '-x+1/2,-y,-z+1/2', '+x+1/2,+y,-z+1/2', '+x+1/2,-y,+z+1/2', '-x+1/2,+y,+z+1/2', '-z+1/2,-x,-y+1/2', '-z+1/2,+x,+y+1/2', '+z+1/2,+x,-y+1/2', '+z+1/2,-x,+y+1/2', '-y+1/2,-z,-x+1/2', '+y+1/2,-z,+x+1/2', '-y+1/2,+z,+x+1/2', '+y+1/2,+z,-x+1/2', '-y+1/2,-x,+z+1/2', '+y+1/2,+x,+z+1/2', '-y+1/2,+x,-z+1/2', '+y+1/2,-x,-z+1/2', '-x+1/2,-z,+y+1/2', '+x+1/2,-z,-y+1/2', '+x+1/2,+z,+y+1/2', '-x+1/2,+z,-y+1/2', '-z+1/2,-y,+x+1/2', '-z+1/2,+y,-x+1/2', '+z+1/2,-y,-x+1/2', '+z+1/2,+y,+x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '+y+1/2,+x+1/2,-z', '-y+1/2,-x+1/2,-z', '+y+1/2,-x+1/2,+z', '-y+1/2,+x+1/2,+z', '+x+1/2,+z+1/2,-y', '-x+1/2,+z+1/2,+y', '-x+1/2,-z+1/2,-y', '+x+1/2,-z+1/2,+y', '+z+1/2,+y+1/2,-x', '+z+1/2,-y+1/2,+x', '-z+1/2,+y+1/2,+x', '-z+1/2,-y+1/2,-x', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-z+1/2,-x+1/2,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x+1/2,-y', '+z+1/2,-x+1/2,+y', '-y+1/2,-z+1/2,-x', '+y+1/2,-z+1/2,+x', '-y+1/2,+z+1/2,+x', '+y+1/2,+z+1/2,-x', '-y+1/2,-x+1/2,+z', '+y+1/2,+x+1/2,+z', '-y+1/2,+x+1/2,-z', '+y+1/2,-x+1/2,-z', '-x+1/2,-z+1/2,+y', '+x+1/2,-z+1/2,-y', '+x+1/2,+z+1/2,+y', '-x+1/2,+z+1/2,-y', '-z+1/2,-y+1/2,+x', '-z+1/2,+y+1/2,-x', '+z+1/2,-y+1/2,-x', '+z+1/2,+y+1/2,+x'], [226, 1, '     Fm-3c', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,-x+1/2', '+z+1/2,+y+1/2,+x+1/2', '+x,+y+1/2,+z+1/2', '-x,-y+1/2,+z+1/2', '-x,+y+1/2,-z+1/2', '+x,-y+1/2,-z+1/2', '+z,+x+1/2,+y+1/2', '+z,-x+1/2,-y+1/2', '-z,-x+1/2,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z+1/2,+x+1/2', '-y,+z+1/2,-x+1/2', '+y,-z+1/2,-x+1/2', '-y,-z+1/2,+x+1/2', '+y+1/2,+x+1,-z+1', '-y+1/2,-x+1,-z+1', '+y+1/2,-x+1,+z+1', '-y+1/2,+x+1,+z+1', '+x+1/2,+z+1,-y+1', '-x+1/2,+z+1,+y+1', '-x+1/2,-z+1,-y+1', '+x+1/2,-z+1,+y+1', '+z+1/2,+y+1,-x+1', '+z+1/2,-y+1,+x+1', '-z+1/2,+y+1,+x+1', '-z+1/2,-y+1,-x+1', '-x,-y+1/2,-z+1/2', '+x,+y+1/2,-z+1/2', '+x,-y+1/2,+z+1/2', '-x,+y+1/2,+z+1/2', '-z,-x+1/2,-y+1/2', '-z,+x+1/2,+y+1/2', '+z,+x+1/2,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z+1/2,-x+1/2', '+y,-z+1/2,+x+1/2', '-y,+z+1/2,+x+1/2', '+y,+z+1/2,-x+1/2', '-y+1/2,-x+1,+z+1', '+y+1/2,+x+1,+z+1', '-y+1/2,+x+1,-z+1', '+y+1/2,-x+1,-z+1', '-x+1/2,-z+1,+y+1', '+x+1/2,-z+1,-y+1', '+x+1/2,+z+1,+y+1', '-x+1/2,+z+1,-y+1', '-z+1/2,-y+1,+x+1', '-z+1/2,+y+1,-x+1', '+z+1/2,-y+1,-x+1', '+z+1/2,+y+1,+x+1', '+x+1/2,+y,+z+1/2', '-x+1/2,-y,+z+1/2', '-x+1/2,+y,-z+1/2', '+x+1/2,-y,-z+1/2', '+z+1/2,+x,+y+1/2', '+z+1/2,-x,-y+1/2', '-z+1/2,-x,+y+1/2', '-z+1/2,+x,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1/2,+z,-x+1/2', '+y+1/2,-z,-x+1/2', '-y+1/2,-z,+x+1/2', '+y+1,+x+1/2,-z+1', '-y+1,-x+1/2,-z+1', '+y+1,-x+1/2,+z+1', '-y+1,+x+1/2,+z+1', '+x+1,+z+1/2,-y+1', '-x+1,+z+1/2,+y+1', '-x+1,-z+1/2,-y+1', '+x+1,-z+1/2,+y+1', '+z+1,+y+1/2,-x+1', '+z+1,-y+1/2,+x+1', '-z+1,+y+1/2,+x+1', '-z+1,-y+1/2,-x+1', '-x+1/2,-y,-z+1/2', '+x+1/2,+y,-z+1/2', '+x+1/2,-y,+z+1/2', '-x+1/2,+y,+z+1/2', '-z+1/2,-x,-y+1/2', '-z+1/2,+x,+y+1/2', '+z+1/2,+x,-y+1/2', '+z+1/2,-x,+y+1/2', '-y+1/2,-z,-x+1/2', '+y+1/2,-z,+x+1/2', '-y+1/2,+z,+x+1/2', '+y+1/2,+z,-x+1/2', '-y+1,-x+1/2,+z+1', '+y+1,+x+1/2,+z+1', '-y+1,+x+1/2,-z+1', '+y+1,-x+1/2,-z+1', '-x+1,-z+1/2,+y+1', '+x+1,-z+1/2,-y+1', '+x+1,+z+1/2,+y+1', '-x+1,+z+1/2,-y+1', '-z+1,-y+1/2,+x+1', '-z+1,+y+1/2,-x+1', '+z+1,-y+1/2,-x+1', '+z+1,+y+1/2,+x+1', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,-z', '+z+1/2,+x+1/2,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x+1/2,+y', '-z+1/2,+x+1/2,-y', '+y+1/2,+z+1/2,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z+1/2,-x', '-y+1/2,-z+1/2,+x', '+y+1,+x+1,-z+1/2', '-y+1,-x+1,-z+1/2', '+y+1,-x+1,+z+1/2', '-y+1,+x+1,+z+1/2', '+x+1,+z+1,-y+1/2', '-x+1,+z+1,+y+1/2', '-x+1,-z+1,-y+1/2', '+x+1,-z+1,+y+1/2', '+z+1,+y+1,-x+1/2', '+z+1,-y+1,+x+1/2', '-z+1,+y+1,+x+1/2', '-z+1,-y+1,-x+1/2', '-x+1/2,-y+1/2,-z', '+x+1/2,+y+1/2,-z', '+x+1/2,-y+1/2,+z', '-x+1/2,+y+1/2,+z', '-z+1/2,-x+1/2,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x+1/2,-y', '+z+1/2,-x+1/2,+y', '-y+1/2,-z+1/2,-x', '+y+1/2,-z+1/2,+x', '-y+1/2,+z+1/2,+x', '+y+1/2,+z+1/2,-x', '-y+1,-x+1,+z+1/2', '+y+1,+x+1,+z+1/2', '-y+1,+x+1,-z+1/2', '+y+1,-x+1,-z+1/2', '-x+1,-z+1,+y+1/2', '+x+1,-z+1,-y+1/2', '+x+1,+z+1,+y+1/2', '-x+1,+z+1,-y+1/2', '-z+1,-y+1,+x+1/2', '-z+1,+y+1,-x+1/2', '+z+1,-y+1,-x+1/2', '+z+1,+y+1,+x+1/2'], [227, 1, '     Fd-3m', 'Cubic', '+x,+y,+z', '-x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z', '+x+1/2,-y,-z+1/2', '+z,+x,+y', '+z+1/2,-x,-y+1/2', '-z,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y', '+y,+z,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z,-x+1/2', '-y,-z+1/2,+x+1/2', '+y+3/4,+x+1/4,-z+3/4', '-y+1/4,-x+1/4,-z+1/4', '+y+1/4,-x+3/4,+z+3/4', '-y+3/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+3/4', '-x+3/4,+z+3/4,+y+1/4', '-x+1/4,-z+1/4,-y+1/4', '+x+1/4,-z+3/4,+y+3/4', '+z+3/4,+y+1/4,-x+3/4', '+z+1/4,-y+3/4,+x+3/4', '-z+3/4,+y+3/4,+x+1/4', '-z+1/4,-y+1/4,-x+1/4', '-x+1/4,-y+1/4,-z+1/4', '+x+1/4,+y+3/4,-z+3/4', '+x+3/4,-y+3/4,+z+1/4', '-x+3/4,+y+1/4,+z+3/4', '-z+1/4,-x+1/4,-y+1/4', '-z+3/4,+x+1/4,+y+3/4', '+z+1/4,+x+3/4,-y+3/4', '+z+3/4,-x+3/4,+y+1/4', '-y+1/4,-z+1/4,-x+1/4', '+y+3/4,-z+3/4,+x+1/4', '-y+3/4,+z+1/4,+x+3/4', '+y+1/4,+z+3/4,-x+3/4', '-y+1/2,-x,+z+1/2', '+y,+x,+z', '-y,+x+1/2,-z+1/2', '+y+1/2,-x+1/2,-z', '-x+1/2,-z,+y+1/2', '+x+1/2,-z+1/2,-y', '+x,+z,+y', '-x,+z+1/2,-y+1/2', '-z+1/2,-y,+x+1/2', '-z,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,-x', '+z,+y,+x', '+x,+y+1/2,+z+1/2', '-x,-y+1,+z+1', '-x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1/2,-z+1', '+z,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1', '-z,-x+1,+y+1', '-z+1/2,+x+1,-y+1/2', '+y,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1/2', '+y+1/2,-z+1/2,-x+1', '-y,-z+1,+x+1', '+y+3/4,+x+3/4,-z+5/4', '-y+1/4,-x+3/4,-z+3/4', '+y+1/4,-x+5/4,+z+5/4', '-y+3/4,+x+5/4,+z+3/4', '+x+3/4,+z+3/4,-y+5/4', '-x+3/4,+z+5/4,+y+3/4', '-x+1/4,-z+3/4,-y+3/4', '+x+1/4,-z+5/4,+y+5/4', '+z+3/4,+y+3/4,-x+5/4', '+z+1/4,-y+5/4,+x+5/4', '-z+3/4,+y+5/4,+x+3/4', '-z+1/4,-y+3/4,-x+3/4', '-x+1/4,-y+3/4,-z+3/4', '+x+1/4,+y+5/4,-z+5/4', '+x+3/4,-y+5/4,+z+3/4', '-x+3/4,+y+3/4,+z+5/4', '-z+1/4,-x+3/4,-y+3/4', '-z+3/4,+x+3/4,+y+5/4', '+z+1/4,+x+5/4,-y+5/4', '+z+3/4,-x+5/4,+y+3/4', '-y+1/4,-z+3/4,-x+3/4', '+y+3/4,-z+5/4,+x+3/4', '-y+3/4,+z+3/4,+x+5/4', '+y+1/4,+z+5/4,-x+5/4', '-y+1/2,-x+1/2,+z+1', '+y,+x+1/2,+z+1/2', '-y,+x+1,-z+1', '+y+1/2,-x+1,-z+1/2', '-x+1/2,-z+1/2,+y+1', '+x+1/2,-z+1,-y+1/2', '+x,+z+1/2,+y+1/2', '-x,+z+1,-y+1', '-z+1/2,-y+1/2,+x+1', '-z,+y+1,-x+1', '+z+1/2,-y+1,-x+1/2', '+z,+y+1/2,+x+1/2', '+x+1/2,+y,+z+1/2', '-x+1/2,-y+1/2,+z+1', '-x+1,+y+1/2,-z+1/2', '+x+1,-y,-z+1', '+z+1/2,+x,+y+1/2', '+z+1,-x,-y+1', '-z+1/2,-x+1/2,+y+1', '-z+1,+x+1/2,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1,+z+1/2,-x+1/2', '+y+1,-z,-x+1', '-y+1/2,-z+1/2,+x+1', '+y+5/4,+x+1/4,-z+5/4', '-y+3/4,-x+1/4,-z+3/4', '+y+3/4,-x+3/4,+z+5/4', '-y+5/4,+x+3/4,+z+3/4', '+x+5/4,+z+1/4,-y+5/4', '-x+5/4,+z+3/4,+y+3/4', '-x+3/4,-z+1/4,-y+3/4', '+x+3/4,-z+3/4,+y+5/4', '+z+5/4,+y+1/4,-x+5/4', '+z+3/4,-y+3/4,+x+5/4', '-z+5/4,+y+3/4,+x+3/4', '-z+3/4,-y+1/4,-x+3/4', '-x+3/4,-y+1/4,-z+3/4', '+x+3/4,+y+3/4,-z+5/4', '+x+5/4,-y+3/4,+z+3/4', '-x+5/4,+y+1/4,+z+5/4', '-z+3/4,-x+1/4,-y+3/4', '-z+5/4,+x+1/4,+y+5/4', '+z+3/4,+x+3/4,-y+5/4', '+z+5/4,-x+3/4,+y+3/4', '-y+3/4,-z+1/4,-x+3/4', '+y+5/4,-z+3/4,+x+3/4', '-y+5/4,+z+1/4,+x+5/4', '+y+3/4,+z+3/4,-x+5/4', '-y+1,-x,+z+1', '+y+1/2,+x,+z+1/2', '-y+1/2,+x+1/2,-z+1', '+y+1,-x+1/2,-z+1/2', '-x+1,-z,+y+1', '+x+1,-z+1/2,-y+1/2', '+x+1/2,+z,+y+1/2', '-x+1/2,+z+1/2,-y+1', '-z+1,-y,+x+1', '-z+1/2,+y+1/2,-x+1', '+z+1,-y+1/2,-x+1/2', '+z+1/2,+y,+x+1/2', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1,+z+1/2', '-x+1,+y+1,-z', '+x+1,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y', '+z+1,-x+1/2,-y+1/2', '-z+1/2,-x+1,+y+1/2', '-z+1,+x+1,-y', '+y+1/2,+z+1/2,+x', '-y+1,+z+1,-x', '+y+1,-z+1/2,-x+1/2', '-y+1/2,-z+1,+x+1/2', '+y+5/4,+x+3/4,-z+3/4', '-y+3/4,-x+3/4,-z+1/4', '+y+3/4,-x+5/4,+z+3/4', '-y+5/4,+x+5/4,+z+1/4', '+x+5/4,+z+3/4,-y+3/4', '-x+5/4,+z+5/4,+y+1/4', '-x+3/4,-z+3/4,-y+1/4', '+x+3/4,-z+5/4,+y+3/4', '+z+5/4,+y+3/4,-x+3/4', '+z+3/4,-y+5/4,+x+3/4', '-z+5/4,+y+5/4,+x+1/4', '-z+3/4,-y+3/4,-x+1/4', '-x+3/4,-y+3/4,-z+1/4', '+x+3/4,+y+5/4,-z+3/4', '+x+5/4,-y+5/4,+z+1/4', '-x+5/4,+y+3/4,+z+3/4', '-z+3/4,-x+3/4,-y+1/4', '-z+5/4,+x+3/4,+y+3/4', '+z+3/4,+x+5/4,-y+3/4', '+z+5/4,-x+5/4,+y+1/4', '-y+3/4,-z+3/4,-x+1/4', '+y+5/4,-z+5/4,+x+1/4', '-y+5/4,+z+3/4,+x+3/4', '+y+3/4,+z+5/4,-x+3/4', '-y+1,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z', '-y+1/2,+x+1,-z+1/2', '+y+1,-x+1,-z', '-x+1,-z+1/2,+y+1/2', '+x+1,-z+1,-y', '+x+1/2,+z+1/2,+y', '-x+1/2,+z+1,-y+1/2', '-z+1,-y+1/2,+x+1/2', '-z+1/2,+y+1,-x+1/2', '+z+1,-y+1,-x', '+z+1/2,+y+1/2,+x'], [228, 1, '     Fd-3c', 'Cubic', '+x,+y,+z', '-x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z', '+x+1/2,-y,-z+1/2', '+z,+x,+y', '+z+1/2,-x,-y+1/2', '-z,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y', '+y,+z,+x', '-y+1/2,+z+1/2,-x', '+y+1/2,-z,-x+1/2', '-y,-z+1/2,+x+1/2', '+y+3/4,+x+1/4,-z+3/4', '-y+1/4,-x+1/4,-z+1/4', '+y+1/4,-x+3/4,+z+3/4', '-y+3/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+3/4', '-x+3/4,+z+3/4,+y+1/4', '-x+1/4,-z+1/4,-y+1/4', '+x+1/4,-z+3/4,+y+3/4', '+z+3/4,+y+1/4,-x+3/4', '+z+1/4,-y+3/4,+x+3/4', '-z+3/4,+y+3/4,+x+1/4', '-z+1/4,-y+1/4,-x+1/4', '-x+3/4,-y+3/4,-z+3/4', '+x+3/4,+y+1/4,-z+1/4', '+x+1/4,-y+1/4,+z+3/4', '-x+1/4,+y+3/4,+z+1/4', '-z+3/4,-x+3/4,-y+3/4', '-z+1/4,+x+3/4,+y+1/4', '+z+3/4,+x+1/4,-y+1/4', '+z+1/4,-x+1/4,+y+3/4', '-y+3/4,-z+3/4,-x+3/4', '+y+1/4,-z+1/4,+x+3/4', '-y+1/4,+z+3/4,+x+1/4', '+y+3/4,+z+1/4,-x+1/4', '-y,-x+1/2,+z', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,+x,-z', '+y,-x,-z+1/2', '-x,-z+1/2,+y', '+x,-z,-y+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z,-y', '-z,-y+1/2,+x', '-z+1/2,+y,-x', '+z,-y,-x+1/2', '+z+1/2,+y+1/2,+x+1/2', '+x,+y+1/2,+z+1/2', '-x,-y+1,+z+1', '-x+1/2,+y+1,-z+1/2', '+x+1/2,-y+1/2,-z+1', '+z,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1', '-z,-x+1,+y+1', '-z+1/2,+x+1,-y+1/2', '+y,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1/2', '+y+1/2,-z+1/2,-x+1', '-y,-z+1,+x+1', '+y+3/4,+x+3/4,-z+5/4', '-y+1/4,-x+3/4,-z+3/4', '+y+1/4,-x+5/4,+z+5/4', '-y+3/4,+x+5/4,+z+3/4', '+x+3/4,+z+3/4,-y+5/4', '-x+3/4,+z+5/4,+y+3/4', '-x+1/4,-z+3/4,-y+3/4', '+x+1/4,-z+5/4,+y+5/4', '+z+3/4,+y+3/4,-x+5/4', '+z+1/4,-y+5/4,+x+5/4', '-z+3/4,+y+5/4,+x+3/4', '-z+1/4,-y+3/4,-x+3/4', '-x+3/4,-y+5/4,-z+5/4', '+x+3/4,+y+3/4,-z+3/4', '+x+1/4,-y+3/4,+z+5/4', '-x+1/4,+y+5/4,+z+3/4', '-z+3/4,-x+5/4,-y+5/4', '-z+1/4,+x+5/4,+y+3/4', '+z+3/4,+x+3/4,-y+3/4', '+z+1/4,-x+3/4,+y+5/4', '-y+3/4,-z+5/4,-x+5/4', '+y+1/4,-z+3/4,+x+5/4', '-y+1/4,+z+5/4,+x+3/4', '+y+3/4,+z+3/4,-x+3/4', '-y,-x+1,+z+1/2', '+y+1/2,+x+1,+z+1', '-y+1/2,+x+1/2,-z+1/2', '+y,-x+1/2,-z+1', '-x,-z+1,+y+1/2', '+x,-z+1/2,-y+1', '+x+1/2,+z+1,+y+1', '-x+1/2,+z+1/2,-y+1/2', '-z,-y+1,+x+1/2', '-z+1/2,+y+1/2,-x+1/2', '+z,-y+1/2,-x+1', '+z+1/2,+y+1,+x+1', '+x+1/2,+y,+z+1/2', '-x+1/2,-y+1/2,+z+1', '-x+1,+y+1/2,-z+1/2', '+x+1,-y,-z+1', '+z+1/2,+x,+y+1/2', '+z+1,-x,-y+1', '-z+1/2,-x+1/2,+y+1', '-z+1,+x+1/2,-y+1/2', '+y+1/2,+z,+x+1/2', '-y+1,+z+1/2,-x+1/2', '+y+1,-z,-x+1', '-y+1/2,-z+1/2,+x+1', '+y+5/4,+x+1/4,-z+5/4', '-y+3/4,-x+1/4,-z+3/4', '+y+3/4,-x+3/4,+z+5/4', '-y+5/4,+x+3/4,+z+3/4', '+x+5/4,+z+1/4,-y+5/4', '-x+5/4,+z+3/4,+y+3/4', '-x+3/4,-z+1/4,-y+3/4', '+x+3/4,-z+3/4,+y+5/4', '+z+5/4,+y+1/4,-x+5/4', '+z+3/4,-y+3/4,+x+5/4', '-z+5/4,+y+3/4,+x+3/4', '-z+3/4,-y+1/4,-x+3/4', '-x+5/4,-y+3/4,-z+5/4', '+x+5/4,+y+1/4,-z+3/4', '+x+3/4,-y+1/4,+z+5/4', '-x+3/4,+y+3/4,+z+3/4', '-z+5/4,-x+3/4,-y+5/4', '-z+3/4,+x+3/4,+y+3/4', '+z+5/4,+x+1/4,-y+3/4', '+z+3/4,-x+1/4,+y+5/4', '-y+5/4,-z+3/4,-x+5/4', '+y+3/4,-z+1/4,+x+5/4', '-y+3/4,+z+3/4,+x+3/4', '+y+5/4,+z+1/4,-x+3/4', '-y+1/2,-x+1/2,+z+1/2', '+y+1,+x+1/2,+z+1', '-y+1,+x,-z+1/2', '+y+1/2,-x,-z+1', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z,-y+1', '+x+1,+z+1/2,+y+1', '-x+1,+z,-y+1/2', '-z+1/2,-y+1/2,+x+1/2', '-z+1,+y,-x+1/2', '+z+1/2,-y,-x+1', '+z+1,+y+1/2,+x+1', '+x+1/2,+y+1/2,+z', '-x+1/2,-y+1,+z+1/2', '-x+1,+y+1,-z', '+x+1,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y', '+z+1,-x+1/2,-y+1/2', '-z+1/2,-x+1,+y+1/2', '-z+1,+x+1,-y', '+y+1/2,+z+1/2,+x', '-y+1,+z+1,-x', '+y+1,-z+1/2,-x+1/2', '-y+1/2,-z+1,+x+1/2', '+y+5/4,+x+3/4,-z+3/4', '-y+3/4,-x+3/4,-z+1/4', '+y+3/4,-x+5/4,+z+3/4', '-y+5/4,+x+5/4,+z+1/4', '+x+5/4,+z+3/4,-y+3/4', '-x+5/4,+z+5/4,+y+1/4', '-x+3/4,-z+3/4,-y+1/4', '+x+3/4,-z+5/4,+y+3/4', '+z+5/4,+y+3/4,-x+3/4', '+z+3/4,-y+5/4,+x+3/4', '-z+5/4,+y+5/4,+x+1/4', '-z+3/4,-y+3/4,-x+1/4', '-x+5/4,-y+5/4,-z+3/4', '+x+5/4,+y+3/4,-z+1/4', '+x+3/4,-y+3/4,+z+3/4', '-x+3/4,+y+5/4,+z+1/4', '-z+5/4,-x+5/4,-y+3/4', '-z+3/4,+x+5/4,+y+1/4', '+z+5/4,+x+3/4,-y+1/4', '+z+3/4,-x+3/4,+y+3/4', '-y+5/4,-z+5/4,-x+3/4', '+y+3/4,-z+3/4,+x+3/4', '-y+3/4,+z+5/4,+x+1/4', '+y+5/4,+z+3/4,-x+1/4', '-y+1/2,-x+1,+z', '+y+1,+x+1,+z+1/2', '-y+1,+x+1/2,-z', '+y+1/2,-x+1/2,-z+1/2', '-x+1/2,-z+1,+y', '+x+1/2,-z+1/2,-y+1/2', '+x+1,+z+1,+y+1/2', '-x+1,+z+1/2,-y', '-z+1/2,-y+1,+x', '-z+1,+y+1/2,-x', '+z+1/2,-y+1/2,-x+1/2', '+z+1,+y+1,+x+1/2'], [229, 1, '     Im-3m', 'Cubic', '+x,+y,+z', '-x,-y,+z', '-x,+y,-z', '+x,-y,-z', '+z,+x,+y', '+z,-x,-y', '-z,-x,+y', '-z,+x,-y', '+y,+z,+x', '-y,+z,-x', '+y,-z,-x', '-y,-z,+x', '+y,+x,-z', '-y,-x,-z', '+y,-x,+z', '-y,+x,+z', '+x,+z,-y', '-x,+z,+y', '-x,-z,-y', '+x,-z,+y', '+z,+y,-x', '+z,-y,+x', '-z,+y,+x', '-z,-y,-x', '-x,-y,-z', '+x,+y,-z', '+x,-y,+z', '-x,+y,+z', '-z,-x,-y', '-z,+x,+y', '+z,+x,-y', '+z,-x,+y', '-y,-z,-x', '+y,-z,+x', '-y,+z,+x', '+y,+z,-x', '-y,-x,+z', '+y,+x,+z', '-y,+x,-z', '+y,-x,-z', '-x,-z,+y', '+x,-z,-y', '+x,+z,+y', '-x,+z,-y', '-z,-y,+x', '-z,+y,-x', '+z,-y,-x', '+z,+y,+x', '+x+1/2,+y+1/2,+z+1/2', '-x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1/2,-x+1/2,-y+1/2', '-z+1/2,-x+1/2,+y+1/2', '-z+1/2,+x+1/2,-y+1/2', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x+1/2', '-y+1/2,-z+1/2,+x+1/2', '+y+1/2,+x+1/2,-z+1/2', '-y+1/2,-x+1/2,-z+1/2', '+y+1/2,-x+1/2,+z+1/2', '-y+1/2,+x+1/2,+z+1/2', '+x+1/2,+z+1/2,-y+1/2', '-x+1/2,+z+1/2,+y+1/2', '-x+1/2,-z+1/2,-y+1/2', '+x+1/2,-z+1/2,+y+1/2', '+z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,+x+1/2', '-z+1/2,-y+1/2,-x+1/2', '-x+1/2,-y+1/2,-z+1/2', '+x+1/2,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1/2,+x+1/2,+y+1/2', '+z+1/2,+x+1/2,-y+1/2', '+z+1/2,-x+1/2,+y+1/2', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x+1/2', '+y+1/2,+z+1/2,-x+1/2', '-y+1/2,-x+1/2,+z+1/2', '+y+1/2,+x+1/2,+z+1/2', '-y+1/2,+x+1/2,-z+1/2', '+y+1/2,-x+1/2,-z+1/2', '-x+1/2,-z+1/2,+y+1/2', '+x+1/2,-z+1/2,-y+1/2', '+x+1/2,+z+1/2,+y+1/2', '-x+1/2,+z+1/2,-y+1/2', '-z+1/2,-y+1/2,+x+1/2', '-z+1/2,+y+1/2,-x+1/2', '+z+1/2,-y+1/2,-x+1/2', '+z+1/2,+y+1/2,+x+1/2'], [230, 1, '     Ia-3d', 'Cubic', '+x,+y,+z', '-x+1/2,-y,+z+1/2', '-x,+y+1/2,-z+1/2', '+x+1/2,-y+1/2,-z', '+z,+x,+y', '+z+1/2,-x+1/2,-y', '-z+1/2,-x,+y+1/2', '-z,+x+1/2,-y+1/2', '+y,+z,+x', '-y,+z+1/2,-x+1/2', '+y+1/2,-z+1/2,-x', '-y+1/2,-z,+x+1/2', '+y+3/4,+x+1/4,-z+1/4', '-y+3/4,-x+3/4,-z+3/4', '+y+1/4,-x+1/4,+z+3/4', '-y+1/4,+x+3/4,+z+1/4', '+x+3/4,+z+1/4,-y+1/4', '-x+1/4,+z+3/4,+y+1/4', '-x+3/4,-z+3/4,-y+3/4', '+x+1/4,-z+1/4,+y+3/4', '+z+3/4,+y+1/4,-x+1/4', '+z+1/4,-y+1/4,+x+3/4', '-z+1/4,+y+3/4,+x+1/4', '-z+3/4,-y+3/4,-x+3/4', '-x,-y,-z', '+x+1/2,+y,-z+1/2', '+x,-y+1/2,+z+1/2', '-x+1/2,+y+1/2,+z', '-z,-x,-y', '-z+1/2,+x+1/2,+y', '+z+1/2,+x,-y+1/2', '+z,-x+1/2,+y+1/2', '-y,-z,-x', '+y,-z+1/2,+x+1/2', '-y+1/2,+z+1/2,+x', '+y+1/2,+z,-x+1/2', '-y+1/4,-x+3/4,+z+3/4', '+y+1/4,+x+1/4,+z+1/4', '-y+3/4,+x+3/4,-z+1/4', '+y+3/4,-x+1/4,-z+3/4', '-x+1/4,-z+3/4,+y+3/4', '+x+3/4,-z+1/4,-y+3/4', '+x+1/4,+z+1/4,+y+1/4', '-x+3/4,+z+3/4,-y+1/4', '-z+1/4,-y+3/4,+x+3/4', '-z+3/4,+y+3/4,-x+1/4', '+z+3/4,-y+1/4,-x+3/4', '+z+1/4,+y+1/4,+x+1/4', '+x+1/2,+y+1/2,+z+1/2', '-x+1,-y+1/2,+z+1', '-x+1/2,+y+1,-z+1', '+x+1,-y+1,-z+1/2', '+z+1/2,+x+1/2,+y+1/2', '+z+1,-x+1,-y+1/2', '-z+1,-x+1/2,+y+1', '-z+1/2,+x+1,-y+1', '+y+1/2,+z+1/2,+x+1/2', '-y+1/2,+z+1,-x+1', '+y+1,-z+1,-x+1/2', '-y+1,-z+1/2,+x+1', '+y+5/4,+x+3/4,-z+3/4', '-y+5/4,-x+5/4,-z+5/4', '+y+3/4,-x+3/4,+z+5/4', '-y+3/4,+x+5/4,+z+3/4', '+x+5/4,+z+3/4,-y+3/4', '-x+3/4,+z+5/4,+y+3/4', '-x+5/4,-z+5/4,-y+5/4', '+x+3/4,-z+3/4,+y+5/4', '+z+5/4,+y+3/4,-x+3/4', '+z+3/4,-y+3/4,+x+5/4', '-z+3/4,+y+5/4,+x+3/4', '-z+5/4,-y+5/4,-x+5/4', '-x+1/2,-y+1/2,-z+1/2', '+x+1,+y+1/2,-z+1', '+x+1/2,-y+1,+z+1', '-x+1,+y+1,+z+1/2', '-z+1/2,-x+1/2,-y+1/2', '-z+1,+x+1,+y+1/2', '+z+1,+x+1/2,-y+1', '+z+1/2,-x+1,+y+1', '-y+1/2,-z+1/2,-x+1/2', '+y+1/2,-z+1,+x+1', '-y+1,+z+1,+x+1/2', '+y+1,+z+1/2,-x+1', '-y+3/4,-x+5/4,+z+5/4', '+y+3/4,+x+3/4,+z+3/4', '-y+5/4,+x+5/4,-z+3/4', '+y+5/4,-x+3/4,-z+5/4', '-x+3/4,-z+5/4,+y+5/4', '+x+5/4,-z+3/4,-y+5/4', '+x+3/4,+z+3/4,+y+3/4', '-x+5/4,+z+5/4,-y+3/4', '-z+3/4,-y+5/4,+x+5/4', '-z+5/4,+y+5/4,-x+3/4', '+z+5/4,-y+3/4,-x+5/4', '+z+3/4,+y+3/4,+x+3/4']]

              // symmetry here
              var symops,nops,j,groupfound,setting,gname,cname,groupname,groupnumber;

              groupname = "P1";
              if (data.includes("_symmetry_space_group_name_H-M")) {
                 groupname = data.split("_symmetry_space_group_name_H-M")[1].split("\n")[0].trim();
              } 
              groupnumber = 1;
              if (data.includes("_space_group_IT_number")) {
                 groupnumber = data.split("_space_group_IT_number")[1].split("\n")[0].trim();
              }
              cname = "Triclinic"
              if (data.includes("_symmetry_cell_setting")) {
                 cname = jsUcfirst(data.split("_symmetry_cell_setting")[1].split("\n")[0].trim());
              }
           
              symops = ["x,y,z"];
              if (data.includes("_symmetry_equiv_pos_as_xyz") || data.includes("_space_group_symop_operation_xyz")) {
                 if (data.includes("_symmetry_equiv_pos_as_xyz")) {
                    symops = data.split("_symmetry_equiv_pos_as_xyz")[1].split("loop_")[0].trim().replace(/'/g,"").replace(/ /g, "").split("\n");
                 } else {
                    symops = data.split("_space_group_symop_operation_xyz")[1].split("loop_")[0].trim().replace(/'/g,"").replace(/ /g, "").split("\n");
                 }
                 nops   = symops.length-1;
                 document.getElementById("symmetryops").value = symops.slice(0,nops).join("\n");

                 j=0;
                 groupfound = false;
                 while ((!groupfound) && (j<symall.length)) {
                    nops = symall[j].length;
                    groupfound = compare_ops(symall[j].slice(4,nops),symops);
                    j += 1;
                 }

                 if (groupfound) {
                    groupnumber = symall[j-1][0];
                    setting = symall[j-1][1];
                    gname   = symall[j-1][2];
                    cname   = symall[j-1][3];
                 } else {
                    setting = 0;
                    gname = groupname.replace(" ","").replace("\'","");
                 }
                 document.getElementById("lattice_group").value = gname.trim();
                 document.getElementById("lattice_group_setting").value = setting;
                 document.getElementById("lattice_group_number").value  = groupnumber;
                 document.getElementById("crystal_system").value  = cname;
              }

              // geometry here 
              var loops = data.split("loop_")
              j=0;
              var geomfound = false;
              while ((!geomfound) && (j<loops.length)) {
                 geomfound = loops[j].includes("_atom_site_type_symbol");
                 geomfound = geomfound || loops[j].includes("_atom_site_label");
                 j += 1;
              }
              var looplines = loops[j-1].trim().split("\n");
              var isym,ix,iy,iz,istart,ss,symb;
              isym = -1; ix = -1; iy = -1; iz = -1; istart = -1;
              for (j=0; j<looplines.length; ++j) {
                  if (looplines[j].includes("_atom_site_type_symbol")) {
                     isym = j;
                  }
                  if ((looplines[j].includes("_atom_site_label")) && (isym<0)) {
                     isym = j;
                  }
                  if (looplines[j].includes("_atom_site_fract_x")) {
                     ix = j;
                  }
                  if (looplines[j].includes("_atom_site_fract_y")) {
                     iy = j;
                  }
                  if (looplines[j].includes("_atom_site_fract_z")) {
                     iz = j;
                  }
                  if (looplines[j].includes("_")) {istart = j;}
               }
               console.log(isym);
               console.log(ix); console.log(iy); console.log(iz);
               istart += 1;
               var fracgeom = [] ;
               for (j=istart; j<looplines.length; ++j) {
                  ss = looplines[j].trim().split(/[ ,]+/);
                  if (ss[isym].length>1) {
                     symb = ss[isym].charAt(0);
                     if (isLetter(ss[isym].charAt(1))) { symb += ss[isym].charAt(1); }
                  } else {
                     symb = ss[isym].charAt(0);
                  }
                  x = parseFloat(ss[ix].split("(")[0]); 
                  y = parseFloat(ss[iy].split("(")[0]);
                  z = parseFloat(ss[iz].split("(")[0]);

                  fracgeom2 = symmetry_genfracgeom(symops,symb,x,y,z);
                  for (n=0; n<fracgeom2.length; ++n) {
                     m = 0;
                     geomfound = false;
                     while ((!geomfound) && (m<fracgeom.length)) {
                        geomfound = (fracgeom2[n][0]==fracgeom[m][0]);
                        geomfound = geomfound && (Math.abs(fracgeom2[n][1]-fracgeom[m][1])<1.0e-6);
                        geomfound = geomfound && (Math.abs(fracgeom2[n][2]-fracgeom[m][2])<1.0e-6);
                        geomfound = geomfound && (Math.abs(fracgeom2[n][3]-fracgeom[m][3])<1.0e-6);
                        m += 1;
                     }
                     if (!geomfound) {
                        fracgeom.push(fracgeom2[n]);
                     }
                  }
               }

	       // unitcell update
               ucell = jmsfetchucell();
               var a1 = ucell[1];
               var a2 = ucell[2];
               var a3 = ucell[3];
               fracdat = '';
               xyzdat  = '';
               for (j=0; j<fracgeom.length; ++j) {
                  fracdat += fracgeom[j][0] + " " + fracgeom[j][1].toFixed(5)
                                            + " " + fracgeom[j][2].toFixed(5)
                                            + " " + fracgeom[j][3].toFixed(5) + "\n";
                  x = a1[0]*fracgeom[j][1] + a2[0]*fracgeom[j][2] + a3[0]*fracgeom[j][3];
                  y = a1[1]*fracgeom[j][1] + a2[1]*fracgeom[j][2] + a3[1]*fracgeom[j][3];
                  z = a1[2]*fracgeom[j][1] + a2[2]*fracgeom[j][2] + a3[2]*fracgeom[j][3];
                  xyzdat += fracgeom[j][0] + " " + x.toFixed(5)
                                           + " " + y.toFixed(5)
                                           + " " + z.toFixed(5) + "\n";
               }
               document.getElementById("fractionalCoords").value = fracdat;
               document.getElementById("cartesianCoords").value  = xyzdat;
               console.log(xyzdat);
               console.log(fracdat);
               nion = fracgeom.length;
               xyzdat = nion + "\n\n" + xyzdat;
               data = xyzdat;
           }

           return data;
        } 

        function myPick() {
           alert('you clicked on atom with index=' + arguments[2]);
        }

        var jm_cmdlist = [];
        var jm_cmdlist2 = [];

        function jm_cmdlist_reset() {
           m_cmdlist  = [];
           jm_cmdlist2 = [];
        }
        function jm_cmdlist_add() {
           var moldat = "\"model reset\"\n" + exMod() + "end \"model reset\"";
           var orient = jmvar("script('show orientation')");
           orient =  "reset; " + orient.split("reset;")[1];
           jm_cmdlist.push([moldat,orient]);
           var n = jm_cmdlist.length;
           if (n>20) {
              jm_cmdlist.shift();
           }
        }
        function jm_cmdlist2_add() {
           var moldat = "\"model reset\"\n" + exMod() + "end \"model reset\"";
           var orient = jmvar("script('show orientation')");
           orient =  "reset; " + orient.split("reset;")[1];
           jm_cmdlist2.push([moldat,orient]);
           var m = jm_cmdlist2.length;
           if (m>40) {
              jm_cmdlist2.shift();
           }
        }

        function jm_cmdlist_undo() {
           var n = jm_cmdlist.length;
           if (n>0) {
              jm_cmdlist2_add();
              var cdat = jm_cmdlist.pop();
              var moldat = cdat[0];
              var orient = cdat[1];
              var scpt = "load data "+moldat + " ;";
                  scpt += 'select Meitnerium; color atoms TRANSLUCENT orange; label "e-"; color label cpk; ';
              //Jmol.script(jmolApplet0, "load data "+moldat);
              Jmol.script(jmolApplet0, scpt);
              //Jmol.script(jmolApplet0, orient);
           }
        }
        function jm_cmdlist_redo() {
           var m = jm_cmdlist2.length;
           if (m>0) {
              jm_cmdlist_add();
              var cdat = jm_cmdlist2.pop();
              var moldat = cdat[0];
              var orient = cdat[1];
              var scpt = "load data "+moldat + " ;";
                  scpt += 'select Meitnerium; color atoms TRANSLUCENT orange; label "e-"; color label cpk; ';
              //Jmol.script(jmolApplet0, "load data "+moldat);
              Jmol.script(jmolApplet0, scpt);
              //Jmol.script(jmolApplet0, orient);
           }
        }


        // basic JMOL routines - all other routines call these functions
        function jms(scpt) { 
           jm_cmdlist_add();
           Jmol.script(jmolApplet0, scpt); 
           jmsetcoordboxes();
        }
        function jms0(scpt) { 
           Jmol.script(jmolApplet0, scpt); 
        }
        function jmstr(scpt) { 
           return Jmol.getPropertyAsString(jmolApplet0,scpt); 
        }
        function jmvar(x) {
           return Jmol.evaluateVar(jmolApplet0, x);
        }



        function jmreset() { jms("load smiles \"" + "C" + "\"; set modelKitMode;"); }



        // ****************************
        // *                          *
        // *     a1a2a3_to_lat        *
        // *                          *
        // ****************************
        function a1a2a3_to_lat(a1,a2,a3) {
           var a = Math.sqrt(a1[0]*a1[0] + a1[1]*a1[1] + a1[2]*a1[2]);
           var b = Math.sqrt(a2[0]*a2[0] + a2[1]*a2[1] + a2[2]*a2[2]);
           var c = Math.sqrt(a3[0]*a3[0] + a3[1]*a3[1] + a3[2]*a3[2]);

           var d2 = (a2[0]-a3[0])*(a2[0]-a3[0])
                  + (a2[1]-a3[1])*(a2[1]-a3[1])
                  + (a2[2]-a3[2])*(a2[2]-a3[2]);
           var alpha = (b*b + c*c - d2)/(2.00*b*c);
           alpha = Math.acos(alpha)*180.00/Math.PI;

           d2 = (a3[0]-a1[0])*(a3[0]-a1[0])
              + (a3[1]-a1[1])*(a3[1]-a1[1])
              + (a3[2]-a1[2])*(a3[2]-a1[2]);
           var beta = (c*c + a*a - d2)/(2.00*c*a);
           beta = Math.acos(beta)*180.00/Math.PI;

           d2 = (a1[0]-a2[0])*(a1[0]-a2[0])
              + (a1[1]-a2[1])*(a1[1]-a2[1])
              + (a1[2]-a2[2])*(a1[2]-a2[2]);
           var gamma = (a*a + b*b - d2)/(2.00*a*b);
           gamma = Math.acos(gamma)*180.00/Math.PI;

           return [a,b,c,alpha,beta,gamma];
        }

        // ****************************
        // *                          *
        // *     a1a2a3_to_b1b2b3     *
        // *                          *
        // ****************************
        function a1a2a3_to_b1b2b3(a1,a2,a3) {
           var   b1 = [a2[1]*a3[2]-a2[2]*a3[1], a2[2]*a3[0]-a2[0]*a3[2], a2[0]*a3[1]-a2[1]*a3[0]];
           var   b2 = [a3[1]*a1[2]-a3[2]*a1[1], a3[2]*a1[0]-a3[0]*a1[2], a3[0]*a1[1]-a3[1]*a1[0]];
           var   b3 = [a1[1]*a2[2]-a1[2]*a2[1], a1[2]*a2[0]-a1[0]*a2[2], a1[0]*a2[1]-a1[1]*a2[0]];
           var vol = a1[0]*b1[0] + a1[1]*b1[1] + a1[2]*b1[2];
           b1[0] /= vol; b1[1] /= vol; b1[2] /= vol;
           b2[0] /= vol; b2[1] /= vol; b2[2] /= vol;
           b3[0] /= vol; b3[1] /= vol; b3[2] /= vol;
           return [b1,b2,b3];
        }

        // ****************************
        // *                          *
        // *     a1a2a3_to_lattice    *
        // *                          *
        // ****************************
        function a1a2a3_to_lattice(a1,a2,a3) {
           var [b1,b2,b3] = a1a2a3_to_b1b2b3(a1,a2,a3);
           var lat        = a1a2a3_to_lat(a1,a2,a3);

           return [a1,a2,a3,b1,b2,b3,lat];
        }

        // ****************************
        // *                          *
        // *     abcabg_to_lattice    *
        // *                          *
        // ****************************
        function abcabg_to_lattice(a,b,c,alpha,beta,gamma) {
           var conv = Math.PI/180.0;
           var cdist = [a,b,c];
           var cang  = [alpha*conv,beta*conv,gamma*conv];
           var gmat = [cdist[0]*cdist[0],
                       cdist[1]*cdist[0]*Math.cos(cang[2]),
                       cdist[2]*cdist[0]*Math.cos(cang[1]),
                       cdist[0]*cdist[1]*Math.cos(cang[2]),
                       cdist[1]*cdist[1],
                       cdist[2]*cdist[1]*Math.cos(cang[0]),
                       cdist[0]*cdist[2]*Math.cos(cang[1]),
                       cdist[1]*cdist[2]*Math.cos(cang[0]),
                       cdist[2]*cdist[2]]
           var deter3 = gmat[0]*(gmat[4]*gmat[8]-gmat[7]*gmat[5])
                      - gmat[3]*(gmat[1]*gmat[8]-gmat[7]*gmat[2])
                      + gmat[6]*(gmat[1]*gmat[5]-gmat[4]*gmat[2]);
           var vol = Math.sqrt(deter3)

           var c1=Math.cos(cang[0]);
           var c2=Math.cos(cang[1]);
           var c3=Math.cos(cang[2]);
           var s3=Math.sin(cang[2]);

           var a1 = [cdist[0]*s3,              cdist[0]*c3, 0.0];
           var a2 = [0.0,                      cdist[1],    0.0];
           var a3 = [(cdist[2]*(c2-c1*c3)/s3), cdist[2]*c1, (vol/(cdist[0]*cdist[1]*s3))];

           var [b1,b2,b3] = a1a2a3_to_b1b2b3(a1,a2,a3);
           var lat        = [a,b,c,alpha,beta,gamma];

           return [a1,a2,a3,b1,b2,b3,lat];
        }

        // ****************************
        // *                          *
        // *     vec3_to_string3      *
        // *                          *
        // ****************************
        function vec3_to_string3(vec3) {
           console.log("vec3=",vec3);
           var string3 = vec3[0].toFixed(4) + " " + vec3[1].toFixed(4) + " " + vec3[2].toFixed(4);
           return string3;
        }

        // ****************************
        // *                          *
        // *     string3_to_vec3      *
        // *                          *
        // ****************************
        function string3_to_vec3(string3) {
           var x = string3.trim().split(/[ ,]+/);
           return  [parseFloat(x[0]),parseFloat(x[1]),parseFloat(x[2])] ;
        }


        // ****************************
        // *                          *
        // *    xyzrow2_to_lattice    *
        // *                          *
        // ****************************
        function xyzrow2_to_lattice(x) {
           var a1,a2,a3,b1,b2,b3,lat,lattice;
           if (x.length==9) {
              a1 = [parseFloat(x[0]),parseFloat(x[1]),parseFloat(x[2])];
              a2 = [parseFloat(x[3]),parseFloat(x[4]),parseFloat(x[5])];
              a3 = [parseFloat(x[7]),parseFloat(x[7]),parseFloat(x[8])];
              lattice = a1a2a3_to_lattice(a1,a2,a3);
           } else {
              a1 = [1.0,0.0,0.0];
              a2 = [0.0,1.0,0.0];
              a3 = [0.0,0.0,1.0];
              b1 = [1.0,0.0,0.0];
              b2 = [0.0,1.0,0.0];
              b3 = [0.0,0.0,1.0];
              lat = [1.0,1.0,1.0,90.0,90.0,90.0];
              lattice = [a1,a2,a3,b1,b2,b3,lat];
           }

           return lattice;
        }

        // ****************************
        // *                          *
        // *       jmshowcell        *
        // *                          *
        // ****************************
        function jmshowcell() { 
           var isshowing = document.getElementById("showcell").value =="Show unit cell";
           var centeron  = document.getElementById("centercell").value == "Origin unit cell";
           if (isshowing) {
              var a1 = document.getElementById("lattice_a1").value;
              var a2 = document.getElementById("lattice_a2").value;
              var a3 = document.getElementById("lattice_a3").value;
              var scpt = "unitcell [{0 0 0} {" + a1 + "} {" + a2 + "} {" + a3 + "}];";
              if (centeron) { scpt += "unitcell {-0.5 -0.5 -0.5};"; }
              scpt += "unitcell ON;"
              jms(scpt); 
              document.getElementById("showcell").value = "Remove unit cell";
           } else {
              jms("unitcell OFF;"); 
              document.getElementById("showcell").value = "Show unit cell";
           }
        }

        // ****************************
        // *                          *
        // *     jmscentercell        *
        // *                          *
        // ****************************
        function jmscentercell() { 
           var docenter = document.getElementById("centercell").value == "Center unit cell";
           if (docenter) {
              jms("unitcell {-0.5 -0.5 -0.5};"); 
              document.getElementById("centercell").value = "Origin unit cell";
           } else {
              jms("unitcell {0.0 0.0 0.0};"); 
              document.getElementById("centercell").value = "Center unit cell";
           }
        }

        // ****************************
        // *                          *
        // *     jmschangecellunits   *
        // *                          *
        // ****************************
        function jmschangecellunits(scal) {
           document.getElementById("cell_a").value *= scal;
           document.getElementById("cell_b").value *= scal;
           document.getElementById("cell_c").value *= scal;
           jsmcellchange(true,true);
        }

        // ****************************
        // *                          *
        // *     jsmcellchange        *
        // *                          *
        // ****************************
        function jsmcellchange(cellchange,scoords) {
           var a1,a2,a3;
           var cellon = document.getElementById("showcell").value != "Show unit cell";
           //var cellon = true;
           var centeron = document.getElementById("centercell").value == "Origin unit cell";
           if (cellchange) {
               var a = parseFloat(document.getElementById("cell_a").value);
               var b = parseFloat(document.getElementById("cell_b").value);
               var c = parseFloat(document.getElementById("cell_c").value);
               var alpha = parseFloat(document.getElementById("cell_alpha").value);
               var beta  = parseFloat(document.getElementById("cell_beta").value);
               var gamma = parseFloat(document.getElementById("cell_gamma").value); 
               var lat = abcabg_to_lattice(a,b,c,alpha,beta,gamma);
               a1 = lat[0]; a2 = lat[1]; a3 = lat[2];	
               document.getElementById("lattice_a1").value = vec3_to_string3(a1);
               document.getElementById("lattice_a2").value = vec3_to_string3(a2);
               document.getElementById("lattice_a3").value = vec3_to_string3(a3);
           } else {
              a1 = string3_to_vec3(document.getElementById("lattice_a1").value);
              a2 = string3_to_vec3(document.getElementById("lattice_a2").value);
              a3 = string3_to_vec3(document.getElementById("lattice_a3").value);
              var lattice = a1a2a3_to_lattice(a1,a2,a3);
              var lat = lattice[6];
              document.getElementById("cell_a").value = lat[0]
              document.getElementById("cell_b").value = lat[1]
              document.getElementById("cell_c").value = lat[2]
              document.getElementById("cell_alpha").value = lat[3]
              document.getElementById("cell_beta").value  = lat[4]
              document.getElementById("cell_gamma").value = lat[5]
           }
           var scpt = "unitcell [{0 0 0} {" + vec3_to_string3(a1) + "} {" + vec3_to_string3(a2) + "} {" + vec3_to_string3(a3) + "}];";
           if (centeron) { scpt += "unitcell {-0.5 -0.5 -0.5};"; }
           if (cellon) { jms(scpt); }
           if (scoords) {jmsetcoordboxes();}
        }


        // ****************************
        // *                          *
        // *    loadframe2jsmol       *
        // *                          *
        // ****************************
        var xyzframes_ntotal = 1;
        var xyzframes_cur = 0;
        var xyzframes = [];
        function loadframe2jsmol(addmodel,append) {
           var a1,a2,a3,xyzcell;
           var xyzdat = jmvar("data({1.1},\"xyz\")");
           var nion = xyzdat.trim().split("\n").length;
           xyzdat = nion + "\n\n" + xyzdat;
           var a1 = document.getElementById("lattice_a1").value;
           var a2 = document.getElementById("lattice_a2").value;
           var a3 = document.getElementById("lattice_a3").value;
           xyzcell = [xyzdat,a1,a2,a3];
           if (addmodel) {
              window.xyzframes_ntotal += 1;
              window.xyzframes.push(xyzcell);
           }

           var orient = jmvar("script('show orientation')");
           orient     =  "reset; " + orient.split("reset;")[1];

           if (append) {
              var amodel   =  parseFloat(prompt("Please enter model to append:", (1+(window.xyzframes_cur+1) % window.xyzframes_ntotal)));
              amodel -= 1;
              var xyzcell1 = window.xyzframes[amodel];
              var xyzdat1 = "\"append\"|" + xyzcell1[0].trim().replace(/\n/g,' | ') + "|end \"append\"";
              jms("set appendNew false; data "+xyzdat1);

           } else {
              var nframes = window.xyzframes.length;
              if (nframes<window.xyzframes_ntotal) {
                 window.xyzframes.push(xyzcell);
                 window.xyzframes_cur = (window.xyzframes_cur + 1) % window.xyzframes_ntotal;
              } else {
                    window.xyzframes[window.xyzframes_cur] = xyzcell;
                    window.xyzframes_cur = (window.xyzframes_cur + 1) % window.xyzframes_ntotal;
                    xyzcell = window.xyzframes[window.xyzframes_cur];
              }
              var i = window.xyzframes_cur + 1;
              document.getElementById("model_label").innerHTML = "Model " + i + " out of " + window.xyzframes_ntotal;

              var scpt = "load data " + "\"model editor\"|" + xyzcell[0].trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              document.getElementById("lattice_a1").value = xyzcell[1];
              document.getElementById("lattice_a2").value = xyzcell[2];
              document.getElementById("lattice_a3").value = xyzcell[3];
           } 
           jms(orient);
           jsmcellchange(false,true);
        }

        // ****************************
        // *                          *
        // *       jmsfoldcell        *
        // *                          *
        // ****************************
        function jmsfoldcell() { 
           var ss,symb,f1,f2,f3,x,y,z;
           var ucell = jmsfetchucell();
           var centeron = document.getElementById("centercell").value == "Origin unit cell";
           var xyzdat = jmvar("data({1.1},\"xyz\")");
           if (xyzdat.includes('Mt')) {
              var ss = xyzdat.split('\n');
              xyzdat = ''
              for (var i=0; i<ss.length; ++i) {
                 if (!ss[i].includes('Mt')) {
                    xyzdat += ss[i] + '\n';
                 }
              }
           }
           var cntr = ucell[0];
           var a1 = ucell[1];
           var a2 = ucell[2];
           var a3 = ucell[3];
           var b1 = ucell[4];
           var b2 = ucell[5];
           var b3 = ucell[6];
           
           var xyzlines = xyzdat.trim().split("\n");
           var nion = xyzlines.length;
           var fracdat = '';
           xyzdat  = '';
           for (var i=0; i<nion; ++i) {
              ss = xyzlines[i].trim().split(/[ ,]+/);
              symb = ss[0];
              x = parseFloat(ss[1]);
              y = parseFloat(ss[2]);
              z = parseFloat(ss[3]);
              f1 = x*b1[0] + y*b1[1] + z*b1[2];
              f2 = x*b2[0] + y*b2[1] + z*b2[2];
              f3 = x*b3[0] + y*b3[1] + z*b3[2];
              while (f1>=0.5) { f1 -= 1.0;}
              while (f2>=0.5) { f2 -= 1.0;}
              while (f3>=0.5) { f3 -= 1.0;}
              while (f1<(-0.5)) { f1 += 1.0;}
              while (f2<(-0.5)) { f2 += 1.0;}
              while (f3<(-0.5)) { f3 += 1.0;}
              //f1 = f1 - Math.floor(f1);
              //f2 = f2 - Math.floor(f2);
              //f3 = f3 - Math.floor(f3);
            
              x = f1*a1[0] + f2*a2[0] + f3*a3[0];
              y = f1*a1[1] + f2*a2[1] + f3*a3[1];
              z = f1*a1[2] + f2*a2[2] + f3*a3[2];
              fracdat += symb + " " + f1.toFixed(5) + " " + f2.toFixed(5) + " " + f3.toFixed(5) + "\n";
              xyzdat  += symb + " " + x.toFixed(5)  + " " + y.toFixed(5)  + " " + z.toFixed(5) + "\n";
           }
           var xyzdat1 = nion + "\n\n" + xyzdat;
           var orient = jmvar("script('show orientation')");
           orient =  "reset; " + orient.split("reset;")[1];
           var xyzdat2 = "\"model editor\"|" + xyzdat1.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms("load data "+xyzdat2);
           jms(orient);
           jsmcellchange(false,false);

           document.getElementById("fractionalCoords").value = fracdat;
           document.getElementById("cartesianCoords").value  = xyzdat;
        }

        // ****************************
        // *                          *
        // *       jmsfetchucell      *
        // *                          *
        // ****************************
        function jmsfetchucell() { 
           var ucell = jmvar("unitcell()");
           var cntr = ucell[0];
           var a1 = ucell[1];
           var a2 = ucell[2];
           var a3 = ucell[3];

           var [b1,b2,b3] = a1a2a3_to_b1b2b3(a1,a2,a3);

           return [cntr,a1,a2,a3,b1,b2,b3]
        }

        // ****************************
        // *                          *
        // *     jmssetcoordboxes     *
        // *                          *
        // ****************************
        function jmsetcoordboxes() { 
           console.log("in jmsetcoordboxes");
           var ss,symb,x,y,z,fx,fy,fz;
           var xyzdat = jmvar("data({1.1},\"xyz\")");
           if (xyzdat.includes('Mt')) {
              var ss = xyzdat.split('\n');
              xyzdat = ''
              for (var i=0; i<ss.length; ++i) {
                 if (!ss[i].includes('Mt')) {
                    xyzdat += ss[i] + '\n';
                 }
              }
           }
           document.getElementById("cartesianCoords").value = xyzdat;
           var a1 = string3_to_vec3(document.getElementById("lattice_a1").value);
           var a2 = string3_to_vec3(document.getElementById("lattice_a2").value);
           var a3 = string3_to_vec3(document.getElementById("lattice_a3").value);
           var [b1,b2,b3] = a1a2a3_to_b1b2b3(a1,a2,a3);
           
           var xyzlines = xyzdat.trim().split("\n");
           var fracdat = '';
           for (var i=0; i<xyzlines.length; ++i) {
              ss = xyzlines[i].trim().split(/[ ,]+/);
              symb = ss[0];
              x = parseFloat(ss[1]);
              y = parseFloat(ss[2]);
              z = parseFloat(ss[3]);
              fx = x*b1[0] + y*b1[1] + z*b1[2];
              fy = x*b2[0] + y*b2[1] + z*b2[2];
              fz = x*b3[0] + y*b3[1] + z*b3[2];
              fracdat += symb + " " + fx.toFixed(5) + " " + fy.toFixed(5) + " " + fz.toFixed(5) + "\n";
           }
           document.getElementById("fractionalCoords").value = fracdat;

        }
 

        function jmsupdatefracbox() { 
           var ss,symb,f1,f2,f3,x,y,z;
           var ucell   = jmsfetchucell();
           var a1 = ucell[1];
           var a2 = ucell[2];
           var a3 = ucell[3];
           var fracdat   = document.getElementById("fractionalCoords").value;
           var fraclines = fracdat.trim().split("\n");
           var nion = fraclines.length;
           var xyzdat = ''
           for (var i=0; i<nion; ++i) {
              ss = fraclines[i].trim().split(/[ ,]+/);
              symb = ss[0];
              f1 = parseFloat(ss[1]);
              f2 = parseFloat(ss[2]);
              f3 = parseFloat(ss[3]);
              x = f1*a1[0] + f2*a2[0] + f3*a3[0];
              y = f1*a1[1] + f2*a2[1] + f3*a3[1];
              z = f1*a1[2] + f2*a2[2] + f3*a3[2];
              xyzdat += symb + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
           }
           document.getElementById("cartesianCoords").value = xyzdat;
           xyzdat = nion + "\n\n" + xyzdat;

           var orient = jmvar("script('show orientation')");
           orient =  "reset; " + orient.split("reset;")[1];
           var xyzdat2 = "\"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms("load data "+xyzdat2);
           jms(orient);
           jsmcellchange(true,false);

           document.getElementById("fractionalCoords").value = fracdat;
        }

        function jmsupdatecartbox() { 
           var ss,symb,f1,f2,f3,x,y,z;
           var ucell   = jmsfetchucell();
           var b1 = ucell[4];
           var b2 = ucell[5];
           var b3 = ucell[6];

           var xyzdat   = document.getElementById("cartesianCoords").value;
           var xyzlines = xyzdat.trim().split("\n");
           var nion = xyzlines.length;

           //update jsmol data
           xyzdat = nion + "\n\n" + xyzdat;
           var orient = jmvar("script('show orientation')");
           orient =  "reset; " + orient.split("reset;")[1];
           var xyzdat2 = "\"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms("load data "+xyzdat2);
           jms(orient);
           jsmcellchange(true,false);

           //update fractional coordinates box
           var fracdat = ''
           for (var i=0; i<nion; ++i) {
              ss = xyzlines[i].trim().split(/[ ,]+/);
              symb = ss[0];
              x = parseFloat(ss[1]);
              y = parseFloat(ss[2]);
              z = parseFloat(ss[3]);
              f1 = x*b1[0] + y*b1[1] + z*b1[2];
              f2 = x*b2[0] + y*b2[1] + z*b2[2];
              f3 = x*b3[0] + y*b3[1] + z*b3[2];
              fracdat += symb + " " + f1.toFixed(5) + " " + f2.toFixed(5) + " " + f3.toFixed(5) + "\n";
           }
           document.getElementById("fractionalCoords").value = fracdat;
        }


        function jmresetPointer() {
           var scpt = 'set picking off; unbind; set picking on; set picking identify; set pickingStyle toggle; set PickCallback \"\"';
           Jmol.script(jmolApplet0, scpt); 
        }



	function jmredrawMolecule() {
                //jms("saveOrientation 99");
                //jms("restore orientation 99");
                //orient =  orient.split("reset;")[0];
                var orient = jmvar("script('show orientation')");
                orient =  "reset; " + orient.split("reset;")[1];
		var mol = exMod();
                var moldat = "\"model reset\"\n" + mol + "end \"model reset\"";
                jms("load data "+moldat);
                jms(orient);
	}

        function jmsmiles() { 
            jms("load smiles \"" + document.JME.smiles().replace('>>','.') + "\""); 
            var hasreaction = document.getElementById("jmolreactionplane").value == "Reaction off";
            if (hasreaction) {
               scpt  = "draw reactionarrow diameter 0.2  color red arrow {-2,0,0}, {2,0,0}; ";
               scpt += "draw reactionplane \"reaction plane\" 1500 color translucent red plane {0,0,0} {0,1,0} {0,0,1};"
               jms0(scpt);
            }
        }
        function jmasmiles() { jms("set appendNew false;load append smiles \"" + document.JME.smiles().replace('>>','.') + "\"; select all; select within(molecule,(*)[0]); minimize select selected;"); }

        function exMod() { 
            return jmstr("extractModel");
         }
        function exModXYZ() { 
           var xyzdat0 = jmvar("data({1.1},\"xyz\")").trim();
           var nion = xyzdat0.split("\n").length;
     
           var xyzdat = nion + "\n";
           xyzdat += document.getElementById("lattice_a1").value + " ";
           xyzdat += document.getElementById("lattice_a2").value + " ";
           xyzdat += document.getElementById("lattice_a3").value + "\n";
           xyzdat += xyzdat0;
           return xyzdat;
        }

        function jmoltoeditor() {editor.setValue(exModXYZ());}



        function submit_nwchemjob2() {
           var arrows_post_url = 'https://arrows.emsl.pnnl.gov/api/upload/';
           var arrows_get_url  = 'https://arrows.emsl.pnnl.gov/api/queue_nwchem_add/';
           var textToSave = editor.getValue();

           //var fileInput = document.getElementById("fileInput");
           if (textToSave.includes("start")) {
              ii = Math.floor(Math.random() * 1000) + 1;
              filenameguess = "nwchem-" + ii +".nw";
              var fileNameToSaveAs =  filenameguess

              textToSave += "\n# queue_name: nwchem :queue_name\n";
              var labelInput = document.getElementById("queue_nwchem_label").value;
              if (labelInput.length==0) {
                 labelInput =  prompt("Please enter Queue Label:", "NWChem Job #" + ii);
              }

              if (textToSave.includes("#curdir ")) {
                 labelInput += " curdir=" + textToSave.split("#curdir ")[1].split("\n")[0].trim();
                 console.log("HERA=", labelInput);
              }
              var qwaitInput = document.getElementById("queue_wait_label").value;
              if (qwaitInput.length>0) {
                 labelInput += " QWAIT::" + qwaitInput + "::QWAIT";
              }

              if (labelInput.length>0) {
                 textToSave += "# label:" + fileNameToSaveAs + " " + labelInput + " :label\n";
              }
              var secret = document.getElementById("queue_secret_code").value.trim();
              if (secret.length>0) {
                 textToSave += "# ARROWS_PASSWORD:" + secret + ":ARROWS_PASSWORD\n"
              }
              if (confirm("Do you want to submit?")) {

                 var textToSaveAsBlob = new Blob([textToSave], {type:"text/plain"});
                 var textToSaveAsURL  = window.URL.createObjectURL(textToSaveAsBlob);

                 var formD = new FormData();
                 formD.append('file', textToSaveAsBlob,fileNameToSaveAs);
                 formD.append('title', fileNameToSaveAs);

                 var xhr = new XMLHttpRequest();
                 xhr.open("POST",  arrows_post_url, true);
                 xhr.send(formD);

                 document.getElementById('runmebanner3').innerHTML= "NWChem Job was uploaded as " + fileNameToSaveAs ;

                 var request = new XMLHttpRequest();
                 request.open('GET', arrows_get_url+fileNameToSaveAs, true);
                 request.onload = function (e) {
                   if (request.readyState === 4) {
                     if (request.status === 200) {
                       console.log(request.responseText);
                       document.getElementById('runmebanner3b').innerHTML= request.responseText;
                     } else {
                       console.error(request.statusText);
                       document.getElementById('runmebanner3b').innerHTML= request.statusText;
                     }
                   }
                 };
                 request.onerror = function (e) {
                   console.error(request.statusText);
                   document.getElementById('runmebanner3b').innerHTML= request.statusText;
                 };
                 request.send();
              }

           } else {
              document.getElementById('runmebanner3').innerHTML= "This is not an NWChem input deck";
           }

        }




        // This routine loads xyzdata into jmol from editor
        //load data "model example"|2|testing|C 1.22 1 1|O 12 2 2|end "model example"
        function jmloadxyz() {
           var xyzdat = "\"model editor\"|" + editor_fetchXYZ().trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms("load data "+xyzdat); 
           jsmcellchange(true,true);
        }

        // This routine loads nwdata, xyzdata, or cifdata into jmol from editor
        function jmloadnwxyzcif() {

        }

        // This routine appends xyzdata into jmol from editor
        function jmappendxyz() {
           var xyzdat = "\"append\"|" + editor_fetchXYZ().trim().replace(/\n/g,' | ') + "|end \"append\"";
           jms("set appendNew false; data "+xyzdat); 
           jsmcellchange(true,true);
        }





        function editorsave() {
           var textToSave = editor.getValue();
           var filenameguess = "nwchem.xyz";
           if (textToSave.includes("geometry")) {
              filenameguess = "nwchem.nw"
           }
           var textToSaveAsBlob = new Blob([textToSave], {type:"text/plain"});
           var textToSaveAsURL  = window.URL.createObjectURL(textToSaveAsBlob);
	   var fileNameToSaveAs =  prompt("Please enter filename:", filenameguess);

           var downloadLink = document.createElement("a");
           downloadLink.download = fileNameToSaveAs;
           downloadLink.innerHTML = "Download File";
           downloadLink.href = textToSaveAsURL;
           downloadLink.onclick = destroyClickedElement;
           downloadLink.style.display = "none";
           document.body.appendChild(downloadLink);

           downloadLink.click();
        }
        function destroyClickedElement(event) {
           document.body.removeChild(event.target);
        }
        function loadfiletoeditor() {
           var data = "no data";
	   var fileToLoad = document.getElementById("fileToLoad").files[0];

           var fileReader = new FileReader();
           fileReader.onload = function(fileLoadedEvent) {
              var textFromFileLoaded = fileLoadedEvent.target.result;
              editor.setValue(textFromFileLoaded);
           };
           fileReader.readAsText(fileToLoad, "UTF-8");
        }

        function loadurltoeditor() {
           var corh = "https://cors-anywhere.herokuapp.com/"
           var url = corh + document.getElementById("urlToLoad").value;
           
           if (url.trim().length>9) {
              var ajax = new XMLHttpRequest();
              ajax.open("GET", url, false); // third parameter is async flag
              ajax.send();
              var textFromUrl = ajax.responseText;
              editor.setValue(textFromUrl);
           }
        }

        function loadbulktojsmol() {
           var a = parseFloat(document.getElementById("bulk_a").value);
           var c = parseFloat(document.getElementById("bulk_c").value);
           var u = parseFloat(document.getElementById("bulk_u").value);
           var bt = document.getElementById("bulk_type").value;
           var bn = document.getElementById("bulk_name").value;
           var bp = document.getElementById("bulk_primitive").checked;
           var bc = document.getElementById("bulk_cubic").checked;
           console.log("a=",a);
           console.log("c=",c);
           console.log("u=",u);
           console.log("bt=",bt);
           console.log("bn=",bn);
           console.log("bc=",bc);
           if ((bt=="sc")||(bt=="cesiumchloride")) {
              var aa2 = a/2.0;
              document.getElementById("cell_a").value = a;
              document.getElementById("cell_b").value = a;
              document.getElementById("cell_c").value = a;
              document.getElementById("cell_alpha").value = 90.0;
              document.getElementById("cell_beta").value  = 90.0;
              document.getElementById("cell_gamma").value = 90.0;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              if (bt=="sc") {
                 xyzdat = "1\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
              } else {
                 xyzdat = "2\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(true,true);
           }
           if ((((bt=="fcc")||(bt=="diamond")||(bt=="zincblende")||(bt=="rocksalt"))&&(bp)&&(!bc))||(bt=="fluorite")) {
              var aa = a/2.0;
              var zz = 0.0;
              a1 = aa.toFixed(4) + " " + aa.toFixed(4) + " " + zz.toFixed(4);
              a2 = aa.toFixed(4) + " " + zz.toFixed(4) + " " + aa.toFixed(4);
              a3 = zz.toFixed(4) + " " + aa.toFixed(4) + " " + aa.toFixed(4);
              document.getElementById("lattice_a1").value = a1;
              document.getElementById("lattice_a2").value = a2;
              document.getElementById("lattice_a3").value = a3;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              var s3 = s2;
              if (ss.length>2) { s3 = ss[2]; }
              if (bt=="fcc") {
                 xyzdat = "1\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
              } else if ((bt=="zincblende") || (bt=="diamond")|| (bt=="rocksalt")) {
                 if (bt=="rocksalt") {
                    var aa2 = a/2.0;
                    xyzdat = "2\n\n";
                    xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                    xyzdat += s2.trim() + " " + aa2.toFixed(5) + " 0.0 0.0\n";
                 } else {
                    var aa4 = a/4.0;
                    xyzdat = "2\n\n";
                    xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                    xyzdat += s2.trim() + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + "\n";
                 }
              } else {
                 var aa4 = a/4.0;
                 var aa34 = 3.0*a/4.0;
                 xyzdat = "3\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + "\n";
                 xyzdat += s3.trim() + " " + aa34.toFixed(5) + " " + aa34.toFixed(5) + " " + aa34.toFixed(5) + "\n";
                 console.log("a1=",a1);
                 console.log("a2=",a2);
                 console.log("a3=",a3);
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(false,true);
           }
           if (((bt=="fcc")||(bt=="diamond")||(bt=="zincblende")||(bt=="rocksalt"))  && (!bp) && (!bc)) {
              var bb = a/Math.sqrt(2.0);
              var aa2 = a/2.0;
              var aa4 = a/4.0;
              var aa34 = 3*a/4.0;
              var bb2 = bb/2.0;
              var zz = 0.0;
              document.getElementById("cell_a").value = bb;
              document.getElementById("cell_b").value = bb;
              document.getElementById("cell_c").value = a;
              document.getElementById("cell_alpha").value = 90.0;
              document.getElementById("cell_beta").value  = 90.0;
              document.getElementById("cell_gamma").value = 90.0;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              if (bt=="fcc") {
                 xyzdat = "2\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + bb2.toFixed(5) + " " +  bb2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
              } else if ((bt=="diamond")||(bt=="zincblende")) {
                 xyzdat = "4\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + bb2.toFixed(5) + " " +  zz.toFixed(5) + " " + aa4.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + bb2.toFixed(5) + " " +  bb2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + zz.toFixed(5) + " " +  bb2.toFixed(5) + " " + aa34.toFixed(5) + "\n";
              } else {
                 xyzdat = "4\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + bb2.toFixed(5) + " " +  bb2.toFixed(5) + " " + zz.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + bb2.toFixed(5) + " " +  bb2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + zz.toFixed(5) + " " +  zz.toFixed(5) + " " + aa2.toFixed(5) + "\n";
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(true,true);
           }

           if (((bt=="fcc")||(bt=="diamond")||(bt=="zincblende")||(bt=="rocksalt")) && bc) {
              var aa2 = a/2.0;
              var aa4 = a/4.0;
              var aa34 = 3*a/4.0;
              var zz = 0.0;
              document.getElementById("cell_a").value = a;
              document.getElementById("cell_b").value = a;
              document.getElementById("cell_c").value = a;
              document.getElementById("cell_alpha").value = 90.0;
              document.getElementById("cell_beta").value  = 90.0;
              document.getElementById("cell_gamma").value = 90.0;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              if (bt=="fcc") {
                 xyzdat = "4\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " 0.0 " + aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " 0.0 " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + " 0.0\n";
              } else if ((bt=="diamond")||(bt=="zincblende")) {
                 xyzdat = "8\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + " " + aa4.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " 0.0 " + aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa4.toFixed(5) + " " + aa34.toFixed(5) + " " + aa34.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + aa2.toFixed(5) + " 0.0 " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa34.toFixed(5) + " " + aa4.toFixed(5) + " " + aa34.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + " 0.0\n";
                 xyzdat += s2.trim() + " " + aa34.toFixed(5) + " " + aa34.toFixed(5) + " " + aa4.toFixed(5) + "\n";
              } else {
                 xyzdat = "8\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " + zz.toFixed(5) + " " + zz.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " 0.0 " + aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + aa2.toFixed(5) + " 0.0 " + aa2.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + zz.toFixed(5) + " " + zz.toFixed(5) + " " + aa2.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + aa2.toFixed(5) + " " + aa2.toFixed(5) + " 0.0\n";
                 xyzdat += s2.trim() + " " + zz.toFixed(5) + " " + aa2.toFixed(5) + " " + zz.toFixed(5) + "\n";
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(true,true);
           }
           if ((bt=="bcc") && (bp) && (!bc)) {
              var aa = a/2.0;
              var maa = -aa;
              a1 = maa.toFixed(4) + " " + aa.toFixed(4) + " " + aa.toFixed(4);
              a2 = aa.toFixed(4) + " " + maa.toFixed(4) + " " + aa.toFixed(4);
              a3 = aa.toFixed(4) + " " + aa.toFixed(4) + " " + maa.toFixed(4);
              document.getElementById("lattice_a1").value = a1;
              document.getElementById("lattice_a2").value = a2;
              document.getElementById("lattice_a3").value = a3;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              xyzdat = "1\n\n";
              xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(false,true);
           }
           if ((bt=="bcc") && ((!bp) || bc)) {
              var aa2 = a/2.0;
              document.getElementById("cell_a").value = a;
              document.getElementById("cell_b").value = a;
              document.getElementById("cell_c").value = a;
              document.getElementById("cell_alpha").value = 90.0;
              document.getElementById("cell_beta").value  = 90.0;
              document.getElementById("cell_gamma").value = 90.0;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              xyzdat = "2\n\n";
              xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
              xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " +  aa2.toFixed(5) + " " + aa2.toFixed(5) + "\n";
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(true,true);
           }
           if (((bt=="hcp")||(bt=="wurtzite")) && (bp)) {
              var maa = -a/2.0;
              var zz = 0.0;
              var ca = Math.sqrt(8.0/3.0)
              if (c>1.0e-3) {
                 ca = a/c;
              } 
              var aa32 = a*Math.sqrt(3)/2.0;
              var caa = ca*a;

    
              a1 = a.toFixed(4)   + " " + zz.toFixed(4)   + " " + zz.toFixed(4);
              a2 = maa.toFixed(4) + " " + aa32.toFixed(4) + " " + zz.toFixed(4);
              a3 = zz.toFixed(4) + " " + zz.toFixed(4)    + " " + caa.toFixed(4);
              document.getElementById("lattice_a1").value = a1;
              document.getElementById("lattice_a2").value = a2;
              document.getElementById("lattice_a3").value = a3;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              if (bt=="hcp") { 
                 var x = 0.0;
                 var y = a * Math.sqrt(3.0)/3.0;
                 var z = caa/2.0;
                 xyzdat = "2\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
              } else {
                 if (u<1.0e-3) { u = 0.25 + (1.0/3.0)/(ca*ca); }
                 xyzdat = "4\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 var x = 1.0/3.0*a  + 2.0/3.0*maa  + (0.5-u)*zz;
                 var y = 1.0/3.0*zz + 2.0/3.0*aa32 + (0.5-u)*zz;
                 var z = 1.0/3.0*zz + 2.0/3.0*zz   + (0.5-u)*caa;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 1.0/3.0*a  + 2.0/3.0*maa  + (0.5)*zz;
                 y = 1.0/3.0*zz + 2.0/3.0*aa32 + (0.5)*zz;
                 z = 1.0/3.0*zz + 2.0/3.0*zz   + (0.5)*caa;
                 xyzdat += s1.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.0*a  + 0.0*maa  + (1.0-u)*zz;
                 y = 0.0*zz + 0.0*aa32 + (1.0-u)*zz;
                 z = 0.0*zz + 0.0*zz   + (1.0-u)*caa;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(false,true);
           }
           if (((bt=="hcp")||(bt=="wurtzite")) && (!bp)) {
              var zz = 0.0;
              var ca = Math.sqrt(8.0/3.0)
              if (c>1.0e-3) {
                 ca = a/c;
              } 
              var aa2  = a/2.0;
              var aa32  = a*Math.sqrt(3.0)/2.0;
              var aa36  = a*Math.sqrt(3.0)/6.0;
              var aa323  = 2.0*a*Math.sqrt(3.0)/3.0;
              var caa2 = ca*a/2.0;

              document.getElementById("cell_a").value = a;
              document.getElementById("cell_b").value = a*Math.sqrt(3.0);
              document.getElementById("cell_c").value = ca*a;
              document.getElementById("cell_alpha").value = 90.0;
              document.getElementById("cell_beta").value  = 90.0;
              document.getElementById("cell_gamma").value = 90.0;
              document.getElementById("showcell").value = "Remove unit cell";
              document.getElementById("centercell").value = "Center unit cell";
              var ss = bn.trim().split(/[ ,]+/);
              var s1 = ss[0];
              var s2 = s1;
              if (ss.length>1) { s2 = ss[1]; }
              if (bt=="hcp") {
                 xyzdat = "4\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " +  aa32.toFixed(5) + " " + zz.toFixed(5) + "\n";
                 xyzdat += s2.trim() + " " + aa2.toFixed(5) + " " +  aa36.toFixed(5) + " " + caa2.toFixed(5) + "\n";
                 xyzdat += s1.trim() + " " + zz.toFixed(5) + " " +  aa323.toFixed(5) + " " + caa2.toFixed(5) + "\n";
              } else {
                 if (u<1.0e-3) { u = 0.25 + (1.0/3.0)/(ca*ca); }
                 xyzdat = "8\n\n";
                 xyzdat += s1.trim() + " 0.0 0.0 0.0\n";
                 var x = 0.0*a;
                 var y = 1/3.0*a*Math.sqrt(3.0);
                 var z = (0.5-u)*ca*a;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.0*a; y = 1/3.0*a*Math.sqrt(3.0);   z = (0.5)*ca*a;
                 xyzdat += s1.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.0*a; y = 0.0*a*Math.sqrt(3.0);     z = (1.0-u)*ca*a;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.5*a; y = 0.5*a*Math.sqrt(3.0);     z = 0.0*ca*a;
                 xyzdat += s1.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.5*a; y = 5.0/6.0*a*Math.sqrt(3.0); z = (0.5-u)*ca*a;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.5*a; y = 5.0/6.0*a*Math.sqrt(3.0); z = (0.5)*ca*a;
                 xyzdat += s1.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
                 x = 0.5*a; y = 0.5*a*Math.sqrt(3.0);     z = (1.0-u)*ca*a;
                 xyzdat += s2.trim() + " " + x.toFixed(5) + " " + y.toFixed(5) + " " + z.toFixed(5) + "\n";
              }
              var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
              jms(scpt);
              jsmcellchange(true,true);

           }
        }

        var checkedRadio = [null,null];
        function ClearRd(ths,ii) {
           if (checkedRadio[ii] == ths) {
               ths.checked = false;
               checkedRadio[ii] = null;
           } else {
               checkedRadio[ii] = ths; 
           }
        }
        function defineslab() {
           var sc = document.getElementById("surface_cut").value;
           if (sc=="sc100") { 
              document.getElementById("surface_a").value = "0.0  1.0  0.0";
              document.getElementById("surface_b").value = "0.0  0.0  1.0";
              document.getElementById("surface_c").value = "1.0  0.0  0.0";
           }
           if (sc=="sc111") { 
              document.getElementById("surface_a").value = " 1.0 -1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  1.0 -1.0";
              document.getElementById("surface_c").value = "-1.0 -1.0 -1.0";
           }
           if (sc=="fcc100") { 
              document.getElementById("surface_a").value = " 0.0  1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  0.0  1.0";
              document.getElementById("surface_c").value = " 1.0  0.0  0.0";
           }
           if (sc=="fcc110") { 
              document.getElementById("surface_a").value = " 0.0  0.0  2.0";
              document.getElementById("surface_b").value = " 1.5 -1.5  0.0";
              document.getElementById("surface_c").value = " 1.5  1.5  0.0";
           }
           if (sc=="fcc111") { 
              document.getElementById("surface_a").value = " 1.5 -1.5  0.0";
              document.getElementById("surface_b").value = " 0.0  1.5 -1.5";
              document.getElementById("surface_c").value = "-1.0 -1.0 -1.0";
           }
           if (sc=="fcc211") { 
              document.getElementById("surface_a").value = " 0.0  1.5 -1.5";
              document.getElementById("surface_b").value = " 1.0 -1.0 -1.0";
              document.getElementById("surface_c").value = " 2.0  1.0  1.0";
           }
           if (sc=="bcc100") { 
              document.getElementById("surface_a").value = " 0.0  1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  0.0  1.0";
              document.getElementById("surface_c").value = " 1.0  0.0  0.0";
           }
           if (sc=="bcc001") { 
              document.getElementById("surface_a").value = " 1.0  0.0  0.0";
              document.getElementById("surface_b").value = " 0.0  1.0  0.0";
              document.getElementById("surface_c").value = " 0.0  0.0  1.0";
           }
           if (sc=="bcc110") { 
              document.getElementById("surface_a").value = " 0.0  0.0  2.0";
              document.getElementById("surface_b").value = " 1.0 -1.0  0.0";
              document.getElementById("surface_c").value = " 1.0  1.0  0.0";
           }
           if (sc=="bcc111") { 
              document.getElementById("surface_a").value = " 1.0 -1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  1.0 -1.0";
              document.getElementById("surface_c").value = "-1.0 -1.0 -1.0";
           }
           if (sc=="hcp0001") { 
              document.getElementById("surface_a").value = " 1.0  0.0  0.0";
              document.getElementById("surface_b").value = " 0.0  1.0  0.0";
              document.getElementById("surface_c").value = " 0.0  0.0  1.0";
           }
           if (sc=="diamond100") { 
              document.getElementById("surface_a").value = " 0.0  1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  0.0  1.0";
              document.getElementById("surface_c").value = " 1.0  0.0  0.0";
           }
           if (sc=="diamond111") { 
              document.getElementById("surface_a").value = " 1.0 -1.0  0.0";
              document.getElementById("surface_b").value = " 0.0  1.0 -1.0";
              document.getElementById("surface_c").value = "-1.0 -1.0 -1.0";
           }
        }

        function cutslab() {
           var i,a,b,c,ss,origin,vacuum,scaling,tolerance,nlayers;
           var atoms,a1,a2,a3,tmp;

           ss = document.getElementById("surface_a").value.trim().split(/[ ,]+/);
           a = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           ss = document.getElementById("surface_b").value.trim().split(/[ ,]+/);
           b = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           ss = document.getElementById("surface_c").value.trim().split(/[ ,]+/);
           c = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           ss = document.getElementById("surface_origin").value.trim().split(/[ ,]+/);
           origin = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           tolerance = parseFloat(document.getElementById("surface_tolerance").value.trim());
           vacuum = parseFloat(document.getElementById("surface_vacuum").value.trim());
           ss = document.getElementById("surface_scaling").value.trim().split(/[ ,]+/);
           if (ss.length>2) {
              scaling = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];
           } else if (ss.length==2) {
              scaling = [parseFloat(ss[0]), parseFloat(ss[0]), parseFloat(ss[1])];
           } else if (ss.length==1) {
              scaling = [parseFloat(ss[0]), parseFloat(ss[0]), parseFloat(ss[0])];
           } else  {
              scaling = [1.0,1.0,1.0];
           }

           ss = document.getElementById("lattice_a1").value.trim().split(/[ ,]+/);
           a1 = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];
           
           ss = document.getElementById("lattice_a2").value.trim().split(/[ ,]+/);
           a2 = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           ss = document.getElementById("lattice_a3").value.trim().split(/[ ,]+/); 
           a3 = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];

           //tmp = document.getElementById("cartesianCoords").value.trim().split("\n");
           tmp = jmvar("data({1.1},\"xyz\")").trim().split("\n");
           atoms = [];
           for (i=0; i<tmp.length; ++i) {
              ss = tmp[i].trim().split(/[ ,]+/); 
              atoms.push( [ss[0],parseFloat(ss[1]),parseFloat(ss[2]),parseFloat(ss[3])] );
           }
           console.log(atoms);

           //lattice vectors in cells are stored along rows!
         //  var cell = [a1[0],a2[0],a3[0],
         //              a1[1],a2[1],a3[1],
         //              a1[2],a2[2],a3[2]];

         //  if ((Math.abs(c[0])<1.0e-5) && (Math.abs(c[1])<1.0e-5) && (Math.abs(c[2])<1.0e-5)) {
         //     var metric = mat33mult(cell,mat33trans(cell));
         //     var vol = Math.sqrt(mat33det(metric));
         //     c = mat33vec3solv(mat33trans(metric),vec3cross(a,b))*Math.pow(vol,2.0/3.0);
         //  }

           a[0] *= scaling[0]; a[1] *= scaling[0]; a[2] *= scaling[0];
           b[0] *= scaling[1]; b[1] *= scaling[1]; b[2] *= scaling[1];
           c[0] *= scaling[2]; c[1] *= scaling[2]; c[2] *= scaling[2];
           var cutatomscell = cutslab0(atoms,a1,a2,a3,a,b,c,origin,vacuum,tolerance);
           atoms = cutatomscell[0];
           var aa1 = cutatomscell[1];
           var aa2 = cutatomscell[2];
           var aa3 = cutatomscell[3];
           
           a1 = aa1[0].toFixed(4) + " " + aa1[1].toFixed(4) + " " + aa1[2].toFixed(4);
           a2 = aa2[0].toFixed(4) + " " + aa2[1].toFixed(4) + " " + aa2[2].toFixed(4);
           a3 = aa3[0].toFixed(4) + " " + aa3[1].toFixed(4) + " " + aa3[2].toFixed(4);
           document.getElementById("lattice_a1").value = a1;
           document.getElementById("lattice_a2").value = a2;
           document.getElementById("lattice_a3").value = a3;

           var xyzdat = atoms.length + "\n\n";
           for (i=0; i<atoms.length; ++i) {
              xyzdat += atoms[i][0] + " " + atoms[i][1].toFixed(5)
                                    + " " + atoms[i][2].toFixed(5)
                                    + " " + atoms[i][3].toFixed(5) + "\n";
           }
           var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms(scpt);
           jsmcellchange(false,true);
           //scpt = "select *; minimize FIX selected;";
           //jms(scpt);
        }


        function cutslab0(atoms,a1,a2,a3,a,b,c,origin,vacuum,tolerance) {
           var ii,i1,i2,i3,n1,n2,n3,f1,f2,f3,x,y,z,tx,ty,tz;
           var dd,ddmin,atom;

           var b1 = [a2[1]*a3[2]-a2[2]*a3[1], a2[2]*a3[0]-a2[0]*a3[2], a2[0]*a3[1]-a2[1]*a3[0]];
           var b2 = [a3[1]*a1[2]-a3[2]*a1[1], a3[2]*a1[0]-a3[0]*a1[2], a3[0]*a1[1]-a3[1]*a1[0]];
           var b3 = [a1[1]*a2[2]-a1[2]*a2[1], a1[2]*a2[0]-a1[0]*a2[2], a1[0]*a2[1]-a1[1]*a2[0]];
           var vol = a1[0]*b1[0] + a1[1]*b1[1] + a1[2]*b1[2];
           b1[0] /= vol; b1[1] /= vol; b1[2] /= vol;
           b2[0] /= vol; b2[1] /= vol; b2[2] /= vol;
           b3[0] /= vol; b3[1] /= vol; b3[2] /= vol;

           var aa1 = [a[0]*a1[0] + a[1]*a2[0] + a[2]*a3[0],
                      a[0]*a1[1] + a[1]*a2[1] + a[2]*a3[1],
                      a[0]*a1[2] + a[1]*a2[2] + a[2]*a3[2]];
           var aa2 = [b[0]*a1[0] + b[1]*a2[0] + b[2]*a3[0],
                      b[0]*a1[1] + b[1]*a2[1] + b[2]*a3[1],
                      b[0]*a1[2] + b[1]*a2[2] + b[2]*a3[2]];
           var aa3 = [c[0]*a1[0] + c[1]*a2[0] + c[2]*a3[0],
                      c[0]*a1[1] + c[1]*a2[1] + c[2]*a3[1],
                      c[0]*a1[2] + c[1]*a2[2] + c[2]*a3[2]];
           var bb1 = [aa2[1]*aa3[2]-aa2[2]*aa3[1], aa2[2]*aa3[0]-aa2[0]*aa3[2], aa2[0]*aa3[1]-aa2[1]*aa3[0]];
           var bb2 = [aa3[1]*aa1[2]-aa3[2]*aa1[1], aa3[2]*aa1[0]-aa3[0]*aa1[2], aa3[0]*aa1[1]-aa3[1]*aa1[0]];
           var bb3 = [aa1[1]*aa2[2]-aa1[2]*aa2[1], aa1[2]*aa2[0]-aa1[0]*aa2[2], aa1[0]*aa2[1]-aa1[1]*aa2[0]];
           console.log("ibb1=",bb1);
           console.log("ibb2=",bb2);
           console.log("ibb3=",bb3);
           console.log("iaa1=",aa1);

           var vol = aa1[0]*bb1[0] + aa1[1]*bb1[1] + aa1[2]*bb1[2];
           console.log("vol=",vol);
           bb1[0] /= vol; bb1[1] /= vol; bb1[2] /= vol;
           bb2[0] /= vol; bb2[1] /= vol; bb2[2] /= vol;
           bb3[0] /= vol; bb3[1] /= vol; bb3[2] /= vol;

           n1=1;n2=1;n3=1;
           for (i3=0; i3<2; ++i3) {
              for (i2=0; i2<2; ++i2) {
                 for (i1=0; i1<2; ++i1) {
                    x = i1*aa1[0] + i2*aa2[0] + i3*aa3[0] - origin[0];
                    y = i1*aa1[1] + i2*aa2[1] + i3*aa3[1] - origin[1];
                    z = i1*aa1[2] + i2*aa2[2] + i3*aa3[2] - origin[2];
                    f1 = x*bb1[0] + y*bb1[1] + z*bb1[2];
                    f2 = x*bb2[0] + y*bb2[1] + z*bb2[2];
                    f3 = x*bb3[0] + y*bb3[1] + z*bb3[2];
                    if (Math.abs(f1)>n1) { n1 = Math.abs(f1); }
                    if (Math.abs(f2)>n2) { n2 = Math.abs(f2); }
                    if (Math.abs(f3)>n3) { n3 = Math.abs(f3); }
                 }
              }
           }
           n1 = 25;
           n2 = 25;
           n3 = 25;

           console.log("n1=",n1);
           console.log("n2=",n2);
           console.log("n3=",n3);
           console.log("a1=",a1);
           console.log("a2=",a2);
           console.log("a3=",a3);
           console.log("aa1=",aa1);
           console.log("aa2=",aa2);
           console.log("aa3=",aa3);
           console.log("bb1=",bb1);
           console.log("bb2=",bb2);
           console.log("bb3=",bb3);



           var delta = 1.0e-8;
           var xx,yy,zz;
           var atoms2 = [];
           for (i3=(-n3); i3<=n3; ++i3) {
              for (i2=(-n2); i2<=n2; ++i2) {
                 for (i1=(-n1); i1<=n1; ++i1) {
                    for (ii=0; ii<atoms.length; ++ii) {
                       atom = atoms[ii];
                       symb = atom[0];
                       x    = atom[1]; y = atom[2]; z = atom[3];

                       xx = x + i1*a1[0] + i2*a2[0] + i3*a3[0] - origin[0];
                       yy = y + i1*a1[1] + i2*a2[1] + i3*a3[1] - origin[1];
                       zz = z + i1*a1[2] + i2*a2[2] + i3*a3[2] - origin[2];

                       f1 = xx*bb1[0] + yy*bb1[1] + zz*bb1[2];
                       f2 = xx*bb2[0] + yy*bb2[1] + zz*bb2[2];
                       f3 = xx*bb3[0] + yy*bb3[1] + zz*bb3[2];
                       if ((f1>=(-0.5-delta)) && (f1<(0.5-delta)) && (f2>=(-0.5-delta)) && (f2<(0.5-delta)) && (f3>=(-0.5-delta)) && (f3<=(0.5+tolerance))) {
                          console.log("f1,f2,f3=",f1,f2,f3,xx,yy,zz);
                          console.log("i1,i2,i3=",i1,i2,i3,x,y,z);
                          atoms2.push([atom[0],xx,yy,zz])
                       }
                    }
                 }
              }
           }

           tx = Math.sqrt(aa3[0]*aa3[0] + aa3[1]*aa3[1] + aa3[2]*aa3[2]);
           tz = tx/2 + vacuum/2;
           ty = 1.0 + vacuum/tx;
           aa3[0] *= ty;
           aa3[1] *= ty;
           aa3[2] *= ty;

           return [atoms2,aa1,aa2,aa3];
        }

        function vec3cross(a,b) {
           return [(a[1]*b[2]-a[2]*b[1]),(a[2]*b[0]-a[0]*b[2]),(a[0]*b[1]-a[1]*b[0])];
        }
        function mat33trans(m) {
           return  [m[0],m[3],m[6],
                    m[1],m[4],m[7],
                    m[2],m[5],m[8]];
        }
        function mat33mult(m1,m2) {
           return [m1[0]*m2[0] + m1[3]*m2[1] + m1[6]*m2[2],
                   m1[1]*m2[0] + m1[4]*m2[1] + m1[7]*m2[2],
                   m1[2]*m2[0] + m1[5]*m2[1] + m1[8]*m2[2],
                   m1[0]*m2[3] + m1[3]*m2[4] + m1[6]*m2[5],
                   m1[1]*m2[3] + m1[4]*m2[4] + m1[7]*m2[5],
                   m1[2]*m2[3] + m1[5]*m2[4] + m1[8]*m2[5],
                   m1[0]*m2[6] + m1[3]*m2[7] + m1[6]*m2[8],
                   m1[1]*m2[6] + m1[4]*m2[7] + m1[7]*m2[8],
                   m1[2]*m2[6] + m1[5]*m2[7] + m1[8]*m2[8]];
        }
        function mat33det(m) {
           return (m[0]*(m[4]*m[8]-m[5]*m[7])+m[3]*(m[7]*m[2]-m[8]*m[1])+m[6]*(m[1]*m[5]-m[2]*m[4]));
        }
        function mat33norm(m) {
           return Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]+m[3]*m[3]+m[4]*m[4]+m[5]*m[5]+m[6]*m[6]+m[7]*m[7]+m[8]*m[8]);
        }

        function mat33vec3solv(m,b) {
           var d = mat33det(m);
           var dx = mat33det( [b[0],b[1],b[2], m[3],m[4],m[5], m[6],m[7],m[8]] );
           var dy = mat33det( [m[0],m[1],m[2], b[0],b[1],b[2], m[6],m[7],m[8]] );
           var dz = mat33det( [m[0],m[1],m[2], m[3],m[4],m[5], b[0],b[1],b[2]] );
           return [dx/d, dy/d, dz/d];
        }

        function finish_solvateurltojsmol(textFromUrl) {
           var tmp = textFromUrl.split("simulation_cell")[1].split("end")[0].trim();
           var a1,a2,a3;
           if (tmp.includes("lattice_vectors")) {
              a1 = string3_to_vec3(tmp.split("\n")[1]); a1[0] *= 0.529177; a1[1] *= 0.529177; a1[2] *= 0.529177;
              a2 = string3_to_vec3(tmp.split("\n")[2]); a2[0] *= 0.529177; a2[1] *= 0.529177; a2[2] *= 0.529177;
              a3 = string3_to_vec3(tmp.split("\n")[3]); a3[0] *= 0.529177; a3[1] *= 0.529177; a3[2] *= 0.529177;
           } else if (tmp.includes("SC")) {
              var a = 0.529177*parseFloat(tmp.split("SC")[1].split("\n")[0]);
              var lat = abcabg_to_lattice(a,a,a,90.0,90.0,90.0);
              a1 = lat[0];
              a2 = lat[1];
              a3 = lat[2];
           }
           document.getElementById("lattice_a1").value = vec3_to_string3(a1);
           document.getElementById("lattice_a2").value = vec3_to_string3(a2);
           document.getElementById("lattice_a3").value = vec3_to_string3(a3);
           document.getElementById("showcell").value   = "Remove unit cell";
           document.getElementById("centercell").value = "Origin unit cell";

           var xyz = textFromUrl.split("geometry noautosym noautoz")[1].split("end")[0].trim();
           var nion = xyz.split("\n").length;
           var xyzdat = nion + "\n\n" + xyz;

           var scpt = "load data \"model editor\"|" + xyzdat.trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           jms(scpt);
           jsmcellchange(false,true);

           var mformula = textFromUrl.split("#mformula = ")[1].split("\n")[0].trim();
           var x =  "#nwchem_input  " + mformula + "-aimdmm.nw\n";
           x += "#nwchem_output " + mformula + "-aimdmm.out00\n";
           x += "#nwchem_done   " + mformula + "-aimdmm.done\n";
           x += "#\n";
           x += "#mformula_off\n";
           x += "#\n";
           x += "#transfer_files *.xyz *.ion_motion *.emotion *.fei *.cif *.hist *.gr *.dat *.meta_gaussians *.cube\n";
           x += "#\n";
           x += "#curdir we31869.emsl.pnl.gov:/media/seagate2/Projects/"+mformula+"-aimdmm\n";
           x += "#\n";
           x += "#permdir " + mformula + "-aimdmm\n";
           x += "#deletescratch no\n";
           x += "#queuesave no\n"
           x += "#\n";
           x += "#machine edison\n";
           x += "#cputime 8:05:00\n";
           x += "#ncpus 48\n";
           x += "#queue regular\n";
           x += "#\n";
           var data = x + textFromUrl.split("#Fetched the following entry:")[1].split("</pre>")[0].trim();

           editor.setValue(data);
        }

        function solvateurltojsmol() {
           var arrows_post_url = 'https://arrows.emsl.pnnl.gov/api/upload/';
           var arrows_get_url  = 'https://arrows.emsl.pnnl.gov/api/molecular_calculation/';
           document.getElementById('runmebanner4b').innerHTML= "Solvation calculation started.";

           var xyz = jmvar("data({1.1},\"xyz\")").trim();
           xyz = " xyzdata{" + xyz.trim().replace(/\n/g,' | ') + "} theory{aimd-mm}";
           xyz += " ^{"+ charge_arrowsdata()+"}";
           xyz += " mult{"+ mult_arrowsdata()+"}";
           if (document.getElementById("showcell").value=="Remove unit cell") {;
              xyz += " unitcell{lattice_vectors | ";
              xyz += document.getElementById("lattice_a1").value + " | ";
              xyz += document.getElementById("lattice_a2").value + " | ";
              xyz += document.getElementById("lattice_a3").value + "}";
           } else {
              var molarity = prompt("Please enter molarity:", "1.0");
              xyz += " molarity{"+ molarity+"}";
           }

           //var url = "https://arrows.emsl.pnnl.gov/api/input_deck/\"" + xyz + "\"" ;
           textToSave = xyz;

           ii = Math.floor(Math.random() * 1000) + 1;
           filenameguess = "nwchem-" + ii +".nw";
           var fileNameToSaveAs =  filenameguess

           var textToSaveAsBlob = new Blob([textToSave], {type:"text/plain"});
           var textToSaveAsURL  = window.URL.createObjectURL(textToSaveAsBlob);

           var formD = new FormData();
           formD.append('file', textToSaveAsBlob,fileNameToSaveAs);
           formD.append('title', fileNameToSaveAs);

           var xhr = new XMLHttpRequest();
           xhr.open("POST", arrows_post_url, true);
           xhr.send(formD);


          //    var request = new XMLHttpRequest();
          //    request.open('GET', saveurl1, true);
          //    request.onreadystatechange = function() {
          //       if (this.readyState == 4 && this.status == 200) {
          //        document.getElementById("HTMLOutput").innerHTML = this.responseText;
          //       }
          //    };
          //    request.send(); 

           var ajax = new XMLHttpRequest();
           ajax.open('GET', arrows_get_url+fileNameToSaveAs, true);
           ajax.onload = function (e) {
             if (ajax.readyState === 4) {
               if (ajax.status === 200) {
                 var textFromUrl = ajax.responseText;
                 console.log(textFromUrl);
                 document.getElementById('runmebanner4b').innerHTML= "Solvation Finished!";
                 finish_solvateurltojsmol(textFromUrl);
               } else {
                 console.error(ajax.statusText);
                 document.getElementById('runmebanner4b').innerHTML= ajax.statusText;
               }
             }
           };
           ajax.onerror = function (e) {
             console.error(ajax.statusText);
             document.getElementById('runmebanner4b').innerHTML= ajax.statusText;
           };
           ajax.send();
        }



        function loadurltojsmol(append) {
           if (append) {
              document.getElementById('runmebanner4b').innerHTML= "Appending esmiles.";
           } else {
              document.getElementById('runmebanner4b').innerHTML= "Loading esmiles.";
           }
           var append2 = append;
           var urllist = document.getElementById("urlToLoad2").value.split(" + ");
           console.log(urllist);
           for (var i=0; i<urllist.length; ++i) {
              var x;
              var url = urllist[i];
              var url2 = "";
              var res = url.split(" ");
              if (/^\+?(0|[1-9]\d*)$/.test(res[0])){
                x = parseInt(res[0]);
                url = res.slice(1).join(" ");
              }
             else {
                x = 1;
              }
              if (url.indexOf("http") == -1) {
                 url2 = "https://arrows.emsl.pnnl.gov/api/esmiles2xyz/\"" + url + "\"" ;
                 url  = "https://arrows.emsl.pnnl.gov/api/xyz/\"" + url + "\"" ;
              }
              console.log(url);
              if (url.trim().length>9) {
                 var ajax = new XMLHttpRequest();
                 ajax.open("GET", url, false); // third parameter is async flag
                 ajax.send();
                 var textFromUrl = ajax.responseText;
                 if ((textFromUrl.indexOf("xyz failed")!=-1) && (url2!="")) {
                    console.log(url2);
                    var ajax2 = new XMLHttpRequest();
                    ajax2.open("GET", url2, false); // third parameter is async flag
                    ajax2.send();
                    var textFromUrl2= ajax2.responseText;
                    var obj = JSON.parse(textFromUrl2);
                    textFromUrl = obj.xyz_blob;
                 }
                 for (var j=0; j<x; ++j){
                    if (append2) {
                       var xyzdat = "\"append\"|" + textFromUrl.trim().replace(/\n/g,' | ') + "|end \"append\";";
                       jms("set appendNew false; data "+xyzdat + "select all; select within(molecule,(*)[0]); minimize select selected; select {*}[0];");
                    }
                    else {
                       var xyzdat = "\"model arrows\"|" +textFromUrl.trim().replace(/\n/g,' | ') + "|end \"model arrows\";";
                       jms("load data "+xyzdat  + "select all; select within(molecule,(*)[0]); minimize select selected; select {*}[0];");
                       append2 = true;
                    }
                 }
              }
           }
        }


        function saveeditortourl() {
           var arrows_post_url = 'https://arrows.emsl.pnnl.gov/api/upload/';
           var url = document.getElementById("urlToLoad").value;
           var saveurl = url.replace("raw=","raw_deposit=");

           var textToSave = editor.getValue();
           var fileNameToSaveAs =  url.split("/").pop();

           if (confirm("Do you want to save " + fileNameToSaveAs + " ?")) {
              var textToSaveAsBlob = new Blob([textToSave], {type:"text/plain"});
              var textToSaveAsURL  = window.URL.createObjectURL(textToSaveAsBlob);

              var formD = new FormData();
              formD.append('file', textToSaveAsBlob,fileNameToSaveAs);
              formD.append('title', fileNameToSaveAs);

              var xhr = new XMLHttpRequest();
              xhr.open("POST", arrows_post_url, true);
              xhr.send(formD);

              var request = new XMLHttpRequest();
              request.open('GET', saveurl, true);
              request.send();
           }
        }

        function submiturl() {
           var url = document.getElementById("urlToLoad").value;
           var saveurl1 = url.replace("raw=","submit_nwchem3=");
           var filename = url.split("/").pop();

           if (confirm("Do you want to submit job " + filename + " ?")) {
              document.getElementById("HTMLOutput").innerHTML = "submitted job: " + saveurl1 + "\n";
              var request = new XMLHttpRequest();
              request.open('GET', saveurl1, true);
              request.onreadystatechange = function() {
                 if (this.readyState == 4 && this.status == 200) {
                  document.getElementById("HTMLOutput").innerHTML = this.responseText;
                 }
              };
              request.send();
           }
        }



        function deleteMoleculePick() {
           var anum = arguments[1].split("#")[1].split(" ")[0];
           //var anum = arguments[1].split("#")[0].trim();
           //var anum0 = arguments[1].split("#")[1].split(" ")[0];
           //var anum1 = parseInt(anum0) - 1;
           //var anum  = anum1.toString();
           var scpt = "select within(molecule,{*}[" + anum + "]); delete selected; unbind; set picking identify; set PickCallback \"\";";
           jms(scpt);
        }
        function jmdeletemolecule() {
           jms0("unbind; unbind \"DOUBLE\"; set picking off;set picking on; set atomPicking true;  set PickCallback \"deleteMoleculePick\";");
        }

        function minimizeMoleculePick() {
           var anum = arguments[1].split("#")[1].split(" ")[0];
           //var anum = arguments[1].split("#")[0].trim();
           //var anum0 = arguments[1].split("#")[1].split(" ")[0];
           //var anum1 = parseInt(anum0) - 1;
           //var anum  = anum1.toString();
           var scpt = "x = within(molecule,{*}[" + anum + "]); minimize select x only; unbind; set picking identify; set PickCallback \"\";";
           jms(scpt);
        }
        function jmminimizemolecule() {
           jms0("unbind; unbind \"DOUBLE\"; set picking off;set picking on; set atomPicking true;  set PickCallback \"minimizeMoleculePick\";");
        }


        function hcleanMoleculePick() {
           var anum = arguments[1].split("#")[1].split(" ")[0];
           //var anum = arguments[1].split("#")[0].trim();
           //var anum0 = arguments[1].split("#")[1].split(" ")[0];
           //alert(anum0);
           //var anum1 = parseInt(anum0) - 1;
           //var anum  = anum1.toString();
           var scpt = "x = within(molecule,{*}[" + anum + "]); delete hydrogens and x; calculate hydrogens x; unbind; set picking identify; set PickCallback \"\";";
           jms(scpt);
        }
        function jmhcleanmolecule() {
           jms0("unbind; unbind \"DOUBLE\"; set picking off;set picking on; set atomPicking true;  set PickCallback \"hcleanMoleculePick\";");
        }



        function centerAtomPick() {
           //var anum = arguments[1].split("#")[1].split(" ")[0];
           var anum = arguments[1].split("#")[0].split(" ")[0];
           var scpt = 'set picking off; unbind; set picking on; set picking identify; set pickingStyle toggle; set PickCallback \"\"; ';
               scpt += "select "+ anum + "; center selected; "
           jms0(scpt);
        }
        function jmcenteratom() {
           jms0("unbind; unbind \"DOUBLE\"; set picking off;set picking on; set atomPicking true;  set PickCallback \"centerAtomPick\";");
        }

        function jmcenterorigin() {
           var scpt = 'unbind; unbind \"DOUBLE\"; set picking off; set picking on; set picking identify; set pickingStyle toggle; center {0,0,0}';
           jms0(scpt);
        }



        function jmpickatom(symbol0) {
           var scpt  = "set picking off; set picking on; set atomPicking true; set picking assignatom_";
           var symbol = symbol0;
           if (symbol0=='X1'){
              if (document.getElementById("atomX1").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX1").value = symbol;
              } else {
                 symbol = document.getElementById("atomX1").value;
              }
           } 
           if (symbol0=='X2'){
              if (document.getElementById("atomX2").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX2").value = symbol;
              } else {
                 symbol = document.getElementById("atomX2").value;
              }
           } 
           if (symbol0=='X3'){
              if (document.getElementById("atomX3").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX3").value = symbol;
              } else {
                 symbol = document.getElementById("atomX3").value;
              }
           } 
           if (symbol0=='X4'){
              if (document.getElementById("atomX4").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX4").value = symbol;
              } else {
                 symbol = document.getElementById("atomX4").value;
              }
           } 
           if (symbol0=='X5'){
              if (document.getElementById("atomX5").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX5").value = symbol;
              } else {
                 symbol = document.getElementById("atomX5").value;
              }
           } 
           if (symbol0=='X6'){
              if (document.getElementById("atomX6").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX6").value = symbol;
              } else {
                 symbol = document.getElementById("atomX6").value;
              }
           } 
           if (symbol0=='X7'){
              if (document.getElementById("atomX7").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX7").value = symbol;
              } else {
                 symbol = document.getElementById("atomX7").value;
              }
           } 
           if (symbol0=='Xx'){
              symbol = prompt("Please enter atom symbol:", "Fe");
           } 
           
           if (document.getElementById("insertatom").value == "++") { 
              jmaddsmiles(symbol);
              jminsertatom(false);
           } else {
              scpt += symbol;
              jms(scpt);
           }
        }
        //document.getElementById("atomX1").value = "??";
        //document.getElementById("atomX2").value = "??";
        //document.getElementById("atomX3").value = "??";
        //document.getElementById("atomX4").value = "??";
        //document.getElementById("atomX5").value = "??";
        //document.getElementById("atomX6").value = "??";
        //document.getElementById("atomX7").value = "??";

        function fetch_smilesprompt() {
           var smiles = prompt("Please enter smiles:", "CCO");
           if (smiles.includes("http")) {
              alert("Running OSRA for " + smiles);
              var url = "https://arrows.emsl.pnnl.gov/api/osra/'" + smiles + "'";
              var ajax = new XMLHttpRequest();
              ajax.onload = functionName;
              ajax.onerror = errorFunctionName;
              ajax.open("GET", url, false); // third parameter is async flag
              ajax.send();
              function functionName() {
                  console.log(this); // log the response
                  if (this.status == 200) { // request succeeded
                      // do something with this.responseText;
                      //alert(this.responseText);
                      if (this.responseText.includes("OSRA_RESULT:")) {
                         var allsmiles = this.responseText.split("OSRA_RESULT:")[1].split(":OSRA_RESULT")[0].trim().split("\n"); 
                         var i,j,tstr,smilesentry,smiles0;
                         tstr = 'SMILES generated by OSRA:\n';
                         for (i=0; i<allsmiles.length; ++i) {
                            j = i+1;
                            tstr += j.toString() + " " + allsmiles[i] + "\n";
                         }
                         smilesentry = prompt(tstr+"Please choose entry:", "1");
                         i = parseInt(smilesentry) - 1;
                         smiles0 = allsmiles[i];
                         smiles = prompt("Please enter smiles:", smiles0);
                      } else {
                         smiles = "CCO";
                      }
                  } else {
                      smiles = "CCO";
                  }
              }
              function errorFunctionName(e) {
                  console.log(this);
                  console.error(e);
                  // do something with this.status, this.statusText
              }
           }
           return smiles;
        }

        function jmaddsmiles(option0) {
           var smiles,scpt;

           smiles = "["+option0+"]" //default to atom smiles

           if (option0=='H2O'){ 
              smiles = "O"; 
           }
           if (option0=='CH4'){ 
              smiles = "C"; 
           }
           if (option0=='SHE'){ 
              smiles = "[Mt]"; 
           }
           if (option0=='X1'){
              if (document.getElementById("smilesX1").value=="smiles?") {
                 //smiles = prompt("Please enter smiles:", "CCO");
                 smiles = fetch_smilesprompt();
                 document.getElementById("smilesX1").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX1").value;
              }
           } 
           if (option0=='X2'){
              if (document.getElementById("smilesX2").value=="smiles?") {
                 //smiles = prompt("Please enter smiles:", "CCO");
                 smiles = fetch_smilesprompt();
                 document.getElementById("smilesX2").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX2").value;
              }
           } 
           if (option0=='X3'){
              if (document.getElementById("smilesX3").value=="smiles?") {
                 //smiles = prompt("Please enter smiles:", "CCO");
                 smiles = fetch_smilesprompt();
                 document.getElementById("smilesX3").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX3").value;
              }
           } 
           if (option0=='Xx'){
              smiles = fetch_smilesprompt();
           } 
           //var scpt = 'set appendNew false; load append smiles \"' + smiles + '\"; select all; select within(molecule,(*)[0]); minimize select selected; ';
           var scpt = 'set appendNew false; load append smiles \"' + smiles + '\"; select all; select within(molecule,(*)[0]); ';
           if (option0=='SHE'){ 
              var scpt = 'set appendNew false; '
              scpt += 'data \"append\"|1|testing|Mt 0.22 0.2 0.1|end \"append\"; ';
              scpt += 'select all; select within(molecule,(*)[0]); minimize select selected; ';
              scpt += 'select Meitnerium; color atoms TRANSLUCENT orange; label "e-"; color label cpk; ';
           } else {
              scpt += 'select {*}[0]; ' 
           }
           jms(scpt);
        }
        //document.getElementById("smilesX1").value = "smiles?";
        //document.getElementById("smilesX2").value = "smiles?";
        //document.getElementById("smilesX3").value = "smiles?";

        function jminsertatom(option0) {
           if (option0) {
              document.getElementById("insertatom").value = '++';
           } else {
              document.getElementById("insertatom").value = "^^";
           }
        }
        //document.getElementById("insertatom").value = "^^";

        function jmspin() {
           var scpt;
           var jjj = document.getElementById("jmolspin").value;
           if  (jjj == "Spin off") {
              scpt = "Spin off;";
              document.getElementById("jmolspin").value = "Spin on";
           } else {
              scpt = "Spin on;";
              document.getElementById("jmolspin").value = "Spin off";
           }
           jms0(scpt);
        }
        //document.getElementById("jmolspin").value = "Spin on";

        function jmlabel() {
           var scpt;
           var jjj = document.getElementById("jmollabel").value;
           if  (jjj == "Labels off") {
              scpt = "select all; label off";
              document.getElementById("jmollabel").value = "Labels on";
           } else {
              scpt = "select all; label %a; ";
              scpt += 'select Meitnerium; color atoms TRANSLUCENT orange; label "e-"; ';
              document.getElementById("jmollabel").value = "Labels off";
           }
           jms0(scpt);
        }
        //document.getElementById("jmollabel").value = "Labels on";

        function jmaxes() {
           var scpt;
           var jjj = document.getElementById("jmolaxes").value;
           if  (jjj == "Axes off") {
              scpt = "unitcell 0; axes 0"
              document.getElementById("jmolaxes").value = "Axes on";
           } else {
              scpt = "unitcell 1; axes 1"
              document.getElementById("jmolaxes").value = "Axes off";
           }
           jms0(scpt);
        }
        //document.getElementById("jmolaxes").value = "Axes on";


        function jmreactionplane() {
           var scpt;
           var jjj = document.getElementById("jmolreactionplane").value;
           if  (jjj == "Reaction off") {
              scpt = "draw \"reaction*\" delete;";
              document.getElementById("jmolreactionplane").value = "Reaction on";
              document.getElementById("jmolreactionplane2").value = "Reaction on";
              document.getElementById("jmolreactionplane3").value = "Reaction on";
              jsmenoreaction();
           } else {
              //scpt = "draw reactionarrow diameter 0.2  color red arrow {-2,0,0}, {2,0,0}; draw reactionplane \"reaction plane\" 2000 color translucent green plane {0,0,0} {0,1,0} {0,0,1};"
              scpt  = "draw reactionarrow diameter 0.2  color red arrow {-2,0,0}, {2,0,0}; ";
              //scpt += "set userColorScheme white blue yellow red green cyan orange magenta maroon lime grey;";
              //scpt += "set propertycolorscheme 'user';";
              scpt += "draw reactionplane \"reaction plane\" 1500 color translucent red plane {0,0,0} {0,1,0} {0,0,1};"
              document.getElementById("jmolreactionplane").value = "Reaction off";
              document.getElementById("jmolreactionplane2").value = "Reaction off";
              document.getElementById("jmolreactionplane3").value = "Reaction off";
              jsmereaction();
           }
           jms0(scpt);
        }
        //document.getElementById("jmolreactionplane").value = "Reaction on";
        //document.getElementById("jmolreactionplane2").value = "Reaction on";
        //document.getElementById("jmolreactionplane3").value = "Reaction on";


        function jmbackground() {
           var scpt;
           var jjj = document.getElementById("jmbackcolor").value;
           if (jjj=="Bckgrnd black") {
              scpt="background black;";
              document.getElementById("jmbackcolor").value = "Bckgrnd default";
           } else {
              //scpt="background [xc6ed80];";
              scpt="background [x4286f4];";
              document.getElementById("jmbackcolor").value = "Bckgrnd black";
           }
           jms0(scpt);
        }
        //document.getElementById("jmbackcolor").value = "Bckgrnd black";

        function jmlabelcolor() {
           var scpt;
           var jjj = document.getElementById("jmlblcolor").value;
           if (jjj=="Label black") {
              scpt="select all; color label black;";
              document.getElementById("jmlblcolor").value = "Label CPK";
           } else {
              scpt="select all; color label cpk;";
              document.getElementById("jmlblcolor").value = "Label black";
           }
           jms0(scpt);
        }
        //document.getElementById("jmlblcolor").value = "Label black";


        function jmmodelkit() {
           var scpt;
           var jjj = document.getElementById("jmolmodelkit").value;
           if  (jjj == "ModelKit off") {
              scpt = "set modelkitMode = false;"
              document.getElementById("jmolmodelkit").value = "ModelKit on";
           } else {
              scpt = "set modelkitMode = true;"
              document.getElementById("jmolmodelkit").value = "ModelKit off";
           }
           jms0(scpt);
        }
        //document.getElementById("jmolmodelkit").value = "ModelKit off";

        function jmmovemolecule() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON; set atomPicking true; set allowRotateSelected TRUE; set picking dragmolecule;bind "double" "javascript moveMol(2)";');
        }
        function jmmoveatom() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON; set picking DRAGATOM; bind "double" "javascript moveMol(1)";');
        }
        function jmrotatebond() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set Picking OFF;set Picking ON;set Picking ROTATEBOND;unbind "LEFT-DRAG";bind "LEFT-DRAG" "_rotateBranch";hover off;unbind "WHEEL";bind "WHEEL" "select *;color cpk"');
        }
        function jmrotatemolecule() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON;set atomPicking true;set picking dragmolecule;set allowRotateSelected TRUE;bind "drag" "_rotateselected";bind "double" "javascript moveMol(3)";');
        }

        function charge_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var charge = eval(jmvar("{*}.formalCharge.sum"));
           if (arrows_input.includes("^{")) {
              charge = eval(arrows_input.split("^{")[1].split("}")[0].trim());
           }
           return charge;
        }
        function mult_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var charge = eval(jmvar("{*}.formalCharge.sum"));
           if (arrows_input.includes("^{")) {
              charge = eval(arrows_input.split("^{")[1].split("}")[0].trim());
           }
           var mult = (eval(jmvar("{*}.elemno.sum")) + charge) % 2 + 1;
           if (arrows_input.includes("mult{")) {
              mult = eval(arrows_input.split("mult{")[1].split("}")[0].trim());
           }
           return mult;
        }
        function theory_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var theory = "pspw";
           if (arrows_input.includes("theory{")) {
              theory = arrows_input.split("theory{")[1].split("}")[0].trim();
           }
           return theory;
        }
        function theory_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var theory = "pspw";
           if (arrows_input.includes("theory_property{")) {
              theory = arrows_input.split("theory_property{")[1].split("}")[0].trim();
           }
           return theory;
        }
        function basis_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basis{")) {
              basis = arrows_input.split("basis{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basis_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basis_property{")) {
              basis = arrows_input.split("basis_property{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basisHZ_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basisHZ{")) {
              basis = arrows_input.split("basisHZ{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basisHZ_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basisHZ_property{")) {
              basis = arrows_input.split("basisHZ_property{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function xc_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var xc = "pbe";
           if (arrows_input.includes("theory{pspw")) {
              xc = "pbe";
           }
           if (arrows_input.includes("xc{")) {
              xc = arrows_input.split("xc{")[1].split("}")[0].trim();
           }
           return xc;
        }
        function xc_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var xc = "pspw";
           if (arrows_input.includes("xc_property{")) {
              xc = arrows_input.split("xc_property{")[1].split("}")[0].trim();
           }
           return xc;
        }
        function solvation_type_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var solvation_type = "None";
           if (arrows_input.includes("theory{pspw")) {
              solvation_type = "None";
           }
           if (arrows_input.includes("solvation_type{")) {
              solvation_type = arrows_input.split("solvation_type{")[1].split("}")[0].trim();
           }
           return solvation_type;
        }
        function calculation_type_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var calculation_type = "e";
           if (arrows_input.includes("theory{pspw")) {
              calculation_type = "e";
           }
           if (arrows_input.includes("calculation_type{")) {
              calculation_type = arrows_input.split("calculation_type{")[1].split("}")[0].trim();
           }
           return calculation_type;
        }



	function readMolecule() {
		var mol = exMod();
                jsmeApplet.reset();
                jsmeApplet.readMolFile(mol);
	}

	function appendMolecule() {
		var mol = exMod();
                jsmeApplet.readMolFile(mol);
	}

	function readMultipart() {
		var jme = "9 9 C 6.68 -7.15 C 5.47 -6.45 C 4.26 -7.15 C 4.26 -8.55 C 5.47 -9.25 C 6.68 -8.55 C 5.47 -5.05 O- 6.68 -4.35 O 4.26 -4.35 1 2 1 2 3 2 3 4 1 4 5 2 5 6 1 6 1 2 2 7 1 7 8 1 7 9 2|1 0 Na+ 12.21 -6.61";
		jsmeApplet.readMolecule(jme) // or document.JME.readMolecule(jme
	}

	function readReaction() {
		var jme = "3 2 C:1 1.41 -7.12 O:2 1.41 -5.72 Cl 2.63 -7.82 1 2 2 1 3 1|3 2 N:3 5.72 -6.78 C:4 7.12 -6.78 H:5 5.02 -7.99 1 2 1 1 3 1 >> 5 4 C:1 13.51 -6.40 O:2 13.51 -5.00 N:3 14.72 -7.10 C:4 15.94 -6.40 H:5 14.71 -8.50 1 2 2 1 3 1 3 4 1 3 5 1";
		jsmeApplet.readMolecule(jme);
	}

	function getMolfile() {
		var data = document.JME.molFile();
		document.getElementById("jme_output").value = data;

	}
	function getSmiles() {
                var drawing = document.JME.smiles();
                document.form.smi.value = drawing;
	}
	function appendSmiles() {
                var drawing = document.JME.smiles();
                var re = /\./g;
                drawing = drawing.replace(re, " + ");
                drawing = drawing.replace(">>"," --> ");
                document.form2.smi.value += drawing;
	}

	function appendSmiles2() {
                //jms("xxsmiles = {1.1}.find(\"SMILES\");");
                //var drawing = jmvar("xxsmiles");
                var drawing = jmvar("{1.1}.find(\"SMILES\")");
                //var re = /\./g;
                //drawing = drawing.replace(re, " + ");
                drawing = drawing.replace(">>"," --> ");
                document.form.smi.value += drawing;
	}

	function appendXYZ2() {
           var hasreaction = document.getElementById("jmolreactionplane").value == "Reaction off";
           if (hasreaction) {
              var i,ii,jj,kk,tmp,xyz,q,reactants,products;
              var mol = exMod();
              var header = mol.split("V2000")[0];
              var geombonds = mol.split("V2000")[1].trim();
              var nion  = eval(header.split("\n").pop().trim().split(" ")[0]);
              var nbond = eval(header.split("\n").pop().trim().split(/[ ,]+/)[1]);
              var geom0 = geombonds.trim().split("\n").slice(0,nion);
              var bond0 = geombonds.trim().split("\n").slice(nion,nion+nbond);
              var graph0 = Array.apply(null, Array(nion*nion)).map(Number.prototype.valueOf,0);
              var charge0 =  jmvar("{*}.formalCharge.all");
              for (i=0; i<bond0.length; ++i) {
                 tmp = bond0[i].trim().split(/[ ,]+/);
                 ii = eval(tmp[0])-1;
                 jj = eval(tmp[1])-1;
                 kk = eval(tmp[2]);
                 graph0[ii+jj*nion] = kk;
                 graph0[jj+ii*nion] = kk;
              }
              var molecules0 = Array.apply(null, Array(nion)).map(Number.prototype.valueOf,0);
              var mc = 0;
              var foundlink;
              for (ii=0; ii<nion; ++ii) {
                 foundlink = 0;
                 for (jj=0; jj<ii; ++jj) {
                    if ((graph0[ii+jj*nion]>0) && (molecules0[jj]>0)) {
                       foundlink = molecules0[jj];
                    }
                 }
                 if (foundlink==0) {
                    mc += 1;
                    foundlink = mc;
                 }
                 molecules0[ii] = foundlink;
              }
              var signx0;
              reactants = [];
              products  = [];
              for (i=0; i<mc; ++i) {
                 xyz = '';
                 q = 0;
                 signx0 = -1;
                 for (ii=0; ii<nion; ++ii) {
                    if (molecules0[ii]==(i+1)) {
                       if (eval(geom0[ii].trim().split(/[ ,]+/)[0])>0.0) {
                          signx0 = 1;
                       }
                       xyz += geom0[ii].trim().split(/[ ,]+/)[3] + " ";
                       xyz += geom0[ii].trim().split(/[ ,]+/)[0] + " ";
                       xyz += geom0[ii].trim().split(/[ ,]+/)[1] + " ";
                       xyz += geom0[ii].trim().split(/[ ,]+/)[2] + "\n";
                       q += charge0[ii];
                    }
                 }
                 if (xyz.includes("Mt")) {
                    xyz = " SHE ";
                 } else {
                    xyz = " xyzdata{" + xyz.trim().replace(/\n/g,' | ') + "}";
                    if (q!=0.0) {
                       xyz += " ^{" + q.toString() + "} "
                    }
                 }
                 if (signx0<0) {
                    reactants.push(xyz);
                 } else {
                    products.push(xyz);
                 }
              }
              if (document.form.smi.value.includes("~")) {
                 tmp = document.form.smi.value.split("~")[1].trim();
              } else {
                 tmp = '';
              }
              document.form.smi.value = reactants.join(" + ")  + " --> " + products.join(" + ");
              if (tmp!='') {
                 document.form.smi.value += " ~ " + tmp;
              }
           } else {
                var charge  = charge_arrowsdata();
                var xyzdat  = jmvar("data({1.1},\"xyz\")");
                if (xyzdat.includes('Mt')) {
                   var ss = xyzdat.split('\n');
                   xyzdat = ''
                   for (var i=0; i<ss.length; ++i) {
                      if (!ss[i].includes('Mt')) {
                         xyzdat += ss[i] + '\n';
                      }
                   }
                }
                var drawing = " xyzdata{" + xyzdat.trim().replace(/\n/g,' | ') + "}";
                if (charge!=0.0) {
                   drawing += " ^{" + charge.toString() + "}"
                }
                document.form.smi.value += drawing;
	   }

           // Add unit cell info
           document.form.smi.value += " unitcell{lattice_vectors | ";
           document.form.smi.value += document.getElementById("lattice_a1").value + " | ";
           document.form.smi.value += document.getElementById("lattice_a2").value + " | ";
           document.form.smi.value += document.getElementById("lattice_a3").value + "}";

	}

	function convert2XYZ() {
           var i,n,x,y,m,latblock;
           var data = editor.getValue(); // or session.getValue
           var lines = data.split("\n");
           if (data.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
              editor.setValue(data);
           } 

           if (data.includes("geometry")) {
              n = lines.length;
              m = 0;
              x = false;
              y = false;
              data = "";
              latblock = "";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                 } else if (lines[i].includes("system crystal")) {
                    y = true;
                 } else if (lines[i].includes("end") && (y)) {
                    y = false;
                 } else if (y) {
                    latblock += lines[i] + "\n";
                 } else if (lines[i].includes("end") && (x)) {
                    x = false;
                 } else if (x) {
                    if (lines[i].trim().length>0) {
                       data += lines[i] + "\n";
                       m += 1;
                    }
                 }
              }
              if (latblock.includes("lattice_vectors")) {
                 latblock = latblock.split("lattice_vectors")[1].trim().split("\n").join("").trim();
              } else {
                 latblock = ""
              }
              data = m.toString() + "\n" + latblock + "\n" + data;
              editor.setValue(data);
           }
        } 


        function symbols_ncharge(symbols,q) {
           var periodic_table_charge = { 'H'  : 1, 'He' : 2, 'Li' : 3, 'Be' : 4, 'B'  : 5, 'C'  : 6, 'N'  : 7, 'O'  : 8, 'F'  : 9, 'Ne' : 10, 'Na' : 11, 'Mg' : 12, 'Al' : 13, 'Si' : 14, 'P'  : 15, 'S'  : 16, 'Cl' : 17, 'Ar' : 18, 'K'  : 19, 'Ca' : 20, 'Sc' : 21, 'Ti' : 22, 'V'  : 23, 'Cr' : 24, 'Mn' : 25, 'Fe' : 26, 'Co' : 27, 'Ni' : 28, 'Cu' : 29, 'Zn' : 30, 'Ga' : 31, 'Ge' : 32, 'As' : 33, 'Se' : 34, 'Br' : 35, 'Kr' : 36, 'Rb' : 37, 'Sr' : 38, 'Y'  : 39, 'Zr' : 40, 'Nb' : 41, 'Mo' : 42, 'Tc' : 43, 'Ru' : 44, 'Rh' : 45, 'Pd' : 46, 'Ag' : 47, 'Cd' : 48, 'In' : 49, 'Sn' : 50, 'Sb' : 51, 'Te' : 52, 'I'  : 53, 'Xe' : 54, 'Cs' : 55, 'Ba' : 56, 'La' : 57, 'Ce' : 58, 'Pr' : 59, 'Nd' : 60, 'Pm' : 61, 'Sm' : 62, 'Eu' : 63, 'Gd' : 64, 'Tb' : 65, 'Dy' : 66, 'Ho' : 67, 'Er' : 68, 'Tm' : 69, 'Yb' : 70, 'Lu' : 71, 'Hf' : 72, 'Ta' : 73, 'W'  : 74, 'Re' : 75, 'Os' : 76, 'Ir' : 77, 'Pt' : 78, 'Au' : 79, 'Hg' : 80, 'Tl' : 81, 'Pb' : 82, 'Bi' : 83, 'Po' : 84, 'At' : 85, 'Rn' : 86, 'Fr' : 87, 'Ra' : 88, 'Ac' : 89, 'Th' : 90, 'Pa' : 91, 'U'  : 92, 'Np' : 93, 'Pu' : 94, 'Am' : 95, 'Cm' : 96, 'Bk' : 97, 'Cf' : 98, 'Es' : 99, 'Fm' : 100, 'Md' : 101, 'No' : 102, 'Lr' : 103, 'Rf' : 104, 'Ha' : 105, 'Sg' : 106, 'Bh' : 107, 'Hs' : 108, 'Mt' : 109 };
           var i;
           var ncharge = -q;
           for (i=0; i<symbols.length; i++) {
               ncharge += periodic_table_charge[symbols[i]];
           }
           return ncharge;
        }

        function makegaussianbasis(basis,basisHZ,katom) {
           var i,aa;
           var periodic_table_charge = { 'H'  : 1, 'He' : 2, 'Li' : 3, 'Be' : 4, 'B'  : 5, 'C'  : 6, 'N'  : 7, 'O'  : 8, 'F'  : 9, 'Ne' : 10, 'Na' : 11, 'Mg' : 12, 'Al' : 13, 'Si' : 14, 'P'  : 15, 'S'  : 16, 'Cl' : 17, 'Ar' : 18, 'K'  : 19, 'Ca' : 20, 'Sc' : 21, 'Ti' : 22, 'V'  : 23, 'Cr' : 24, 'Mn' : 25, 'Fe' : 26, 'Co' : 27, 'Ni' : 28, 'Cu' : 29, 'Zn' : 30, 'Ga' : 31, 'Ge' : 32, 'As' : 33, 'Se' : 34, 'Br' : 35, 'Kr' : 36, 'Rb' : 37, 'Sr' : 38, 'Y'  : 39, 'Zr' : 40, 'Nb' : 41, 'Mo' : 42, 'Tc' : 43, 'Ru' : 44, 'Rh' : 45, 'Pd' : 46, 'Ag' : 47, 'Cd' : 48, 'In' : 49, 'Sn' : 50, 'Sb' : 51, 'Te' : 52, 'I'  : 53, 'Xe' : 54, 'Cs' : 55, 'Ba' : 56, 'La' : 57, 'Ce' : 58, 'Pr' : 59, 'Nd' : 60, 'Pm' : 61, 'Sm' : 62, 'Eu' : 63, 'Gd' : 64, 'Tb' : 65, 'Dy' : 66, 'Ho' : 67, 'Er' : 68, 'Tm' : 69, 'Yb' : 70, 'Lu' : 71, 'Hf' : 72, 'Ta' : 73, 'W'  : 74, 'Re' : 75, 'Os' : 76, 'Ir' : 77, 'Pt' : 78, 'Au' : 79, 'Hg' : 80, 'Tl' : 81, 'Pb' : 82, 'Bi' : 83, 'Po' : 84, 'At' : 85, 'Rn' : 86, 'Fr' : 87, 'Ra' : 88, 'Ac' : 89, 'Th' : 90, 'Pa' : 91, 'U'  : 92, 'Np' : 93, 'Pu' : 94, 'Am' : 95, 'Cm' : 96, 'Bk' : 97, 'Cf' : 98, 'Es' : 99, 'Fm' : 100, 'Md' : 101, 'No' : 102, 'Lr' : 103, 'Rf' : 104, 'Ha' : 105, 'Sg' : 106, 'Bh' : 107, 'Hs' : 108, 'Mt' : 109 };
           var foundHZ = false;
           var str = "basis \"ao basis\" cartesian print\n";

           for (i=0; i<katom.length; i++) {
              aa = katom[i];
              if (periodic_table_charge[aa]<21) {
                 if (basis=='default') { 
                    str += " " + aa + " library \"6-311++G(2d,2p)\"" + "\n";
                 } else {
                    str += " " + aa + " library " + basis + "\n";
                 }
              } else {
                 if (basisHZ=='default') {
                    if (periodic_table_charge[aa]<37) {
                       str += " " + aa + " library aug-cc-pVTZ" + "\n";
                    } else if (periodic_table_charge[aa]<87) {
                       str += " " + aa + " library Def2-TZVPD" + "\n";
                       foundHZ = true;
                    } else {
                       str += " " + aa + " library crenbl_ecp" + "\n";
                       foundHZ = true;
                    }
                 } else {
                    str += " " + aa + " library " + basisHZ + "\n";
                    if (periodic_table_charge[aa]>=37) {
                       foundHZ = true;
                    }
                 } 
              } 
           }
           str += "end\n";

           if (foundHZ) { 
              str += "ecp\n"
              for (i=0; i<katom.length; i++) {
                 aa = katom[i];
                 if (periodic_table_charge[aa]>=37) {
                    if (basisHZ=='default') { 
                       if (periodic_table_charge[aa]<87) {
                          str += " " + aa + " library Def2-TZVPD" + "\n";
                       } else {
                          str += " " + aa + " library crenbl_ecp" + "\n";
                       }
                    } else {
                       str += " " + aa + " library " + basisHZ + "\n";
                    }
                 }
              }
              str += "end\n";
           }
           str += "\n";
           return str;
        }

        // ****************************
        // *                          *
        // *     convert2geometry     *
        // *                          *
        // ****************************
	function convert2geometry(iscif) {
           var i,n,x,y,z,a1,a2,a3,b1,b2,b3,lat,fdata,cifdata,cifdata2,tt;
           var symbols = [];
           var xyz     = [];
           var data  = editor.getValue(); // or session.getValue
           var lines = data.split("\n");

           var today = new Date();
           var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
           var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
           var dateTime = date+' '+time;

           if (data.includes("_cell_length_a")) { //read cif data
              var [fracgeom,lattice,symmetry] = parse_cif(data);
              lat = lattice[6];
              a1 = lattice[0];
              a2 = lattice[1];
              a3 = lattice[2];

              data  = "geometry\n";
              fdata = "geometry noautoz nocenter noautosym\n";
              fdata += "system crystal cartesian\n";
              fdata += "   lattice_vectors\n";
              fdata += "     " + vec3_to_string3(a1) + "\n";
              fdata += "     " + vec3_to_string3(a2) + "\n";
              fdata += "     " + vec3_to_string3(a3) + "\n";
              fdata += "end\n\n";
              cifdata = "data_emsl_arrows\n\n";
              cifdata += "_audit_creation_date " + dateTime + "\n";
              cifdata += "_audit_creation_method generated by EMSL Arrows\n";
              cifdata += "\n\n";
              cifdata += "_cell_length_a     " + lat[0].toFixed(4) + "\n";
              cifdata += "_cell_length_b     " + lat[1].toFixed(4) + "\n";
              cifdata += "_cell_length_c     " + lat[2].toFixed(4) + "\n";
              cifdata += "_cell_angle_alpha " + lat[3].toFixed(4) + "\n";
              cifdata += "_cell_angle_beta  " + lat[4].toFixed(4) + "\n";
              cifdata += "_cell_angle_gamma " + lat[5].toFixed(4) + "\n\n";
              cifdata += "_symmetry_space_group_name_H-M     P1\n\n";

              cifdata += "loop_\n";
              cifdata += "_atom_site_type_symbol\n";
              cifdata += "_atom_site_fract_x\n";
              cifdata += "_atom_site_fract_y\n";
              cifdata += "_atom_site_fract_z\n";
              for (i=0; i<fracgeom.length; ++i) {
                 var symb = fracgeom[i][0];
                 var f1   = fracgeom[i][1];
                 var f2   = fracgeom[i][2];
                 var f3   = fracgeom[i][3];
                 x = f1*a1[0] + f2*a2[0] + f3*a3[0];
                 y = f1*a1[1] + f2*a2[1] + f3*a3[1];
                 z = f1*a1[2] + f2*a2[2] + f3*a3[2];
                 cifdata += symb + " " + f1.toFixed(6) + " " + f2.toFixed(6) + " " + f3.toFixed(6) + "\n";
                 fdata   += symb + " " + f1.toFixed(6) + " " + f2.toFixed(6) + " " + f3.toFixed(6) + "\n";
                 data    += symb + " " + x.toFixed(6) + " " + y.toFixed(6) + " " + z.toFixed(6) + "\n";
              }
              data  = data.trim() + "\n";
              fdata = fdata.trim() + "\n";
              data  += "end\n";
              fdata += "end\n";

           } else if (data.includes("geometry")) { //read nwchem data
              n = lines.length;
              x = false;
              y = false;
              z = 999;
              data  = "";
              fdata = "";
              cifdata2 = "";
              cifdata = "data_emsl_arrows\n\n";
              cifdata += "_audit_creation_date " + dateTime + "\n";
              cifdata += "_audit_creation_method generated by EMSL Arrows\n";
              cifdata += "\n\n";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                    data += lines[i] + "\n";
                    fdata += lines[i] + "\n";
                 } else if (lines[i].includes("lattice_vectors")) {
                    fdata += lines[i] + "\n";
                    z = 1;
                 } else if (z==1) {
                    fdata += lines[i] + "\n";
                    tt = lines[i];
                    z = 2;
                 } else if (z==2) {
                    fdata += lines[i] + "\n";
                    tt +=  " " + lines[i];
                    z = 3;
                 } else if (z==3) {
                    fdata += lines[i] + "\n";
                    tt +=  " " + lines[i];
                    [a1,a2,a3,b1,b2,b3,lat]  =  xyzrow2_to_lattice(tt.trim().split(/[ ,]+/));
                    cifdata += "_cell_length_a     " + lat[0].toFixed(4) + "\n";
                    cifdata += "_cell_length_b     " + lat[1].toFixed(4) + "\n";
                    cifdata += "_cell_length_c     " + lat[2].toFixed(4) + "\n";
                    cifdata += "_cell_angle_alpha " + lat[3].toFixed(4) + "\n";
                    cifdata += "_cell_angle_beta  " + lat[4].toFixed(4) + "\n";
                    cifdata += "_cell_angle_gamma " + lat[5].toFixed(4) + "\n\n";
                    cifdata += "_symmetry_space_group_name_H-M     P1\n\n";

                    cifdata += "loop_\n";
                    cifdata += "_atom_site_type_symbol\n";
                    cifdata += "_atom_site_fract_x\n";
                    cifdata += "_atom_site_fract_y\n";
                    cifdata += "_atom_site_fract_z\n";
                    z = 4;
                 } else if (lines[i].includes("system crystal")) {
                    fdata += lines[i] + "\n";
                    y = true;
                 } else if ((lines[i].includes("end")) && (y) ) {
                    y = false;
                    fdata += lines[i] + "\n";
                 } else if (y) {
                    fdata += lines[i] + "\n";
                 } else if ((lines[i].includes("end")) && (x) ) {
                    x = false;
                    data += lines[i] + "\n";
                    fdata += lines[i] + "\n";
                 } else if (x) {
                    fdata += lines[i] + "\n";
                    if (lines[i].trim().length>0) {
                       data += lines[i] + "\n";
                       cifdata2 += lines[i] + "\n";
                       symbols.push(lines[i].trim().split(/[ ,]+/)[0]);
                       xyz.push(lines[i].trim().split(/[ ,]+/)[1]);
                       xyz.push(lines[i].trim().split(/[ ,]+/)[2]);
                       xyz.push(lines[i].trim().split(/[ ,]+/)[3]);
                    }
                 }
              }
           } else { // read xyz data 
              [a1,a2,a3,b1,b2,b3,lat]  =  xyzrow2_to_lattice(lines[1].trim().split(/[ ,]+/));
              console.log("b1=",b1);
              console.log("b2=",b2);
              console.log("b3=",b3);
              n = eval(lines[0].trim().split(" ")[0]);
              cifdata2 = "";
              cifdata = "data_emsl_arrows\n\n";
              cifdata += "_audit_creation_date " + dateTime + "\n";
              cifdata += "_audit_creation_method generated by EMSL Arrows\n";
              cifdata += "\n\n";
              cifdata += "_cell_length_a     " + lat[0].toFixed(4) + "\n";
              cifdata += "_cell_length_b     " + lat[1].toFixed(4) + "\n";
              cifdata += "_cell_length_c     " + lat[2].toFixed(4) + "\n";
              cifdata += "_cell_angle_alpha " + lat[3].toFixed(4) + "\n";
              cifdata += "_cell_angle_beta  " + lat[4].toFixed(4) + "\n";
              cifdata += "_cell_angle_gamma " + lat[5].toFixed(4) + "\n\n";
              cifdata += "_symmetry_space_group_name_H-M     P1\n\n";

              cifdata += "loop_\n";
              cifdata += "_atom_site_type_symbol\n";
              cifdata += "_atom_site_fract_x\n";
              cifdata += "_atom_site_fract_y\n";
              cifdata += "_atom_site_fract_z\n";
     
              fdata = "geometry noautoz nocenter noautosym\n";
              fdata += "system crystal cartesian\n"
              fdata += "   lattice_vectors\n";
              fdata += "     " + a1[0].toFixed(6) + " " + a1[1].toFixed(6) + " " + a1[2].toFixed(6) + "\n";
              fdata += "     " + a2[0].toFixed(6) + " " + a2[1].toFixed(6) + " " + a2[2].toFixed(6) + "\n";
              fdata += "     " + a3[0].toFixed(6) + " " + a3[1].toFixed(6) + " " + a3[2].toFixed(6) + "\n";
              fdata += "end\n\n";
              data = "geometry\n";
              n += 2;
              for (i=2; i<n; i++) {
                 data += lines[i] + "\n";
                 fdata += lines[i] + "\n";
                 cifdata2 += lines[i] + "\n";
                 symbols.push(lines[i].trim().split(/[ ,]+/)[0]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[1]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[2]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[3]);
              }
              data  = data.trim() + "\n";
              fdata = fdata.trim() + "\n";
              data  += "end\n";
              fdata += "end\n";
           }

 
           
           // Add Header
           var katom    = jmvar("{*}.find(\"MF\")").replace(/[0-9]/g,'').trim().split(/[ ,]+/);
           var mformula = jmvar("{*}.find(\"MF\")").replace(/ /g,'');
           var theory  = theory_arrowsdata();
           var basis   = basis_arrowsdata();
           var basisHZ = basisHZ_arrowsdata();
           var xc      = xc_arrowsdata();
           var charge  = charge_arrowsdata();
           var mult    = mult_arrowsdata();
           var calculation_type = calculation_type_arrowsdata();
           var solvation_type   = solvation_type_arrowsdata();
           var jobname = theory + "_" + xc + "_" + mformula;

           x =  "#nwchem_input  " + mformula + ".nw\n";
           x += "#nwchem_output " + mformula + ".out00\n";
           x += "#nwchem_done   " + mformula + ".done\n";
           x += "#\n";
           x += "#mformula_off\n";
           x += "#\n";
           x += "#transfer_files *.xyz *.ion_motion *.emotion *.fei *.cif *.hist *.gr *.dat *.meta_gaussians *.cube\n";
           x += "#\n";
           x += "#curdir we31869.emsl.pnl.gov:/media/seagate2/Projects/Other/"+mformula+"\n";
           x += "#\n";
           x += "#permdir " + mformula + "\n";
           x += "#deletescratch no\n";
           x += "#queuesave no\n"
           x += "#\n";
           x += "#machine we31869\n";
           x += "#cputime 18:05:00\n";
           x += "#ncpus 4\n";
           x += "#queue regular\n";
           x += "#\n";

           x += "title \"swnc: " + calculation_type;
           x += " theory=" + theory;
           x += " xc=" + xc;
           x += " formula=" + mformula;
           x += " charge=" + charge.toString();
           x += " mult=" + mult.toString();
           x += " machinejob:expert" 
           x += "\" \n\n";
           x += "echo\n\n"
           x += "start " + jobname + "\n\n";
           x += "memory 1900 mb\n\n"
           x += "charge " + charge.toString() + "\n\n";
           if ((theory=="pspw") || (theory=="paw")) {
              data = x + fdata + "\n\n";
           } else {
              data = x + data + "\n\n";
           }

           // Add theory
           x = "";
           if ((theory=="pspw") || (theory=="pspw4") || (theory=="paw") || (theory=="paw4")) {
              x = "nwpw\n";
              if ((theory=="paw")||(theory=="paw4")) {
                 x += "pseudopotentials\n";
                 x += " *  library paw_default\n";
                 x += "end\n";
              }
              if (basis=="default") {
                 x += "  cutoff 50.0\n";
              }
              else {
                 x += "  cutoff " + basis + "\n";
              }
              x += "  mult " + mult.toString() + "\n";
              if (xc=="lda")    {x += "  xc vosko";}
              if (xc=="pbe")    {x += "  xc pbe96";}
              if (xc=="blyp")   {x += "  xc blyp";}
              if (xc=="b3lyp")  {x += "  xc b3lyp";}
              if (xc=="pbe0")   {x += "  xc pbe0";}
              if (xc=="m06-2x") {x += "  xc m06-2x";}
              x += "\n";
              x += "  lmbfgs\n";
              x += "end\n\n";

              if ((theory=="pspw4")||(theory=="paw4")) {
                 x += "nwpw\n";
                 x += "  simulation_cell\n";
                 x += "    fcc 38.0\n";
                 x += "    boundary_conditions aperiodic\n";
                 x += "  end\n";
                 x += "end\n"; 
              }

              data += x;
      
           } else if (theory=="dft") {

              x = makegaussianbasis(basis,basisHZ,katom);

              x += "dft\n";
              x += "  direct\n";
              x += "  noio\n"; 
              x += "  grid nodisk\n";
              x += "  mult " + mult.toString() + "\n";
              if (xc.includes("pbe0")) { 
                 x += "  xc pbe";
              } else if (xc.includes("pbe")) {
                 x += "  xc xpbe96 cpbe96";
              }
              if (xc.includes("blyp"))   {x += "  xc becke88 lyp";}
              if (xc.includes("b3lyp"))  {x += "  xc b3lyp";}
              if (xc.includes("m06-2x")) {x += "  xc m06-2x";}
              x += "\n";
              if (xc.includes("coarse")) {x += "  grid coarse";}
              if (xc.includes("fine"))   {x += "  grid fine";}
              if (xc.includes("xfine"))  {x += "  grid xfine";}
              x += "\n";
              x += "  iterations 5001\n";
              x += "end\n";

              data += x;

           } else if ((theory=="hf") || (theory=="uhf")) {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }

              data += x;

           } else if (theory=="mp2") {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) { 
                 x += "scf\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              x += "mp2\n"; 
              x += "   freeze atomic\n"; 
              x += "end\n";
              x += "set cphf:maxiter 1500\n";

              data += x;

           } else if (theory=="ccsd(t)") {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) {
                 x += "scf\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult>1) { 
                 x += "tce\n";
                 x += "   freeze atomic\n"; 
                 x += "   ccsd(t)\n"; 
                 x += "   io ga\n"; 
                 x += "   2eorb\n"; 
                 x += "   2emet 13\n"; 
                 x += "   tilesize 20\n"; 
                 x += "end\n";
              } else {
                 x += "ccsd\n"; 
                 x += "   freeze atomic\n";
                 x += "   maxiter 51\n";
                 x += "end\n";
              } 

              data += x;
           }

           // define cosmo radii
           var radii=[];
           var j,xx,yy,zz,r,dsigma;
           for (i=0; i<symbols.length; i++) {radii.push(0.0); }
           for (i=0; i<symbols.length; i++) {
              if (symbols[i]=='H') {radii[i] = 1.172; } 
              else if (symbols[i]=='N') {radii[i] = 2.126;}
              else if (symbols[i]=='O') {radii[i] = 1.576;}
              else if (symbols[i]=='F') {radii[i] = 1.28;}
              else if (symbols[i]=='P') {radii[i] = 2.279;}
              else if (symbols[i]=='S') {radii[i] = 2.023;}
              else if (symbols[i]=='Cl'){radii[i] = 1.75;}
              else if (symbols[i]=='Al'){radii[i] = 1.404;}
              else if (symbols[i]=='Si'){radii[i] = 2.457;}
              else if (symbols[i]=='Br'){radii[i] = 2.16;}
              else if (symbols[i]=='I') {radii[i] = 2.32;}
              else if (symbols[i]=='C') { 
                dsigma = true;
                for (j=0; j<symbols.length; j++) {
                   if ((symbols[j]=='C') && (j!=i)) {
                     xx=xyz[3*i]-xyz[3*j]; yy=xyz[3*i+1]-xyz[3*j+1]; zz=xyz[3*i+2]-xyz[3*j+2];
                     r = Math.sqrt(xx*xx + yy*yy + zz*zz);
                     if (r<=1.46) {dsigma = false;}
                   }
                }
                if (dsigma) {
                   radii[i] = 2.096;
                } else {
                   radii[i] = 1.635;
                }
              } else {
                radii[i] = 2.223;
              }
           }


           // Add tasks
           var svnt,nup,ndn;
           var ncharge = symbols_ncharge(symbols,charge);
           var tasks = calculation_type.split("");
           if ((theory=="pspw4") || (theory=="paw") || (theory=="paw4")) {theory="pspw";}
           x = "";
           for (i=0; i<tasks.length; i++) {
              if (tasks[i]=="e") {x += "task "+ theory + " energy ignore\n";}
              if (tasks[i]=="g") {x += "task "+ theory + " gradient\n";}
              if (tasks[i]=="o") {
                 x += "\ndriver; default; maxiter 50; clear; end\n";
                 x += "task "+ theory + " optimize ignore\n";
              }
              if (tasks[i]=="v") {x += "task "+ theory + " freq numerical\n";}
              if (tasks[i]=="w") {x += "task "+ theory + " freq\n";}
              if (tasks[i]=="c") { 
                 if (solvation_type.includes("COSMO-SMD")) { 
                    if (solvation_type.includes(":")) { 
                       svnt = solvation_type.split(":")[1];
                    } else {
                       svnt = "h2o";
                    }
                    x += "cosmo\n"
                    x += "   do_cosmo_smd .true.\n";
                    x += "   solvent " + svnt + "\n";
                    x += "\nend\n"
                    x += "task " + theory + " energy ignore\n";
                 } else if (solvation_type=='COSMO') { 
                    x += "unset dft:converged\n";
                    x += "unset scf:converged\n";
                    x += "cosmo\n";
                    x += "   do_gasphase .true.\n";
                    x += "   rsolv  0.0\n";
                    x += "   ifscrn 2\n";
                    x += "   minbem 3\n";
                    x += "   maxbem 3\n";
                    x += "   radius ";
                    for (j=0; j<radii.length; j++) {
                      x +=  radii[j].toString() + " ";
                    }
                    x += "\nend\n";
                    x += "task " + theory + " energy ignore\n";
                 }
              }
              if (tasks[i]=="b") { 
                 if ((theory=="pspw") && (mult==1)) {
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "nwpw\n";
                    x += "   virtual 8\n";
                    x += "   dplot\n";
                    x += "      orbital 1 homo-restricted.cube\n";
                    x += "      density total density.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw energy ignore\n";
                    x += "task pspw pspw_dplot\n\n";
                    x +=  "nwpw\n";
                    x += "   dplot\n";
                    x += "      vectors " + jobname + ".emovecs\n";
                    x += "      orbital 1 lumo-restricted.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw pspw_dplot\n\n";
                 }
                 if ((theory=="pspw") && (mult>1)) {
                    ndn = (ncharge-mult+1)/2;
                    nup = ndn + mult - 1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x +=  "nwpw\n";
                    x += "   virtual 8\n";
                    x += "   dplot\n";
                    x += "      orbital 1         homo-alpha.cube\n";
                    if (ndn>0) {
                       x += "      orbital 123456789 homo-beta.cube\n";
                    } else {
                       x += "      orbital 1 homo-beta.cube\n";
                    }
                    x += "      density total density.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw energy ignore\n";
                    x += "task pspw pspw_dplot\n\n";
                    x +=  "nwpw\n";
                    x += "   dplot\n";
                    x += "      vectors " + jobname + ".emovecs\n";
                    x += "      orbital 1 lumo-alpha.cube\n";
                    x += "      orbital 123456789 lumo-beta.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw pspw_dplot\n\n";
                 }
                 if (((theory=="dft")||(theory=="hf")) && (mult==1)) {
                    nup = ncharge/2;
                    ndn = nup+1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" 
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin total\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "  " +  nup.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output homo-restricted.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" 
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin total\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + ndn.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-restricted.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                 }
                 if (((theory=="dft")||(theory=="hf")) && (mult>1)) {
                    ndn = (ncharge-mult+1)/2;
                    nup = ndn + mult - 1;
                    var nup1 = nup + 1;
                    var ndn1 = ndn + 1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Alpha_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" ;
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin alpha\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + nup.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output homo-alpha.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Alpha_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" ;
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin alpha\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + nup1.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-alpha.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Beta_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n";
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin beta\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    if (ndn>0) {
                       x += "   " + ndn.toString() + "\n";
                    } else {
                       x += "   " + ndn1.toString() + "\n";
                    }
                    x += "   gaussian\n";
                    x += "   output homo-beta.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Beta_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n";
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin beta\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + ndn1.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-beta.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                 }

              }
           }
           data += x;

           if (iscif) {
              for (i=0; i<symbols.length; ++i) {
                 x = parseFloat(xyz[3*i]);
                 y = parseFloat(xyz[3*i+1]);
                 z = parseFloat(xyz[3*i+2]);
                 var f1 = x*b1[0] + y*b1[1] + z*b1[2];
                 var f2 = x*b2[0] + y*b2[1] + z*b2[2];
                 var f3 = x*b3[0] + y*b3[1] + z*b3[2];
                 cifdata += symbols[i] + " " + f1.toFixed(6) + " " + f2.toFixed(6) + " " + f3.toFixed(6) + "\n";
              }
              editor.setValue(cifdata);
           } else {
              editor.setValue(data);
           }

        }


	function clearSmiles() {
                document.form.smi.value = ""
	}

        function clearSmiles2() {
                document.form2.smi.value = ""
        }

        function emailSmiles() {
                var email=('arrows@emsl.pnnl.gov');
                var subject = (document.form.smi.value);
                var subjectEncoded = encodeURIComponent(subject);
                var body = ('I am the body of the feedback that you are sending.');
                var link = 'mailto:'+email+'?subject='+subjectEncoded;
                window.location.href = link;
                //document.write( '<a href="mailto:' + email +
                //                '?subject=' +subject+
                //                '">' + 'Click here to send email to arrows' + '<' + '/a>');
        }

	function getJMEstring() {
		var data = document.JME.jmeFile();
		document.getElementById("jme_output").value = data;
	}


        function entermult() {
           var rr;
           var mult0 = mult_arrowsdata();
           var mult = prompt("Please enter multiplicity:", mult0);
           if (document.form.smi.value.includes("mult{")) {
              rr = document.form.smi.value.split("mult{")[1].split("}")[0];
              rr = "mult{" + rr + "}";
              document.form.smi.value = document.form.smi.value.replace(rr,"");
           }
           document.form.smi.value += " mult{"+mult+"}";
        }
        function entercharge() {
           var rr;
           var charge0 = charge_arrowsdata();
           var charge = prompt("Please enter charge:", charge0);
           if (document.form.smi.value.includes("^{")) {
              rr = document.form.smi.value.split("^{")[1].split("}")[0];
              rr = "^{" + rr + "}";
              document.form.smi.value = document.form.smi.value.replace(rr,"");
           }
           document.form.smi.value += " ^{"+charge+"}";
        }


        function sleep(milliseconds) {
            var start = new Date().getTime();
            for (var i = 0; i < 1e7; i++) {
               if ((new Date().getTime() - start) > milliseconds){
                  break;
               }
            }
        }

        function Confirm(form){
            //alert("Record insert successfully!");
            //var mytext = "Your Arrows job for " + document.form.smi.value + " is running. Please be patient for it to finish.";
            var mytext = "Your Arrows job is running. Please be patient for it to finish.";
            document.getElementById('runmebanner').innerHTML=mytext;
            document.getElementById('runmebanner2').innerHTML=mytext;

            //var node = document.getElementById('runmebanner');
            //while (node.firstChild) node.removeChild( node.firstChild);
            //node.appendChild(document.createTextNode(mytext)); 
            sleep(250);
            form.submit();
        }


        function txspressed(button0,num) {
           if (num==1) {
              var mystr = document.form.smi.value;
           } else {
              var mystr = document.form2.smi.value;
           }
           
           var headstr   = "";
           var tailstr   = "";
           var theorystr = "";
           var xcstr     = "";
           var solvstr   = "";
           var basisstr  = "";
           var monkhorststr = "";

           if (mystr.includes("theory{") || mystr.includes("xc{") || mystr.includes("solvation_type{") || mystr.includes("basis{")) {
              ss = mystr.trim().split(" ");
              sslen = ss.length;
              for (var i=0; i<sslen; ++i) {
                 if (ss[i].includes("theory{") || ss[i].includes("xc{") || ss[i].includes("solvation_type{") || ss[i].includes("basis{")) {
                    tailstr += ss[i] + " "
                 } 
                 else {
                    headstr += ss[i] + " "
                 }
              }
              headstr = headstr.trim();
              tailstr = tailstr.trim();
           }
           else {
              headstr = mystr.trim();
           }

           if (tailstr.includes("theory{")) {
              theorystr = tailstr.split("theory{")[1].split("}")[0].trim();
           }

           if (tailstr.includes("xc{")) {
              xcstr = tailstr.split("xc{")[1].split("}")[0].trim();
           }

           if (tailstr.includes("solvation_type{")) {
              solvstr = tailstr.split("solvation_type{")[1].split("}")[0].trim();
           }

           if (tailstr.includes("basis{")) {
               basisstr = tailstr.split("basis{")[1].split("}")[0].trim();
           }

           if (button0=="band")    { 
               theorystr = "band"; 
               monkhorststr = prompt("Please Enter Monk-Horst pack gridding:", "1 1 1");
           }
           if (button0=="pspw")    { theorystr = "pspw"; }
           if (button0=="pspw4")   { theorystr = "pspw4"; }
           if (button0=="dft")     { theorystr = "dft"; }
           if (button0=="mp2")     { theorystr = "mp2"; }
           if (button0=="ccsd(t)") { theorystr = "ccsd(t)"; }
           if (button0=="pm3")     { theorystr = "pm3"; }

           if (button0=="6-31G*")          { basisstr = "6-31G*"; }
           if (button0=="6-311++G(2d,2p)") { basisstr = "6-311++G(2d,2p)"; }

           if (button0=="lda")    { xcstr = "lda"; }
           if (button0=="pbe")    { xcstr = "pbe"; }
           if (button0=="pbe0")   { xcstr = "pbe0"; }
           if (button0=="blyp")   { xcstr = "blyp"; }
           if (button0=="b3lyp")  { xcstr = "b3lyp"; }
           if (button0=="m06-2x") { xcstr = "m06-2x"; }

           if (button0=="COSMO")     { solvstr = "COSMO"; }
           if (button0=="COSMO-SMD") { solvstr = "COSMO-SMD"; }
           if (button0=="None")      { solvstr = "None"; }

           // remove conflicting options
           if ((theorystr=="mp2") || (theorystr=="ccsd(t)"))  { xcstr = ""; }
           if (((theorystr=="band")||(theorystr=="pspw") || (theorystr=="pspw4")) && (xcstr=="m06-2x")) { xcstr = ""; }
           if (((theorystr=="band")||(theorystr=="pspw") || (theorystr=="pspw4")) && (solvstr=="COSMO")) { solvstr = ""; }
           if (((theorystr=="band")||(theorystr=="pspw") || (theorystr=="pspw4")) && (solvstr=="COSMO-SMD")) { solvstr = ""; }
           if (((theorystr=="band")||(theorystr=="pspw") || (theorystr=="pspw4")) && (basisstr=="6-31G*")) { basisstr = ""; }
           if (((theorystr=="band")||(theorystr=="pspw") || (theorystr=="pspw4")) && (basisstr=="6-311++G(2d,2p)")) { basisstr = ""; }
           if (theorystr=="pm3") { 
              xcstr = ""; 
              basisstr = ""; 
              if (solvstr=="COSMO-SMD") { solvstr="";}
           }

           // set the button colors
           var color1="background-color:#f8f8ff; color:#298DB4;";
           var color2="background-color:#f8f8ff; color:#74A52B;";
           if (theorystr=="dft") {
               document.getElementById("lda").style     = color1;
               document.getElementById("pbe").style     = color1;
               document.getElementById("pbe0").style    = color1;
               document.getElementById("blyp").style    = color1;
               document.getElementById("b3lyp").style   = color1;
               document.getElementById("m06-2x").style  = color1;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color1;
               document.getElementById("None").style      = color1;
               document.getElementById("6-31G*").style          = color1;
               document.getElementById("6-311++G(2d,2p)").style = color1;
           } else if ((theorystr=="band")||(theorystr=="pspw")||(theorystr=="pspw4")) {
               document.getElementById("lda").style     = color1;
               document.getElementById("pbe").style     = color1;
               document.getElementById("pbe0").style    = color1;
               document.getElementById("blyp").style   = color1;
               document.getElementById("b3lyp").style   = color1;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color2;
               document.getElementById("COSMO-SMD").style = color2;
               document.getElementById("None").style      = color1;
               document.getElementById("6-31G*").style          = color2;
               document.getElementById("6-311++G(2d,2p)").style = color2;
           } else if ((theorystr=="mp2")||(theorystr=="ccsd(t)")) {
               document.getElementById("lda").style     = color2;
               document.getElementById("pbe").style     = color2;
               document.getElementById("pbe0").style    = color2;
               document.getElementById("blyp").style   = color2;
               document.getElementById("b3lyp").style   = color2;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color1;
               document.getElementById("None").style      = color1;
               document.getElementById("6-31G*").style          = color1;
               document.getElementById("6-311++G(2d,2p)").style = color1;
           } else if (theorystr=="pm3") {
               document.getElementById("lda").style     = color2;
               document.getElementById("pbe").style     = color2;
               document.getElementById("pbe0").style    = color2;
               document.getElementById("blyp").style   = color2;
               document.getElementById("b3lyp").style   = color2;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color2;
               //document.getElementById("None").style      = color2;
               document.getElementById("6-31G*").style          = color2;
               document.getElementById("6-311++G(2d,2p)").style = color2;
           }

           // set the esmiles string
           if (num==1) {
              document.form.smi.value  = headstr;
              //if ((theorystr!="") || (xcstr!="") || (solvstr!="")) {document.form.smi.value += " ~ "; }
              if ((headstr.includes("-->") || headstr.includes("==>"))  && (!headstr.includes("~"))) {document.form.smi.value += " ~ "; }
              if (theorystr!="") {document.form.smi.value += " theory{" + theorystr + "}"; }
              if (xcstr!="")     {document.form.smi.value += " xc{" + xcstr + "}"; }
              if (solvstr!="")   {document.form.smi.value += " solvation_type{" + solvstr + "}"; }
              if (basisstr!="")  {document.form.smi.value += " basis{" + basisstr + "}"; }
              if (monkhorststr!="")  {document.form.smi.value += " monkhorst_pack{" + monkhorststr + "}"; }
           } else {
              document.form2.smi.value  = headstr;
              //if ((theorystr!="") || (xcstr!="") || (solvstr!="")) {document.form2.smi.value += " ~ "; }
              if ((headstr.includes("-->") || headstr.includes("==>"))  && (!headstr.includes("~"))) {document.form2.smi.value += " ~ "; }
              if (theorystr!="") {document.form2.smi.value += " theory{" + theorystr + "}"; }
              if (xcstr!="")     {document.form2.smi.value += " xc{" + xcstr + "}"; }
              if (solvstr!="")   {document.form2.smi.value += " solvation_type{" + solvstr + "}"; }
              if (basisstr!="")  {document.form2.smi.value += " basis{" + basisstr + "}"; }
              if (monkhorststr!="")  {document.form2.smi.value += " monkhorst_pack{" + monkhorststr + "}"; }
           }

        }



</script>

</head>


<body onload="jmolOnLoad();">



	<!-- RECOMMENDED if your web app will not function without JavaScript enabled -->
    <noscript>
	<div style="width: 22em; position: absolute; left: 50%; margin-left: -11em; color: red; background-color: white; border: 1px solid red; padding: 4px; font-family: sans-serif">
   Your web browser must have JavaScript enabled in order for this
    application to display correctly.</div>
    </noscript>


<!-- Tab links -->
<div class="tab">
  <button class="tablinks" onclick="openCity(event, 'Arrows Periodic 3D Builder')" id="defaultOpen">Arrows Periodic 3D Builder</button>
  <button class="tablinks" onclick="openCity(event, 'NWChem Input Editor')">NWChem Input Editor</button>
  <button class="tablinks" onclick="openCity(event, 'Arrows Entry')">Arrows Entry</button>
  <button class="tablinks" onclick="openCity(event, 'Arrows Entry - 2D Builder')">Arrows Entry - 2D Builder (not periodic)</button>
</div>




<div id="Arrows Entry" class="tabcontent">

    <h2>Enter an <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#Introduction_to_ESMILES_-_How_to_Change_Calculation_Theories">esmiles</a>, <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#ESMILES_Reactions_-_How_to_Calculate_Reaction_Energies"> esmiles reaction</a>, or other Arrows input, then push the "Run Arrows" button.</h2>


    <form action="." name="form"  method="POST">
       <table>
          <tr>
             <!--td> <input type="text" name="smi" SIZE=120> </td-->
             <td> <textarea  name="smi" rows="10" cols="140"></textarea></td>
             <!--td> <input type="submit" name="JSME-arrows" value="Run Arrows" style="font-family: sans-serif; font-size: 20px;"></td-->
             <td> <input type="button" name="JSME-arrows" value="Run Arrows" style="font-family: sans-serif; font-size: 20px;" onClick="Confirm(this.form)"></td>
          </tr>
          <tr>
             <td>
                  <INPUT TYPE="button" VALUE="Append xyzdata{} from JSMol Editor" onClick="appendXYZ2()"> &nbsp;
                  <INPUT TYPE="button" VALUE="Append SMILES from JSMol Editor" onClick="appendSmiles2()"> &nbsp;
                  <input type="button" class="button" name="jmolreactionplane3" id="jmolreactionplane3" 
                          value="Reaction on" onClick="jmreactionplane()"/>
                  <INPUT TYPE="button" VALUE="no html5" 
                          onClick="document.form.smi.value+=' nohtml5'" >
                  <INPUT TYPE="button" VALUE="Clear" onClick="clearSmiles()"> </td>
             <td> <INPUT TYPE="button" VALUE="Email Submit" onClick="emailSmiles()"> </td>
          </tr>
       </table>
    </form>
    <section class="blink" style="color: red"> <b id="runmebanner"> </b> </section>
    <br>
    <FORM METHOD="POST" ONSUBMIT="return false;">
       <INPUT TYPE="button" VALUE="theory{band}" id="dft"
              onClick="txspressed('band',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw}" id="pspw"
              onClick="txspressed('pspw',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw4}" id="pspw4"
              onClick="txspressed('pspw4',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{dft}" id="dft"
              onClick="txspressed('dft',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{mp2}" id="mp2"
              onClick="txspressed('mp2',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{ccsd(t)}" id="ccsd(t)"
              onClick="txspressed('ccsd(t)',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pm3}" id="pm3"
              onClick="txspressed('pm3',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="basis{6-31G*}" id="6-31G*"
              onClick="txspressed('6-31G*',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="basis{6-311++G(2d,2p)}" id="6-311++G(2d,2p)"
              onClick="txspressed('6-311++G(2d,2p)',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <br>
       <INPUT TYPE="button" VALUE="xc{lda}" id="lda"
              onClick="txspressed('lda',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe}" id="pbe"
              onClick="txspressed('pbe',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe0}" id="pbe0"
              onClick="txspressed('pbe0',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{blyp}" id="blyp"
              onClick="txspressed('blyp',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{b3lyp}" id="b3lyp"
              onClick="txspressed('b3lyp',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{m06-2x}" id="m06-2x"
              onClick="txspressed('m06-2x',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO}"  id="COSMO"
              onClick="txspressed('COSMO',1)"
              onClick="document.form.smi.value+=' solvation_type{COSMO}'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO-SMD}"  id="COSMO-SMD"
              onClick="txspressed('COSMO-SMD',1)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{None}" id="None"
              onClick="txspressed('None',1)"
              style="background-color:#f8f8ff; color:#298DB4;"> <br>
       <INPUT TYPE="button" VALUE="-->" 
              onClick="document.form.smi.value+=' --> '" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="+" 
              onClick="document.form.smi.value+=' + '" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="~" 
              onClick="document.form.smi.value+=' ~ '" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="1" 
              onClick="document.form.smi.value+='1'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="2" 
              onClick="document.form.smi.value+='2'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="3" 
              onClick="document.form.smi.value+='3'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="4" 
              onClick="document.form.smi.value+='4'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="5" 
              onClick="document.form.smi.value+='5'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="6" 
              onClick="document.form.smi.value+='6'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="7" 
              onClick="document.form.smi.value+='7'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="8" 
              onClick="document.form.smi.value+='8'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="9" 
              onClick="document.form.smi.value+='9'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="0" 
              onClick="document.form.smi.value+='0'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE=" " 
              onClick="document.form.smi.value+=' '" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="charge" 
              onClick="entercharge()" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="mult" 
              onClick="entermult()" 
              style="background-color:#f8f8ff; color:#298DB4;">
    </FORM>
    <br>

    <font color="443322" size="2"><p><a href="https://ace.c9.io">ACE: High Performance Code Editor for the Web</a></p></font>
    <font color="443322" size="2"><p><a href="http://wiki.jmol.org/index.php/JSmol">JSmol: an open-source HTML5 viewer for chemical structures in 3D</a></p></font>
    <font color="443322" size="2"><p> JSME Editor Citation: <a href="http://jcheminf.springeropen.com/articles/10.1186/1758-2946-5-24"> B. Bienfait and P. Ertl, JSME: a free molecule editor in JavaScript, J. Cheminformatics 5:24 (2013)</a> </p></font>

    <table> <tr>
    <td> <font color="443322" size="2"> <p align="justify"> This software service and its documentation were developed at the Environmental Molecular Sciences Laboratory (EMSL) at Pacific Northwest National Laboratory, a multiprogram national laboratory, operated for the U.S. Department of Energy by Battelle under Contract Number DE-AC05-76RL01830. Support for this work was provided by the Department of Energy Office of Biological and Environmental Research, and Department of Defense environmental science and technology program (SERDP). THE SOFTWARE SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE SERVICE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE SERVICE. </p></font> </td>
    <td> <a href="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif"><img src="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif" alt="Arrows Movie"> </a> </td>
    </tr></table>
     Keywords: quantum chemistry calculations - quantum chemistry computations - quantum chemistry - molecular modeling calculations - molecular modeling computations - molecular modeling - chemical modeling - chemical reactions calculations - chemical reactions computations - chemical reactions - NWChem calculations - computational chemistry - NWChem

<br><br>
<div align="right"><font color="298DB4"> EMSL Arrows API visited {{ visits }} times </font></div>


</div>






<div id="NWChem Input Editor" class="tabcontent">

    <input type="button" VALUE="JSMol to Editor &#8600;" onClick="jmoltoeditor()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="&#8598; Editor to JSMol" onClick="jmloadxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="&#8599; Editor append to JSMol" onClick="jmappendxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
    <br>
    <!--div id="editor" style="position: relative; top: 85px; z-index: 1000; height: 560px; width: 1000px">some text is here </div-->
    <!--div id="editor" style="height: 560px; width: 1000px">some text is here </div-->
    <div id="editor" style="height: 560px; width: 1075px">some text is here </div>

    <script>
       var editor = ace.edit("editor");
       editor.setTheme("ace/theme/gob");
       editor.session.setMode("ace/mode/fortran");
    </script>
    
    <input type="button" VALUE="NWChem Format" onClick="convert2geometry(false)" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="XYZ Format" onClick="convert2XYZ()" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="CIF Format" onClick="convert2geometry(true)" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="vim" onClick="editor.setKeyboardHandler('ace/keyboard/vim');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="emacs" onClick="editor.setKeyboardHandler('ace/keyboard/emacs');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="ace" onClick="editor.setKeyboardHandler('');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
    Secret Code: <input type="text" name="Label" id="queue_secret_code">
    <br>
    Queue Label: <input type="text" name="Label" id="queue_nwchem_label" size=45> 
    QWAIT:: <input type="text" name="Label" id="queue_wait_label">
    <input type="button" VALUE="Submit NWChem" onClick="submit_nwchemjob2()" title="Submit NWChem" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"/>
    <a href="https://arrows.emsl.pnnl.gov/api/queue_nwchem_check/nwchem">Check submited NWChem jobs</a>
    <br>
    <section class="marquee" style="color: red"> <b id="runmebanner3"> </b> </section>
    <section class="marquee" style="color: black"> <b id="runmebanner3b"> </b> </section>
    <br>
    <input type="button" VALUE="Save to file" onClick="editorsave()" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="Load selected file" onClick="loadfiletoeditor()" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"/>
    <input type="file" id="fileToLoad" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"><br>
    <input type="button" VALUE="Load from url" onClick="loadurltoeditor()" title="Load data from url into editor" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"/>
    <input type="button" VALUE="Save to url" onClick="saveeditortourl()" title="Save data from editor into url" style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"/>
    <input type="url" id="urlToLoad" SIZE=60  style="background-color:#f8f8ff; color:#298DB4; font-size: 14px; font-weight:bold"><br>
    <br>

</div>

<div id="Arrows Periodic 3D Builder" class="tabcontent">

    <!--  end of jsmol table -->
    <table> 
       <!--  start of jsmol block -->
       <tr>
          <td>
             <input type="button" VALUE="&#8599; JSMol to Editor" onClick="jmoltoeditor()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="Editor to JSMol &#8601;" onClick="jmloadxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="Editor append to JSMol &#8601;" onClick="jmappendxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
          </td>
       </tr> 
       <tr> 
            <td align="left" id="jsmoldiv"></td>
            <td>
               <table>
                   <tr><td align="center"> JSMol Builder Options </td> </tr>
                   <tr> <td id="jsmolbtns"></td></tr>
                   <tr>
                      <td>
                         <input type="button" value="Center atom"  onClick="jmcenteratom()"/> 
                         <input type="button" value="Origin"  onClick="jmcenterorigin()"/> 
                         <input type="button" value="Console" onClick="jms0('console;')"/> 
                         <input type="button" value="Reset pointer"  onClick="jmresetPointer()"/> 
                      </td>
                   </tr>
                   <tr>
                      <td>
                         <table>
                            <tr>
                               <td>
                                  <table align="center">
                                     <tr>
                                        <td> <input type="button" value="H " onClick="jmpickatom('H')" style="background-color:#f8f8ff; color:#606f7d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="B " onClick="jmpickatom('B')" style="background-color:#f8f8ff; color:#ff6699; font-weight:bold"/> </td>
                                        <td> <input type="button" value="C " onClick="jmpickatom('C')" style="background-color:#f8f8ff; color:#000000; font-weight:bold"/> </td>
                                        <td> <input type="button" value="N " onClick="jmpickatom('N')" style="background-color:#f8f8ff; color:#1f2bd5; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="O " onClick="jmpickatom('O')"  style="background-color:#f8f8ff; color:#e6000d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="F " onClick="jmpickatom('F')"  style="background-color:#f8f8ff; color:#7ed83d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Al" onClick="jmpickatom('Al')" style="background-color:#f8f8ff; color:#a08c8c; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Si" onClick="jmpickatom('Si')" style="background-color:#f8f8ff; color:#dcaf82; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="P " onClick="jmpickatom('P')"  style="background-color:#f8f8ff; color:#e6640a; font-weight:bold"/> </td>
                                        <td> <input type="button" value="S " onClick="jmpickatom('S')"  style="background-color:#f8f8ff; color:#cccc00; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Cl" onClick="jmpickatom('Cl')" style="background-color:#f8f8ff; color:#23c814; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Br" onClick="jmpickatom('Br')" style="background-color:#f8f8ff; color:#8c191e; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" name="atomX1" id="atomX1" value="??" onClick="jmpickatom('X1')"/> </td>
                                        <td> <input type="button" name="atomX2" id="atomX2" value="??" onClick="jmpickatom('X2')"/> </td>
                                        <td> <input type="button" name="atomX3" id="atomX3" value="??" onClick="jmpickatom('X3')"/> </td>
                                        <td> <input type="button" name="atomX4" id="atomX4" value="??" onClick="jmpickatom('X4')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" name="atomX5" id="atomX5" value="??" onClick="jmpickatom('X5')"/> </td>
                                        <td> <input type="button" name="atomX6" id="atomX6" value="??" onClick="jmpickatom('X6')"/> </td>
                                        <td> <input type="button" name="atomX7" id="atomX7" value="??" onClick="jmpickatom('X7')"/> </td>
                                        <td> <input type="button" value="Xx" onClick="jmpickatom('Xx')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="Q+" onClick="jms('set picking assignAtom_pl')"</td>
                                        <td> <input type="button" value="Q-" onClick="jms('set picking assignAtom_mi')"</td>
                                        <td> <input type="button" value="e-" onClick="jmaddsmiles('SHE')"</td>
                                        <td> <input type="button" name="insertatom" id="insertatom" value="^^" onClick="jminsertatom(true)"</td>
                                     </tr>
                                  </table>
                               <td/>
                               <td>
                                  <table align="center">
                                     <tr>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Move atom"  onClick="jmmoveatom()"/> </td>
                                        <td> <input type="button" class="button2" value="Move mol."  onClick="jmmovemolecule()"/> </td>
                                     </tr>
                                     <!--tr>
                                        <td> <input type="button" class="button2" value="Drag atom" onClick="jms('set picking dragMinimize')"/> </td>
                                        <td> <input type="button" class="button2" value="Docking" onClick="jms('set picking dragMinimizeMolecule')"/> </td>
                                     </tr-->
                                     <tr>
                                        <td> <input type="button" class="button2" value="Rotate bond"  onClick="jmrotatebond()"/> </td>
                                        <td> <input type="button" class="button2" value="Rotate mol."  onClick="jmrotatemolecule()"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Corr. H" onClick="jms('delete hydrogen;calculate hydrogens')"/> </td>
                                        <td> <input type="button" class="button2" value="Corr. H mol." onClick="jmhcleanmolecule()"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Opt. all" onClick="jms('select nonmetal;minimize steps 100; select *; wireframe 0.15; spacefill 23%; boundbox {*}; centerat boundbox; zoom 0; javascript echo(globalVar)')"/> </td>
                                        <td> <input type="button" class="button2" value="Opt. mol." onClick="jmminimizemolecule()"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Undo" onClick="jm_cmdlist_undo()"/> </td>
                                        <td> <input type="button" class="button2" value="Redo" onClick="jm_cmdlist_redo()"/> </td>
                                     </tr>
                                  </table>
                               </td>
                            <tr/>
                         </table>
                      </td>
                   </tr>
                   <tr>
                      <td>
                         <table>
                            <tr>
                               <td> <input type="button" class="button3" value="Add H2O" onClick="jmaddsmiles('H2O')"</td>
                               <td> <input type="button" class="button3" value="Add CH4" onClick="jmaddsmiles('CH4')"</td>
                               <td> <input type="button" class="button3" value="Add smiles" onClick="jmaddsmiles('Xx')"</td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" name="smilesX1" id="smilesX1" value="smiles?" onClick="jmaddsmiles('X1')"</td>
                               <td> <input type="button" class="button3" name="smilesX2" id="smilesX2" value="smiles?" onClick="jmaddsmiles('X2')"</td>
                               <td> <input type="button" class="button3" name="smilesX3" id="smilesX3" value="smiles?" onClick="jmaddsmiles('X3')"</td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" value="Single" onClick="jms('hover on; set picking assignBond_1; hover off')"/> </td>
                               <td> <input type="button" class="button3" value="Double" onClick="jms('hover on; set picking assignBond_2; hover off')"/> </td>
                               <td> <input type="button" class="button3" value="Triple" onClick="jms('hover on; set picking assignBond_3; hover off')"/> </td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" value="Delete atom" onClick="jms('set picking off; set picking on; set atomPicking true;set picking DELETEATOM')"/> </td>
                               <td> <input type="button" class="button3" value="Delete bond" onClick="jms('hover on; set picking assignBond_0; hover off')"/> </td>
                               <td> <input type="button" class="button3" value="Delete mol." onClick="jmdeletemolecule()"/> </td>
                            </tr>
                            <tr> <td> </td> </tr>
                            <tr> <td> </td> </tr>
                            <tr>
                               <td> <input type="button" class="button3" value="Length" onClick="jms0('set picking off;set picking on;set pickingstyle MEASURE; set picking MEASURE DISTANCE')"/> </td>
                               <td> <input type="button" class="button3" value="Angle" onClick="jms0('set picking off;set picking on;set pickingstyle MEASURE; set picking MEASURE ANGLE')"/> </td>
                               <td> <input type="button" class="button3" value="Torsion" onClick="jms0('set picking off;set picking on; set pickingstyle MEASURE; set picking MEASURE TORSION')"/> </td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" name="jmolspin" id="jmolspin" value="Spin on" onClick="jmspin()"/> </td>
                               <td> <input type="button" class="button3" name="jmolaxes" id="jmolaxes" value="Axes on" onClick="jmaxes()"/>  </td>
                               <td> <input type="button" class="button3" name="jmollabel" id="jmollabel" value="Labels on" onClick="jmlabel()"/>  </td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" name="jmlblcolor" id="jmlblcolor" value="Label black" onClick="jmlabelcolor()"/>  </td>
                               <td> <input type="button" class="button3" name="jmbackcolor" id="jmbackcolor" value="Bckgrnd black" onClick="jmbackground()"/>  </td>
                               <td> <input type="button" class="button3" value="Redraw" onClick="jmredrawMolecule()"/>  </td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" name="jmolreactionplane2" id="jmolreactionplane2" value="Reaction on" onClick="jmreactionplane()"/> </td>
                               <td> <input type="button" class="button3" name="jmolmodelkit" id="jmolmodelkit" value="ModelKit off"  onClick="jmmodelkit()"/>  </td>
                               <td> <input type="button" class="button3" value="Clean restart"  onClick="jmreset()"/>  </td>
                            </tr>
                         </table>
                         <br>
                         <input type="button" VALUE="Load esmiles" onClick="loadurltojsmol(false)" title="Load xyz data from url into jsmol"/>
                         <input type="button" VALUE="Append" onClick="loadurltojsmol(true)" title="Append xyz data from url into jsmol"/>
                         <input type="url" id="urlToLoad2" SIZE=21/>
                         <br>
                         <input type="button" VALUE="Solvate" onClick="solvateurltojsmol()" title="Load xyz data from url into jsmol"/>
                         <b style="color: blue; font-size: 14px;" id="runmebanner4b"></b>
                         <br><br>
                         <input type="button" value="Next model" onClick="loadframe2jsmol(false,false)" title="Load xyz data from url into jsmol"/>
                         <input type="button" value="New model" onClick="loadframe2jsmol(true,false)" title="Load xyz data from url into jsmol"/>
                         <br>
                         <input type="button" value="Append model" onClick="loadframe2jsmol(false,true)" title="Load xyz data from url into jsmol"/>
                         <b style="color: blue; font-size: 14px;" id="model_label">Model 1 out of 1</b>
                      </td>
                   </tr>

               </table>
            </td>
       </tr> 
       <!--  end of jsmol block -->
    </table>
    <!--  end of jsmol table -->

    <!-- crystal input -->
    <br>
    <input type="button" class="button" id="showcell"   value="Show unit cell" onClick="jmshowcell()"/>  
    <input type="button" class="button" id="centercell" value="Center unit cell" onClick="jmscentercell()"/>  
    <input type="button" class="button" id="unitscell1" value="Scale lengths by 0.529177" onClick="jmschangecellunits(0.529177)"/>  
    <input type="button" class="button" id="unitscell2" value="Scale lengths by 1.889727" onClick="jmschangecellunits(1.88972687777)"/>  
    <input type="button" class="button" id="foldcell"   value="Fold unit cell" onClick="jmsfoldcell()"/>  
    <br>
    <table>
       <tr>
          <td> Lattice Vectors </td>
          <td> Lattice Parameters </td>
          <td> Lattice Symmetry </td>
       </tr>
       <tr>
          <!-- crystal input - unit cell -->
          <td> 
              <table>
                 <tr> <td> a1: <input type="3array" id="lattice_a1"  size="35" value="10.000  0.000  0.000" onchange="jsmcellchange(0,1)"> </td> </tr>
                 <tr> <td> a2: <input type="3array" id="lattice_a2"  size="35" value=" 0.000 10.000  0.000" onchange="jsmcellchange(0,1)"> </td> </tr>
                 <tr> <td> a3: <input type="3array" id="lattice_a3"  size="35" value=" 0.000  0.000 10.000" onchange="jsmcellchange(0,1)"> </td> </tr>
              </table>
          </td> 
          <td>
             <table>
                <tr>
                   <td> a: <input type="number" id="cell_a" size="9" min="0.500" max="100.000" step="0.01" value="10.000" onchange="jsmcellchange(1,1)"> </td>
                   <td> b: <input type="number" id="cell_b" size="9" min="0.500" max="100.000" step="0.01" value="10.000" onchange="jsmcellchange(1,1)"> </td>
                   <td> c: <input type="number" id="cell_c" size="9" min="0.500" max="100.000" step="0.01" value="10.000" onchange="jsmcellchange(1,1)"> </td>
                </tr>
                <tr>
                   <td> alpha: <input type="number" id="cell_alpha" size="9" min="0.000" max="180.000" step="0.01" value="90.000" onchange="jsmcellchange(1,1)"> </td>
                   <td> beta:  <input type="number" id="cell_beta"  size="9" min="0.000" max="180.000" step="0.01" value="90.000" onchange="jsmcellchange(1,1)"> </td>
                   <td> gamma: <input type="number" id="cell_gamma" size="9" min="0.000" max="180.000" step="0.01" value="90.000" onchange="jsmcellchange(1,1)"> </td>
                </tr>
             </table>
          </td>
          <td> 
             <table>
             <tr>
                 <td> symmetry: <input type="spacegroup" id="lattice_group"  size="15" value="P1" onchange="jsmcellchange(0,1)"> </td>
                 <td> setting: <input type="spacegroup" id="lattice_group_setting"  size="5" value="1" onchange="jsmcellchange(0,1)"> </td>
             </tr>
             <tr>
                <td> crystal system:
                  <select id="crystal_system">
                     <option value="Triclinic">Triclinic</option>
                     <option value="Monoclinic">Monoclinic</option>
                     <option value="Orthorhombic">Orthorhombic</option>
                     <option value="Tetragonal">Tetragonal</option>
                     <option value="Trigonal">Trigonal</option>
                     <option value="Hexagonal">Hexagonal</option>
                     <option value="Cubic">Cubic</option>
                   </select>
                </td>
                 <td> group number: <input type="spacegroup" id="lattice_group_number"  size="5" value="1" onchange="jsmcellchange(0,1)"> </td>
             </tr>
             </table>
          </td>
       </tr>
    </table>
    <br>    
    <table>
       <tr>
          <td>
             <input type="button" VALUE="Add simple bulk crystal" style="background-color:#f8f8ff;color:#0000ff" onClick="loadbulktojsmol()" title="Load xyz data from url into jsmol"/>
             name: <input type="text" id="bulk_name" SIZE=9 value="Pt"/>
             <select id="bulk_type">
                <option value="sc">Simple Cubic</option>
                <option value="fcc">Face-Centered Cubic</option>
                <option value="bcc">Body-Centered Cubic</option>
                <option value="hcp">Hexagonal Closed Packed</option>
                <option value="diamond">Diamond</option>
                <option value="zincblende">Zinc Blende</option>
                <option value="rocksalt">Rock Salt</option>
                <option value="cesiumchloride">Cesium Choride</option>
                <option value="fluorite">Fluorite</option>
                <option value="wurtzite">Wurtzite</option>
              </select>
              <br>
              a: <input type="number" id="bulk_a" size="9" min="0.500" max="30.000" step="0.01" value="3.500">
              c: <input type="number" id="bulk_c" size="9" min="0.000" max="30.000" step="0.01" value="0.000">
              u: <input type="number" id="bulk_u" size="9" min="0.000" max="30.000" step="0.01" value="0.000">
              primitive: <input type="radio" id="bulk_primitive" onClick="ClearRd(this,0)" title="Load xyz data from url into jsmol"/>
              cubic: <input type="radio" id="bulk_cubic" onClick="ClearRd(this,1)" title="Load xyz data from url into jsmol"/>
          </td>
          <td>
             <input type="button" VALUE="Generate surface" style="background-color:#f8f8ff;color:#0000ff" onClick="cutslab()" title="Load xyz data from url into jsmol"/>
             a: <input type="text" id="surface_a" SIZE=15 value="1.5 -1.5 0.0"/>
             b: <input type="text" id="surface_b" SIZE=15 value="0.0 1.5 -1.5"/>
             c: <input type="text" id="surface_c" SIZE=15 value="-1.0 -1.0 -1.0"/>
             <select id="surface_cut" onchange="defineslab()">
                <option value="sc100">SC100</option>
                <option value="sc111">SC111</option>
                <option value="fcc100">FCC100</option>
                <option value="fcc110">FCC110</option>
                <option value="fcc111">FCC111</option>
                <option value="fcc211">FC211</option>
                <option value="bcc100">BCC100</option>
                <option value="bcc001">BCC001</option>
                <option value="bcc110">BCC110</option>
                <option value="bcc111">BCC111</option>
                <option value="hcp0001">hcp0001</option>
                <option value="diamond100">diamond100</option>
                <option value="diamond111">diamond111</option>
              </select>
             <br> vacuum: <input type="number" id="surface_vacuum" size="9" min="0.500" max="30.000" step="0.01" value="10.000" onchange="jsmcellchange(1,1)">
             origin: <input type="text" id="surface_origin" SIZE=15 value="0.0 0.0 0.0"/>
             scaling: <input type="text" id="surface_scaling" SIZE=15 value="1.0 1.0 1.0"/>
             tolerance: <input type="number" id="surface_tolerance" size="9" min="-3.000" max="3.000" step="0.001" value="0.0010" onchange="jsmcellchange(1,1)">
          </td>
       </tr>
    </table>
    <br>
    <table>
       <tr>
          <td> Cartesian Coordinates  </td>
          <td> Fractional Coordinates </td>
          <td> Symmetry Ops </td>
       </tr>
       <tr>
          <td> <textarea  id="cartesianCoords" rows="25" cols="40" onchange="jmsupdatecartbox()"></textarea> </td>
          <td> <textarea  id="fractionalCoords" rows="25" cols="40" onchange="jmsupdatefracbox()"></textarea> </td>
          <td> <textarea  id="symmetryops" rows="25" cols="40" onchange="jmsupdatefracbox()">+x,+y,+z</textarea></td>
       </tr>
    </table>
    <br>



</div>
<div id="Arrows Entry - 2D Builder" class="tabcontent">


   <h2>Enter an <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#Introduction_to_ESMILES_-_How_to_Change_Calculation_Theories">esmiles</a>, <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#ESMILES_Reactions_-_How_to_Calculate_Reaction_Energies"> esmiles reaction</a>, or other Arrows input, then push the "Run Arrows" button.</h2>
    <form action="." name="form2"  method="POST">
       <table>
          <tr>
             <td> <input type="text" name="smi" SIZE=120 onkeydown="if (event.keyCode == 13) Confirm(this.form)"> </td>
             <!--td> <input type="submit" name="JSME-arrows" value="Run Arrows" style="font-family: sans-serif; font-size: 20px;"></td-->
             <td> <input type="button" name="JSME-arrows" value="Run Arrows" style="font-family: sans-serif; font-size: 20px;" onClick="Confirm(this.form)"></td>
          </tr>
          <tr>
             <td> <INPUT TYPE="button" VALUE="Append SMILES from JSME Molecular Editor" onClick="appendSmiles()"> &nbsp;
                  <input type="button" class="button3" name="jmolreactionplane" id="jmolreactionplane" value="Reaction on" onClick="jmreactionplane()"/>
                  <INPUT TYPE="button" VALUE="no html5"
                          onClick="document.form2.smi.value+=' nohtml5'" >
                  <INPUT TYPE="button" VALUE="Clear" onClick="clearSmiles2()">
            </td>
             <td> <INPUT TYPE="button" VALUE="Email Submit" onClick="emailSmiles()"> </td>
          </tr>
       </table>
    </form>
    <section class="blink" style="color: red"> <b id="runmebanner2"> </b> </section>
    <br>


  <FORM METHOD="POST" ONSUBMIT="return false;">
       <INPUT TYPE="button" VALUE="theory{band}" id="dft"
              onClick="txspressed('band',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw}" id="pspw"
              onClick="txspressed('pspw',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw4}" id="pspw4"
              onClick="txspressed('pspw4',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{dft}" id="dft"
              onClick="txspressed('dft',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{mp2}" id="mp2"
              onClick="txspressed('mp2',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{ccsd(t)}" id="ccsd(t)"
              onClick="txspressed('ccsd(t)',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pm3}" id="pm3"
              onClick="txspressed('pm3',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="basis{6-31G*}" id="6-31G*"
              onClick="txspressed('6-31G*',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="basis{6-311++G(2d,2p)}" id="6-311++G(2d,2p)"
              onClick="txspressed('6-311++G(2d,2p)',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
      <br>
       <INPUT TYPE="button" VALUE="xc{lda}" id="lda"
              onClick="txspressed('lda',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe}" id="pbe"
              onClick="txspressed('pbe',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe0}" id="pbe0"
              onClick="txspressed('pbe0',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{blyp}" id="blyp"
              onClick="txspressed('blyp',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{b3lyp}" id="b3lyp"
              onClick="txspressed('b3lyp',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{m06-2x}" id="m06-2x"
              onClick="txspressed('m06-2x',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO}"  id="COSMO"
              onClick="txspressed('COSMO',2)"
              onClick="document.form2.smi.value+=' solvation_type{COSMO}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO-SMD}"  id="COSMO-SMD"
              onClick="txspressed('COSMO-SMD',2)"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{None}" id="None"
              onClick="txspressed('None',2)"
              style="background-color:#f8f8ff; color:#298DB4;"> <br>
       <INPUT TYPE="button" VALUE="-->"
              onClick="document.form2.smi.value+=' --> '"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="+"
              onClick="document.form2.smi.value+=' + '"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="~"
              onClick="document.form2.smi.value+=' ~ '"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="1"
              onClick="document.form2.smi.value+='1'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="2"
              onClick="document.form2.smi.value+='2'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="3"
              onClick="document.form2.smi.value+='3'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="4"
              onClick="document.form2.smi.value+='4'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="5"
              onClick="document.form2.smi.value+='5'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="6"
              onClick="document.form2.smi.value+='6'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="7"
              onClick="document.form2.smi.value+='7'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="8"
              onClick="document.form2.smi.value+='8'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="9"
              onClick="document.form2.smi.value+='9'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="0"
              onClick="document.form2.smi.value+='0'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE=" "
              onClick="document.form2.smi.value+=' '"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="charge"
              onClick="entercharge()"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="mult"
              onClick="entermult()"
              style="background-color:#f8f8ff; color:#298DB4;">
    </FORM>
    <br>

    <!--  start of ace-jsme table -->
    <br>
    <table>
         <tr>
            <td>
               <input type="button" VALUE="JSMol to JSME &#8600;" onClick="readMolecule()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
               <input type="button" VALUE="JSMol append to JSME &#8600;" onClick="appendMolecule()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
               <input type="button" VALUE="&#8598; JSME to JSMol" onClick="jmsmiles()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
               <input type="button" VALUE="&#8598; JSME append to JSMol" onClick="jmasmiles()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
            </td>
         </tr>
         <tr>
             <!--td id="editor" style="height: 500px; width: 750px">some text is here </td-->
             <td id="appletContainer"></td>
        </tr>
    </table>
    <!--  end of ace-jsme table -->



    <font color="00008B">
    <h3>  The following are examples of input that can be used with EMSL Arrows. Clicking on a button places the command into the above entry box. </h3>
    <form method="POST" ONSUBMIT="return false;">
       <p><b> <font size="+1.5">Molecular calculations: </font> </b> &nbsp;
       <INPUT TYPE="button" VALUE="CN1C=NC2=C1C(=O)N(C(=O)N2C)C" onClick="document.form2.smi.value='CN1C=NC2=C1C(=O)N(C(=O)N2C)C'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="Pubchem=2519" onClick="document.form2.smi.value='Pubchem=2519'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="ChemSpider=2424" onClick="document.form2.smi.value='ChemSpider=2424'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="cas=58-08-2" onClick="document.form2.smi.value='cas=58-08-2'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="kegg=D00528" onClick="document.form2.smi.value='kegg=D00528'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3"
              onClick="document.form2.smi.value='InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="Caffeine" onClick="document.form2.smi.value='Caffeine'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="CHEMBL113" onClick="document.form2.smi.value='CHEMBL113'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="CN1C=NC2=C1C(=O)N(C(=O)N2C)C theory{pspw}" onClick="document.form2.smi.value='CN1C=NC2=C1C(=O)N(C(=O)N2C)C theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="CN1C=NC2=C1C(=O)N(C(=O)N2C)C xc{pbe}" onClick="document.form2.smi.value='CN1C=NC2=C1C(=O)N(C(=O)N2C)C xc{pbe}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="CN1C=NC2=C1C(=O)N(C(=O)N2C)C xc{m06-2x}" onClick="document.form2.smi.value='CN1C=NC2=C1C(=O)N(C(=O)N2C)C xc{m06-2x}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="CN1C=NC2=C1C(=O)N(C(=O)N2C)C theory{mp2}" onClick="document.form2.smi.value='CN1C=NC2=C1C(=O)N(C(=O)N2C)C theory{mp2}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       </p>
       <p><b><font size="+1.5">  Reaction calculations: </font> </b> &nbsp;
       <INPUT TYPE="button" VALUE="CC + hydrogen gas --> 2 methane" onClick="document.form2.smi.value='CC + hydrogen gas --> 2 methane'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="C=C + ClCl --> ClCCCl" onClick="document.form2.smi.value='C=C + ClCl --> ClCCCl'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="TNT + hydroxide --> TNT-2-OH + nitrite" onClick="document.form2.smi.value='TNT + hydroxide --> TNT-2-OH + nitrite'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="TNT + hydroxide --> TNT-2-OH + nitrite ~ xc{m06-2x}"
              onClick="document.form2.smi.value='TNT + hydroxide --> TNT-2-OH + nitrite ~ xc{m06-2x}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="TNT + hydroxide --> TNT-2-OH + nitrite ~ theory{pspw4}"
              onClick="document.form2.smi.value='TNT + hydroxide --> TNT-2-OH + nitrite ~ theory{pspw4}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="TNT + water --> TNT-2-OH + nitrous acid ~ theory{pspw}"
              onClick="document.form2.smi.value='TNT + water --> TNT-2-OH + nitrous acid ~ theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">

       </p>
       <p><b> <font size="+1.5"> NMR calculations: </font> </b> &nbsp;
       <INPUT TYPE="button" VALUE="nmr for O=N(=O)c1cc(N(=O)=O)c(c(c1)N(=O)=O)C basis{6-31G*}"
              onClick="document.form2.smi.value='nmr for O=N(=O)c1cc(N(=O)=O)c(c(c1)N(=O)=O)C basis{6-31G*}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="nmr for O=N(=O)c1cc(N(=O)=O)c(c(c1)N(=O)=O)C basis{6-31G*} solvation_type{None}"
              onClick="document.form2.smi.value='nmr for O=N(=O)c1cc(N(=O)=O)c(c(c1)N(=O)=O)C basis{6-31G*} solvation_type{None}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="nmr for aspirin"
              onClick="document.form2.smi.value='nmr for aspirin'"
              style="background-color:#f8f8ff; color:#298DB4;">
       </p>
       <p><b><font size="+1.5">  Predict reactions: </font></b> &nbsp;
       <INPUT TYPE="button" VALUE="TNT + hydroxide -->"
              onClick="document.form2.smi.value='TNT + hydroxide -->'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="C=C + ClCl -->"
              onClick="document.form2.smi.value='C=C + ClCl -->'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="TNT + hydroxide --> ~ theory{pspw4}"
              onClick="document.form2.smi.value='TNT + hydroxide --> ~ theory{pspw4}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="predict for TNT + hydroxide"
              onClick="document.form2.smi.value='predict for TNT + hydroxide'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="predict for tetryl + hydroxide"
              onClick="document.form2.smi.value='predict for tetryl + hydroxide'"
              style="background-color:#f8f8ff; color:#298DB4;">
       </p>
       <p><b><font size="+1.5"> SMARTS searching: </font></b> &nbsp;
       <INPUT TYPE="button" VALUE="smarts cN(=O)=O  xc{m06-2x}"
              onClick="document.form2.smi.value='smarts cN(=O)=O  xc{m06-2x}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="smarts c1ccccc1 theory{pspw4}"
              onClick="document.form2.smi.value='smarts c1ccccc1 theory{pspw4}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="smarts [CX3H1](=O)[#6]"
              onClick="document.form2.smi.value='smarts [CX3H1](=O)[#6]'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="smarts [CX3](=[OX1])C theory{mp2}"
              onClick="document.form2.smi.value='smarts [CX3](=[OX1])C theory{mp2}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       </p>
       <p><b><font size="+1.5"> Generate NWChem input, Fetch NWChem output, Fetch XYZ and Fetch JSON: </font></b> &nbsp;
       <INPUT TYPE="button" VALUE="input deck for aspirin"
              onClick="document.form2.smi.value='input deck for aspirin'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="input deck for aspirin theory{pspw}"
              onClick="document.form2.smi.value='input deck for aspirin theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="input deck for aspirin theory{mp2}"
              onClick="document.form2.smi.value='input deck for aspirin theory{mp2}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="input deck for PubChem=2519 xc{pbe}"
              onClick="document.form2.smi.value='input deck for PubChem=2519 xc{pbe}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="output deck for aspirin"
              onClick="document.form2.smi.value='output deck for aspirin'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="nwoutput for aspirin theory{pspw}"
              onClick="document.form2.smi.value='nwoutput for aspirin theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xyz for aspirin theory{pspw}"
              onClick="document.form2.smi.value='xyz for aspirin theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="json for aspirin theory{pspw}"
              onClick="document.form2.smi.value='json for aspirin theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
       </p>
        <p>
       <p><b><font size="+1.5"> Other Arrows commands: </font></b> &nbsp;
       <INPUT TYPE="button" VALUE="list all reactions"
              onClick="document.form2.smi.value='list all reactions'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="list all esmiles 100"
              onClick="document.form2.smi.value='list all esmiles 100'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="queue"
              onClick="document.form2.smi.value='queue'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="download fetch_nwchem_input"
              onClick="document.form2.smi.value='download fetch_nwchem_input'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="download upload_nwchem_outfiles"
              onClick="document.form2.smi.value='download upload_nwchem_outfiles'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="download arrows_esmiles2xyz"
              onClick="document.form2.smi.value='download arrows_esmiles2xyz'"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="submitesmiles for ethene theory{pspw}"
              onClick="document.form2.smi.value='submitesmiles for ethene theory{pspw}'"
              style="background-color:#f8f8ff; color:#298DB4;">
        </p>
    </form>
    </font>






</div>



<script type="text/javascript">
function openCity(evt, cityName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById(cityName).style.display = "block";
    evt.currentTarget.className += " active";
}
document.getElementById("defaultOpen").click();
</script>



</body>
</html>
