<!doctype html>
<!-- The DOCTYPE declaration above will set the     -->
<!-- browser's rendering engine into                -->
<!-- "Standards Mode". Replacing this declaration   -->
<!-- with a "Quirks Mode" doctype is not supported. -->

<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>EMSL Arrows</title>

<script type="text/javascript" language="javascript" src="{{ url_for('static', filename='jsme/jsme.nocache.js')}}"></script>
<script type="text/javascript" language="javascript" src="{{ url_for('static', filename='jsmol/JSmol.min.js')}}"></script>
<!-- script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.3.1/ace.js" type="text/javascript" charset="utf-8"></script> -->
<script src="https://unpkg.com/ace-builds@1.3.1/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>

<style type="text/css" media="screen">
    #editor {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }
   .button2 {width:100px;text-align: left;}
   .button3 {width:100px;text-align: left;}
</style>


<script type="text/javascript">

	//this function will be called after the JavaScriptApplet code has been loaded.
	function jsmeOnLoad() {

		//Instantiate a new JSME: 380px  340px
		//arguments: HTML id, width, height (must be string not number!)
		//jsmeApplet = new JSApplet.JSME("appletContainer", "700px", "467px", {

		jsmeApplet = new JSApplet.JSME("appletContainer", "500px", "500px", {
			//optional parameters
			"options" : "query,hydrogens,canonize,removehs"
		});

		//Alternative method: the size is not specified: the applet will use 100% of the space of its parent container "appletContainer".
		//Be sure that the parent container size > 0, otherwise the applet will not be visible

		/*    	jsmeApplet = new JSApplet.JSME("appletContainer",  {
		 //optional parameters
		 "options" : "query,hydrogens",
		 "jme" : startingStructure
		 });
		 */

		//Opera patch: if some applet elements are not displayed, force repaint
		//jsmeApplet.deferredRepaint(); //the applet will be repainted after the browser event loop returns
		//it is recommended to use it if the JSME is created outside this jsmeOnLoad() function

		//jsmeApplet has the same API as the original Java applet
		//One can mimic the JME Java applet access to simplify the adaptation of HTML and JavaScript code:
		document.JME = jsmeApplet;

		//suggestion 
		//all buttons that access the jsme variable were disabled in the html
		//Now enable all buttons that can access the jsme variable since the applet is ready
		//example:
		//document.getElementById("button").disabled=false;

	}

     function jmolOnLoad() {
            Info = {
            width: 500,
            height: 500,
            debug: false,
            j2sPath: "{{ url_for('static', filename='jsmol/j2s')}}",
            //j2sPath: "jsmol/j2s",
            //color: "0x3BBC52",
            //color: "0x3BBC52",
            color: "0xc6ed80",
            disableJ2SLoadMonitor: true,
            disableInitialConsole: true,
            addSelectionOptions: true,
            //serverURL: "http://10.0.1.99/jsmol.php",
            serverURL: "{{ url_for('static', filename='jsmol/php/jsmo.php')}}",
            use: "HTML5",
            readyFunction: null,
            //script: "load  /static/jjj.xyz ; set modelKitMode "
            script: "set modelKitMode "
         };
         $("#jsmoldiv").html(Jmol.getAppletHtml("jmolApplet0", Info));
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0,"select *;spacefill 75%" ,"Space Fill") + Jmol.jmolButton(jmolApplet0, "select *; wireframe 0.15; spacefill 23%;","Ball and Stick") +  Jmol.jmolButton(jmolApplet0, "select *; wireframe 0.03; spacefill 1%;","Stick") ); 
      }

        function convertMOL2XYZ(str) {
           var i,n,x,data;
           var lines = str.split("\n");
           if (str.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
           } 
           else { 
              data=str;
           }
           return data;
        } 

        function fetchXYZ() {
           var i,n,x,m;
           var data = editor.getValue(); // or session.getValue
           var lines = data.split("\n");
           if (data.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
           } 

           if (data.includes("geometry")) {
              n = lines.length;
              m = 0;
              x = false;
              data = "";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                 } else if (lines[i].includes("end")) {
                    x = false;
                 } else if (x) {
                    data += lines[i] + "\n";
                    m += 1;
                 }
              }
              data = m.toString() + "\n\n" + data;
           }
           return data;
        } 

        function myPick() {
           alert('you clicked on atom with index=' + arguments[2]);
        }




        function jms(scpt) { Jmol.script(jmolApplet0, scpt); }
        function jmsmiles() { Jmol.script(jmolApplet0, "load smiles \"" + document.JME.smiles() + "\""); }
        function jmasmiles() { Jmol.script(jmolApplet0, "set appendNew false;load append smiles \"" + document.JME.smiles() + "\"; select all; select within(molecule,(*)[0]); minimize select selected;"); }
        function jmstr(scpt) { return Jmol.getPropertyAsString(jmolApplet0,scpt); }
        function jmvar(x) {return Jmol.evaluateVar(jmolApplet0, x);}
        function exMod() { return jmstr("extractModel"); }
        function jmoltoeditor() {editor.setValue(convertMOL2XYZ(exMod()));}

        function jmreset() { Jmol.script(jmolApplet0, "load smiles \"" + "C" + "\"; set modelKitMode;"); }

        //load data "model example"|2|testing|C 1.22 1 1|O 12 2 2|end "model example"
        function jmxyz() {
           var xyzdat = "\"model editor\"|" + fetchXYZ().trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           Jmol.script(jmolApplet0, "load data "+xyzdat); 
        }

        function jmappendxyz() {
           var xyzdat = "\"append\"|" + fetchXYZ().trim().replace(/\n/g,' | ') + "|end \"append\"";
           //var xyzdat = "\"model editor\"|" + fetchXYZ().trim().replace(/\n/g,' | ') + "|end \"model editor\"";
           //Jmol.script(jmolApplet0, "set appendNew false; load append data "+xyzdat);
           Jmol.script(jmolApplet0, "set appendNew false; data "+xyzdat);
        }

        function deleteMoleculePick() {
           var anum = arguments[1].split("#")[1].split(" ")[0]
           var scpt = "select within(molecule,{*}[" + anum + "]); delete selected; unbind; set picking identify; set PickCallback \"\";"
           jms(scpt);
        }

        function jmdeletemolecule() {
           jms("set picking off;set picking on; set atomPicking true;  set PickCallback \"deleteMoleculePick\";");
        }

        function resetPointer() {
           var scpt = "unbind; set picking identify; set PickCallback \"\";"
           jms(scpt);
        }


        function jmpickatom(symbol0) {
           var scpt = "set picking off; set picking on; set atomPicking true; set picking assignatom_";
           var symbol = symbol0;
           if (symbol0=='X1'){
              if (document.getElementById("atomX1").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX1").value = symbol;
              } else {
                 symbol = document.getElementById("atomX1").value;
              }
           } 
           if (symbol0=='X2'){
              if (document.getElementById("atomX2").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX2").value = symbol;
              } else {
                 symbol = document.getElementById("atomX2").value;
              }
           } 
           if (symbol0=='X3'){
              if (document.getElementById("atomX3").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX3").value = symbol;
              } else {
                 symbol = document.getElementById("atomX3").value;
              }
           } 
           if (symbol0=='X4'){
              if (document.getElementById("atomX4").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX4").value = symbol;
              } else {
                 symbol = document.getElementById("atomX4").value;
              }
           } 
           if (symbol0=='X5'){
              if (document.getElementById("atomX5").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX5").value = symbol;
              } else {
                 symbol = document.getElementById("atomX5").value;
              }
           } 
           if (symbol0=='X6'){
              if (document.getElementById("atomX6").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX6").value = symbol;
              } else {
                 symbol = document.getElementById("atomX6").value;
              }
           } 
           if (symbol0=='X7'){
              if (document.getElementById("atomX7").value=="??") {
                 symbol = prompt("Please enter atom symbol:", "Fe");
                 document.getElementById("atomX7").value = symbol;
              } else {
                 symbol = document.getElementById("atomX7").value;
              }
           } 
           if (symbol0=='Xx'){
              symbol = prompt("Please enter atom symbol:", "Fe");
           } 
           
           scpt += symbol;
           jms(scpt);
        }
        document.getElementById("atomX1").value = "??";
        document.getElementById("atomX2").value = "??";
        document.getElementById("atomX3").value = "??";
        document.getElementById("atomX4").value = "??";
        document.getElementById("atomX5").value = "??";
        document.getElementById("atomX6").value = "??";
        document.getElementById("atomX7").value = "??";

        function jmaddsmiles(option0) {
           var smiles,scpt;

           if (option0=='H2O'){ 
              smiles = "O"; 
           }
           if (option0=='X1'){
              if (document.getElementById("smilesX1").value=="smiles?") {
                 smiles = prompt("Please enter smiles:", "CCO");
                 document.getElementById("smilesX1").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX1").value;
              }
           } 
           if (option0=='X2'){
              if (document.getElementById("smilesX2").value=="smiles?") {
                 smiles = prompt("Please enter smiles:", "CCO");
                 document.getElementById("smilesX2").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX2").value;
              }
           } 
           if (option0=='X3'){
              if (document.getElementById("smilesX3").value=="smiles?") {
                 smiles = prompt("Please enter smiles:", "CCO");
                 document.getElementById("smilesX3").value = smiles;
              } else {
                 smiles = document.getElementById("smilesX3").value;
              }
           } 
           if (option0=='Xx'){
              smiles = prompt("Please enter smiles:", "CCO");
           } 
           var scpt = 'set appendNew false; load append smiles \"' + smiles + '\"; select all; select within(molecule,(*)[0]); minimize select selected;';
           jms(scpt);
        }
        document.getElementById("smilesX1").value = "smiles?";
        document.getElementById("smilesX2").value = "smiles?";
        document.getElementById("smilesX3").value = "smiles?";

        function jmspin() {
           var scpt;
           var jjj = document.getElementById("jmolspin").value;
           if  (jjj == "Spin off") {
              scpt = "Spin off;";
              document.getElementById("jmolspin").value = "Spin on";
           } else {
              scpt = "Spin on;";
              document.getElementById("jmolspin").value = "Spin off";
           }
           jms(scpt);
        }
        document.getElementById("jmolspin").value = "Spin on";

        function jmlabel() {
           var scpt;
           var jjj = document.getElementById("jmollabel").value;
           if  (jjj == "Labels off") {
              scpt = "select all; label off";
              document.getElementById("jmollabel").value = "Labels on";
           } else {
              scpt = "select all; label %a";
              document.getElementById("jmollabel").value = "Labels off";
           }
           jms(scpt);
        }
        document.getElementById("jmollabel").value = "Labels on";

        function jmaxes() {
           var scpt;
           var jjj = document.getElementById("jmolaxes").value;
           if  (jjj == "Axes off") {
              scpt = "unitcell 0; axes 0"
              document.getElementById("jmolaxes").value = "Axes on";
           } else {
              scpt = "unitcell 1; axes 1"
              document.getElementById("jmolaxes").value = "Axes off";
           }
           jms(scpt);
        }
        document.getElementById("jmolaxes").value = "Axes on";

        function jmmodelkit() {
           var scpt;
           var jjj = document.getElementById("jmolmodelkit").value;
           if  (jjj == "ModelKit off") {
              scpt = "set modelkitMode = false;"
              document.getElementById("jmolmodelkit").value = "ModelKit on";
           } else {
              scpt = "set modelkitMode = true;"
              document.getElementById("jmolmodelkit").value = "ModelKit off";
           }
           jms(scpt);
        }
        document.getElementById("jmolmodelkit").value = "ModelKit off";

        function jmmovemolecule() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON; set atomPicking true; set allowRotateSelected TRUE; set picking dragmolecule;bind "double" "javascript moveMol(2)";');
        }
        function jmmoveatom() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON; set picking DRAGATOM; bind "double" "javascript moveMol(1)";');
        }
        function jmrotatebond() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set Picking OFF;set Picking ON;set Picking ROTATEBOND;unbind "LEFT-DRAG";bind "LEFT-DRAG" "_rotateBranch";hover off;unbind "WHEEL";bind "WHEEL" "select *;color cpk"');
        }
        function jmrotatemolecule() {
           jms('unbind; unbind _wheelZoom; unbind "DOUBLE"; set picking off; set picking on; set allowRotateSelected false; set modelKitMode false;');
           jms('set picking off; set picking ON;set atomPicking true;set picking dragmolecule;set allowRotateSelected TRUE;bind "drag" "_rotateselected";bind "double" "javascript moveMol(3)";');
        }

        function charge_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var charge = eval(jmvar("{*}.formalCharge.sum"));
           if (arrows_input.includes("^{")) {
              charge = eval(arrows_input.split("^{")[1].split("}")[0].trim());
           }
           return charge;
        }
        function mult_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var charge = eval(jmvar("{*}.formalCharge.sum"));
           if (arrows_input.includes("^{")) {
              charge = eval(arrows_input.split("^{")[1].split("}")[0].trim());
           }
           var mult = (eval(jmvar("{*}.elemno.sum")) + charge) % 2 + 1;
           if (arrows_input.includes("mult{")) {
              mult = eval(arrows_input.split("mult{")[1].split("}")[0].trim());
           }
           return mult;
        }
        function theory_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var theory = "dft";
           if (arrows_input.includes("theory{")) {
              theory = arrows_input.split("theory{")[1].split("}")[0].trim();
           }
           return theory;
        }
        function theory_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var theory = "dft";
           if (arrows_input.includes("theory_property{")) {
              theory = arrows_input.split("theory_property{")[1].split("}")[0].trim();
           }
           return theory;
        }
        function basis_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basis{")) {
              basis = arrows_input.split("basis{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basis_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basis_property{")) {
              basis = arrows_input.split("basis_property{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basisHZ_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basisHZ{")) {
              basis = arrows_input.split("basisHZ{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function basisHZ_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var basis = "default";
           if (arrows_input.includes("basisHZ_property{")) {
              basis = arrows_input.split("basisHZ_property{")[1].split("}")[0].trim();
           }
           return basis;
        }
        function xc_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var xc = "b3lyp";
           if (arrows_input.includes("theory{pspw")) {
              xc = "pbe";
           }
           if (arrows_input.includes("xc{")) {
              xc = arrows_input.split("xc{")[1].split("}")[0].trim();
           }
           return xc;
        }
        function xc_property_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var xc = "b3lyp";
           if (arrows_input.includes("xc_property{")) {
              xc = arrows_input.split("xc_property{")[1].split("}")[0].trim();
           }
           return xc;
        }
        function solvation_type_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var solvation_type = "COSMO";
           if (arrows_input.includes("theory{pspw")) {
              solvation_type = "None";
           }
           if (arrows_input.includes("solvation_type{")) {
              solvation_type = arrows_input.split("solvation_type{")[1].split("}")[0].trim();
           }
           return solvation_type;
        }
        function calculation_type_arrowsdata() {
           var arrows_input = document.form.smi.value;
           var calculation_type = "ovcb";
           if (arrows_input.includes("theory{pspw")) {
              calculation_type = "ovb";
           }
           if (arrows_input.includes("calculation_type{")) {
              calculation_type = arrows_input.split("calculation_type{")[1].split("}")[0].trim();
           }
           return calculation_type;
        }



	function readMolecule() {
		//var jme = "16 17 C 7.37 -8.99 C 7.37 -7.59 C 6.16 -6.89 C 4.95 -7.59 C 4.95 -8.99 C 6.16 -9.69 N 8.58 -6.89 C 8.58 -5.49 C 7.37 -4.79 O 6.16 -5.49 C 9.80 -7.59 O 9.80 -8.99 C 11.01 -6.89 Cl 12.22 -7.59 Cl 11.01 -5.49 C 9.80 -4.79 1 2 1 2 3 2 3 4 1 4 5 2 5 6 1 6 1 2 7 8 1 8 9 1 9 10 1 3 10 1 2 7 1 7 11 1 11 12 2 11 13 1 13 14 1 13 15 1 8 16 1";
		var mol = exMod();
		//jsmeApplet.readMolecule(jme); // or document.JME.readMolecule(jme);
                jsmeApplet.readMolFile(mol);
	}

	function readMultipart() {
		var jme = "9 9 C 6.68 -7.15 C 5.47 -6.45 C 4.26 -7.15 C 4.26 -8.55 C 5.47 -9.25 C 6.68 -8.55 C 5.47 -5.05 O- 6.68 -4.35 O 4.26 -4.35 1 2 1 2 3 2 3 4 1 4 5 2 5 6 1 6 1 2 2 7 1 7 8 1 7 9 2|1 0 Na+ 12.21 -6.61";
		jsmeApplet.readMolecule(jme) // or document.JME.readMolecule(jme
	}

	function readReaction() {
		var jme = "3 2 C:1 1.41 -7.12 O:2 1.41 -5.72 Cl 2.63 -7.82 1 2 2 1 3 1|3 2 N:3 5.72 -6.78 C:4 7.12 -6.78 H:5 5.02 -7.99 1 2 1 1 3 1 >> 5 4 C:1 13.51 -6.40 O:2 13.51 -5.00 N:3 14.72 -7.10 C:4 15.94 -6.40 H:5 14.71 -8.50 1 2 2 1 3 1 3 4 1 3 5 1";
		jsmeApplet.readMolecule(jme);
	}

	function getMolfile() {
		var data = document.JME.molFile();
		document.getElementById("jme_output").value = data;

	}
	function getSmiles() {
                var drawing = document.JME.smiles();
                document.form.smi.value = drawing;
	}
	function appendSmiles() {
                var drawing = document.JME.smiles();
                var re = /\./g;
                drawing = drawing.replace(re, " + ");
                drawing = drawing.replace(">>"," --> ");
                document.form.smi.value += drawing;
	}

	function appendSmiles2() {
                //jms("xxsmiles = {1.1}.find(\"SMILES\");");
                //var drawing = jmvar("xxsmiles");
                var drawing = jmvar("{1.1}.find(\"SMILES\")");
                //var re = /\./g;
                //drawing = drawing.replace(re, " + ");
                drawing = drawing.replace(">>"," --> ");
                document.form.smi.value += drawing;
	}

	function appendXYZ2() {
                //jms("xxsmiles = {1.1}.find(\"SMILES/open\");");
                //var drawing = jmvar("xxsmiles");
                var charge  = charge_arrowsdata();
                var drawing = jmvar("{1.1}.find(\"SMILES/open\")");
                //var re = /\./g;
                var xyzdat = jmvar("data({1.1},\"xyz\")");
                //drawing = drawing.replace(re, " + ");
                //drawing = drawing.replace(">>"," --> ");
                drawing = " xyzdata{" + xyzdat.trim().replace(/\n/g,' | ') + "}";
                if (charge!=0.0) {
                   drawing += " ^{" + charge.toString() + "}"
                }
                document.form.smi.value += drawing;
	}

	function convert2XYZ() {
           var i,n,x,m;
           var data = editor.getValue(); // or session.getValue
           var lines = data.split("\n");
           if (data.includes("V2000")) {
              data = lines[3].trim().split(" ")[0];
              n = eval(data);
              data += "\n\n";
              n += 4;
              for (i=4; i<n; i++) {
                 x = lines[i].trim().split(/[ ,]+/);
                 data += x[3] + " "; 
                 data += x[0] + " ";
                 data += x[1] + " ";
                 data += x[2] + "\n";
              }
              editor.setValue(data);
           } 

           if (data.includes("geometry")) {
              n = lines.length;
              m = 0;
              x = false;
              data = "";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                 } else if (lines[i].includes("end")) {
                    x = false;
                 } else if (x) {
                    data += lines[i] + "\n";
                    m += 1;
                 }
              }
              data = m.toString() + "\n\n" + data;
              editor.setValue(data);
           }
        } 

        function symbols_ncharge(symbols,q) {
           var periodic_table_charge = { 'H'  : 1, 'He' : 2, 'Li' : 3, 'Be' : 4, 'B'  : 5, 'C'  : 6, 'N'  : 7, 'O'  : 8, 'F'  : 9, 'Ne' : 10, 'Na' : 11, 'Mg' : 12, 'Al' : 13, 'Si' : 14, 'P'  : 15, 'S'  : 16, 'Cl' : 17, 'Ar' : 18, 'K'  : 19, 'Ca' : 20, 'Sc' : 21, 'Ti' : 22, 'V'  : 23, 'Cr' : 24, 'Mn' : 25, 'Fe' : 26, 'Co' : 27, 'Ni' : 28, 'Cu' : 29, 'Zn' : 30, 'Ga' : 31, 'Ge' : 32, 'As' : 33, 'Se' : 34, 'Br' : 35, 'Kr' : 36, 'Rb' : 37, 'Sr' : 38, 'Y'  : 39, 'Zr' : 40, 'Nb' : 41, 'Mo' : 42, 'Tc' : 43, 'Ru' : 44, 'Rh' : 45, 'Pd' : 46, 'Ag' : 47, 'Cd' : 48, 'In' : 49, 'Sn' : 50, 'Sb' : 51, 'Te' : 52, 'I'  : 53, 'Xe' : 54, 'Cs' : 55, 'Ba' : 56, 'La' : 57, 'Ce' : 58, 'Pr' : 59, 'Nd' : 60, 'Pm' : 61, 'Sm' : 62, 'Eu' : 63, 'Gd' : 64, 'Tb' : 65, 'Dy' : 66, 'Ho' : 67, 'Er' : 68, 'Tm' : 69, 'Yb' : 70, 'Lu' : 71, 'Hf' : 72, 'Ta' : 73, 'W'  : 74, 'Re' : 75, 'Os' : 76, 'Ir' : 77, 'Pt' : 78, 'Au' : 79, 'Hg' : 80, 'Tl' : 81, 'Pb' : 82, 'Bi' : 83, 'Po' : 84, 'At' : 85, 'Rn' : 86, 'Fr' : 87, 'Ra' : 88, 'Ac' : 89, 'Th' : 90, 'Pa' : 91, 'U'  : 92, 'Np' : 93, 'Pu' : 94, 'Am' : 95, 'Cm' : 96, 'Bk' : 97, 'Cf' : 98, 'Es' : 99, 'Fm' : 100, 'Md' : 101, 'No' : 102, 'Lr' : 103, 'Rf' : 104, 'Ha' : 105, 'Sg' : 106, 'Bh' : 107, 'Hs' : 108, 'Mt' : 109 };
           var i;
           var ncharge = -q;
           for (i=0; i<symbols.length; i++) {
               ncharge += periodic_table_charge[symbols[i]];
           }
           return ncharge;
        }

        function makegaussianbasis(basis,basisHZ,katom) {
           var i,aa;
           var periodic_table_charge = { 'H'  : 1, 'He' : 2, 'Li' : 3, 'Be' : 4, 'B'  : 5, 'C'  : 6, 'N'  : 7, 'O'  : 8, 'F'  : 9, 'Ne' : 10, 'Na' : 11, 'Mg' : 12, 'Al' : 13, 'Si' : 14, 'P'  : 15, 'S'  : 16, 'Cl' : 17, 'Ar' : 18, 'K'  : 19, 'Ca' : 20, 'Sc' : 21, 'Ti' : 22, 'V'  : 23, 'Cr' : 24, 'Mn' : 25, 'Fe' : 26, 'Co' : 27, 'Ni' : 28, 'Cu' : 29, 'Zn' : 30, 'Ga' : 31, 'Ge' : 32, 'As' : 33, 'Se' : 34, 'Br' : 35, 'Kr' : 36, 'Rb' : 37, 'Sr' : 38, 'Y'  : 39, 'Zr' : 40, 'Nb' : 41, 'Mo' : 42, 'Tc' : 43, 'Ru' : 44, 'Rh' : 45, 'Pd' : 46, 'Ag' : 47, 'Cd' : 48, 'In' : 49, 'Sn' : 50, 'Sb' : 51, 'Te' : 52, 'I'  : 53, 'Xe' : 54, 'Cs' : 55, 'Ba' : 56, 'La' : 57, 'Ce' : 58, 'Pr' : 59, 'Nd' : 60, 'Pm' : 61, 'Sm' : 62, 'Eu' : 63, 'Gd' : 64, 'Tb' : 65, 'Dy' : 66, 'Ho' : 67, 'Er' : 68, 'Tm' : 69, 'Yb' : 70, 'Lu' : 71, 'Hf' : 72, 'Ta' : 73, 'W'  : 74, 'Re' : 75, 'Os' : 76, 'Ir' : 77, 'Pt' : 78, 'Au' : 79, 'Hg' : 80, 'Tl' : 81, 'Pb' : 82, 'Bi' : 83, 'Po' : 84, 'At' : 85, 'Rn' : 86, 'Fr' : 87, 'Ra' : 88, 'Ac' : 89, 'Th' : 90, 'Pa' : 91, 'U'  : 92, 'Np' : 93, 'Pu' : 94, 'Am' : 95, 'Cm' : 96, 'Bk' : 97, 'Cf' : 98, 'Es' : 99, 'Fm' : 100, 'Md' : 101, 'No' : 102, 'Lr' : 103, 'Rf' : 104, 'Ha' : 105, 'Sg' : 106, 'Bh' : 107, 'Hs' : 108, 'Mt' : 109 };
           var foundHZ = false;
           var str = "basis \"ao basis\" cartesian print\n";

           for (i=0; i<katom.length; i++) {
              aa = katom[i];
              if (periodic_table_charge[aa]<21) {
                 if (basis=='default') { 
                    str += " " + aa + " library \"6-311++G(2d,2p)\"" + "\n";
                 } else {
                    str += " " + aa + " library " + basis + "\n";
                 }
              } else {
                 if (basisHZ=='default') {
                    if (periodic_table_charge[aa]<37) {
                       str += " " + aa + " library aug-cc-pVTZ" + "\n";
                    } else if (periodic_table_charge[aa]<87) {
                       str += " " + aa + " library Def2-TZVPD" + "\n";
                       foundHZ = true;
                    } else {
                       str += " " + aa + " library crenbl_ecp" + "\n";
                       foundHZ = true;
                    }
                 } else {
                    str += " " + aa + " library " + basisHZ + "\n";
                    if (periodic_table_charge[aa]>=37) {
                       foundHZ = true;
                    }
                 } 
              } 
           }
           str += "end\n";

           if (foundHZ) { 
              str += "ecp\n"
              for (i=0; i<katom.length; i++) {
                 aa = katom[i];
                 if (periodic_table_charge[aa]>=37) {
                    if (basisHZ=='default') { 
                       if (periodic_table_charge[aa]<87) {
                          str += " " + aa + " library Def2-TZVPD" + "\n";
                       } else {
                          str += " " + aa + " library crenbl_ecp" + "\n";
                       }
                    } else {
                       str += " " + aa + " library " + basisHZ + "\n";
                    }
                 }
              }
              str += "end\n";
           }
           str += "\n";
           return str;
        }

	function convert2geometry() {
           var i,n,x;
           var symbols = [];
           var xyz     = [];
           var data  = editor.getValue(); // or session.getValue
           var lines = data.split("\n");
           if (!data.includes("geometry")) {
              n = eval(lines[0].trim().split(" ")[0]);
              data = "geometry\n";
              n += 2;
              for (i=2; i<n; i++) {
                 data += lines[i] + "\n";
                 symbols.push(lines[i].trim().split(/[ ,]+/)[0]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[1]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[2]);
                 xyz.push(lines[i].trim().split(/[ ,]+/)[3]);
              }
              data = data.trim() + "\n";
              data += "end\n";
           } else {
              n = lines.length;
              x = false;
              data = "";
              for (i=0; i<n; i++) {
                 if (lines[i].includes("geometry")) {
                    x = true;
                    data += lines[i] + "\n";
                 } else if ((lines[i].includes("end")) && (x)) {
                    x = false;
                    data += lines[i] + "\n";
                 } else if (x) {
                    data += lines[i] + "\n";
                    symbols.push(lines[i].trim().split(/[ ,]+/)[0]);
                    xyz.push(lines[i].trim().split(/[ ,]+/)[1]);
                    xyz.push(lines[i].trim().split(/[ ,]+/)[2]);
                    xyz.push(lines[i].trim().split(/[ ,]+/)[3]);
                 }
              }
           } 
           
           // Add Header
           var katom    = jmvar("{*}.find(\"MF\")").replace(/[0-9]/g,'').trim().split(/[ ,]+/);
           var mformula = jmvar("{*}.find(\"MF\")").replace(/ /g,'');
           var theory  = theory_arrowsdata();
           var basis   = basis_arrowsdata();
           var basisHZ = basisHZ_arrowsdata();
           var xc      = xc_arrowsdata();
           var charge  = charge_arrowsdata();
           var mult    = mult_arrowsdata();
           var calculation_type = calculation_type_arrowsdata();
           var solvation_type   = solvation_type_arrowsdata();
           var jobname = theory + "_" + xc + "_" + mformula;

           x = "title \"swnc: " + calculation_type;
           x += " theory=" + theory;
           x += " xc=" + xc;
           x += " formula=" + mformula;
           x += " charge=" + charge.toString();
           x += " mult=" + mult.toString();
           x += " machinejob:expert" 
           x += "\" \n\n";
           x += "echo\n\n"
           x += "start " + jobname + "\n\n";
           x += "memory 1900 mb\n\n"
           x += "charge " + charge.toString() + "\n\n";
           data = x + data + "\n\n";

           // Add theory
           x = "";
           if ((theory=="pspw") || (theory=="pspw4") || (theory=="paw") || (theory=="paw4")) {
              x = "nwpw\n";
              if ((theory=="paw")||(theory=="paw4")) {
                 x += "pseudopotentials\n";
                 x += " *  library paw_default\n";
                 x += "end\n";
              }
              if (basis=="default") {
                 x += "  cutoff 50.0\n";
              }
              else {
                 x += "  cutoff " + basis + "\n";
              }
              x += "  mult " + mult.toString() + "\n";
              if (xc=="lda")    {x += "  xc vosko";}
              if (xc=="pbe")    {x += "  xc pbe96";}
              if (xc=="blyp")   {x += "  xc blyp";}
              if (xc=="b3lyp")  {x += "  xc b3lyp";}
              if (xc=="pbe0")   {x += "  xc pbe0";}
              if (xc=="m06-2x") {x += "  xc m06-2x";}
              x += "\n";
              x += "  lmbfgs\n";
              x += "end\n\n";

              x += "nwpw\n";
              x += "  simulation_cell\n";
              x += "    fcc 38.0\n";
              if ((theory=="pspw4")||(theory=="paw4")) {x += "    boundary_conditions aperiodic\n";}
              x += "  end\n";
              x += "end\n"; 

              data += x;
      
           } else if (theory=="dft") {

              x = makegaussianbasis(basis,basisHZ,katom);

              x += "dft\n";
              x += "  direct\n";
              x += "  noio\n"; 
              x += "  grid nodisk\n";
              x += "  mult " + mult.toString() + "\n";
              if (xc.includes("pbe0")) { 
                 x += "  xc pbe";
              } else if (xc.includes("pbe")) {
                 x += "  xc xpbe96 cpbe96";
              }
              if (xc.includes("blyp"))   {x += "  xc becke88 lyp";}
              if (xc.includes("b3lyp"))  {x += "  xc b3lyp";}
              if (xc.includes("m06-2x")) {x += "  xc m06-2x";}
              x += "\n";
              if (xc.includes("coarse")) {x += "  grid coarse";}
              if (xc.includes("fine"))   {x += "  grid fine";}
              if (xc.includes("xfine"))  {x += "  grid xfine";}
              x += "\n";
              x += "  iterations 5001\n";
              x += "end\n";

              data += x;

           } else if ((theory=="hf") || (theory=="uhf")) {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) { 
                 x += "scf\n";
                 if (theory=='uhf') {x += "   uhf\n";}
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }

              data += x;

           } else if (theory=="mp2") {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) { 
                 x += "scf\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) { 
                 x += "scf\n";
                 x += "   uhf\n";
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              x += "mp2\n"; 
              x += "   freeze atomic\n"; 
              x += "end\n";
              x += "set cphf:maxiter 1500\n";

              data += x;

           } else if (theory=="ccsd(t)") {
              x  = makegaussianbasis(basis,basisHZ,katom);
              if (mult==1) {
                 x += "scf\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==2) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   doublet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==3) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   triplet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==4) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   quartet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult==5) {
                 x += "scf\n";
                 x += "   rohf\n";
                 x += "   quintet\n";
                 x += "   maxiter 501\n";
                 x += "end\n";
              }
              if (mult>1) { 
                 x += "tce\n";
                 x += "   freeze atomic\n"; 
                 x += "   ccsd(t)\n"; 
                 x += "   io ga\n"; 
                 x += "   2eorb\n"; 
                 x += "   2emet 13\n"; 
                 x += "   tilesize 20\n"; 
                 x += "end\n";
              } else {
                 x += "ccsd\n"; 
                 x += "   freeze atomic\n";
                 x += "   maxiter 51\n";
                 x += "end\n";
              } 

              data += x;
           }

           // define cosmo radii
           var radii=[];
           var j,xx,yy,zz,r,dsigma;
           for (i=0; i<symbols.length; i++) {radii.push(0.0); }
           for (i=0; i<symbols.length; i++) {
              if (symbols[i]=='H') {radii[i] = 1.172; } 
              else if (symbols[i]=='N') {radii[i] = 2.126;}
              else if (symbols[i]=='O') {radii[i] = 1.576;}
              else if (symbols[i]=='F') {radii[i] = 1.28;}
              else if (symbols[i]=='P') {radii[i] = 2.279;}
              else if (symbols[i]=='S') {radii[i] = 2.023;}
              else if (symbols[i]=='Cl'){radii[i] = 1.75;}
              else if (symbols[i]=='Al'){radii[i] = 1.404;}
              else if (symbols[i]=='Si'){radii[i] = 2.457;}
              else if (symbols[i]=='Br'){radii[i] = 2.16;}
              else if (symbols[i]=='I') {radii[i] = 2.32;}
              else if (symbols[i]=='C') { 
                dsigma = true;
                for (j=0; j<symbols.length; j++) {
                   if ((symbols[j]=='C') && (j!=i)) {
                     xx=xyz[3*i]-xyz[3*j]; yy=xyz[3*i+1]-xyz[3*j+1]; zz=xyz[3*i+2]-xyz[3*j+2];
                     r = Math.sqrt(xx*xx + yy*yy + zz*zz);
                     if (r<=1.46) {dsigma = false;}
                   }
                }
                if (dsigma) {
                   radii[i] = 2.096;
                } else {
                   radii[i] = 1.635;
                }
              } else {
                radii[i] = 2.223;
              }
           }


           // Add tasks
           var svnt,nup,ndn;
           var ncharge = symbols_ncharge(symbols,charge);
           var tasks = calculation_type.split("");
           if ((theory=="pspw4") || (theory=="paw") || (theory=="paw4")) {theory="pspw";}
           x = "";
           for (i=0; i<tasks.length; i++) {
              if (tasks[i]=="e") {x += "task "+ theory + " energy ignore\n";}
              if (tasks[i]=="g") {x += "task "+ theory + " gradient\n";}
              if (tasks[i]=="o") {
                 x += "\ndriver; default; maxiter 50; clear; end\n";
                 x += "task "+ theory + " optimize ignore\n";
              }
              if (tasks[i]=="v") {x += "task "+ theory + " freq numerical\n";}
              if (tasks[i]=="w") {x += "task "+ theory + " freq\n";}
              if (tasks[i]=="c") { 
                 if (solvation_type.includes("COSMO-SMD")) { 
                    if (solvation_type.includes(":")) { 
                       svnt = solvation_type.split(":")[1];
                    } else {
                       svnt = "h2o";
                    }
                    x += "cosmo\n"
                    x += "   do_cosmo_smd .true.\n";
                    x += "   solvent " + svnt + "\n";
                    x += "\nend\n"
                    x += "task " + theory + " energy ignore\n";
                 } else if (solvation_type=='COSMO') { 
                    x += "unset dft:converged\n";
                    x += "unset scf:converged\n";
                    x += "cosmo\n";
                    x += "   do_gasphase .true.\n";
                    x += "   rsolv  0.0\n";
                    x += "   ifscrn 2\n";
                    x += "   minbem 3\n";
                    x += "   maxbem 3\n";
                    x += "   radius ";
                    for (j=0; j<radii.length; j++) {
                      x +=  radii[j].toString() + " ";
                    }
                    x += "\nend\n";
                    x += "task " + theory + " energy ignore\n";
                 }
              }
              if (tasks[i]=="b") { 
                 if ((theory=="pspw") && (mult==1)) {
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "nwpw\n";
                    x += "   virtual 8\n";
                    x += "   dplot\n";
                    x += "      orbital 1 homo-restricted.cube\n";
                    x += "      density total density.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw energy ignore\n";
                    x += "task pspw pspw_dplot\n\n";
                    x +=  "nwpw\n";
                    x += "   dplot\n";
                    x += "      vectors " + jobname + ".emovecs\n";
                    x += "      orbital 1 lumo-restricted.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw pspw_dplot\n\n";
                 }
                 if ((theory=="pspw") && (mult>1)) {
                    ndn = (ncharge-mult+1)/2;
                    nup = ndn + mult - 1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x +=  "nwpw\n";
                    x += "   virtual 8\n";
                    x += "   dplot\n";
                    x += "      orbital 1         homo-alpha.cube\n";
                    if (ndn>0) {
                       x += "      orbital 123456789 homo-beta.cube\n";
                    } else {
                       x += "      orbital 1 homo-beta.cube\n";
                    }
                    x += "      density total density.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw energy ignore\n";
                    x += "task pspw pspw_dplot\n\n";
                    x +=  "nwpw\n";
                    x += "   dplot\n";
                    x += "      vectors " + jobname + ".emovecs\n";
                    x += "      orbital 1 lumo-alpha.cube\n";
                    x += "      orbital 123456789 lumo-beta.cube\n";
                    x += "   end\n";
                    x += "end\n";
                    x += "task pspw pspw_dplot\n\n";
                 }
                 if (((theory=="dft")||(theory=="hf")) && (mult==1)) {
                    nup = ncharge/2;
                    ndn = nup+1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" 
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin total\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "  " +  nup.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output homo-restricted.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" 
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin total\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + ndn.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-restricted.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                 }
                 if (((theory=="dft")||(theory=="hf")) && (mult>1)) {
                    ndn = (ncharge-mult+1)/2;
                    nup = ndn + mult - 1;
                    var nup1 = nup + 1;
                    var ndn1 = ndn + 1;
                    x += "\n\n### Generating HOMO and LUMO Gaussian cube files ###\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Alpha_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" ;
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin alpha\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + nup.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output homo-alpha.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Alpha_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n" ;
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin alpha\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + nup1.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-alpha.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE HOMO_Beta_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n";
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin beta\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    if (ndn>0) {
                       x += "   " + ndn.toString() + "\n";
                    } else {
                       x += "   " + ndn1.toString() + "\n";
                    }
                    x += "   gaussian\n";
                    x += "   output homo-beta.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                    x += "dplot\n";
                    x += "   TITLE LUMO_Beta_Orbital\n";
                    x += "   vectors " + jobname + ".movecs\n";
                    x += "   LimitXYZ\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   -15.0 15.0 96\n";
                    x += "   spin beta\n";
                    x += "   orbitals view\n";
                    x += "   1\n";
                    x += "   " + ndn1.toString() + "\n";
                    x += "   gaussian\n";
                    x += "   output lumo-beta.cube\n";
                    x += "end\n";
                    x += "task dplot\n";
                 }

              }
           }
           data += x;

           editor.setValue(data);

        }


	function clearSmiles() {
                document.form.smi.value = ""
	}

        function emailSmiles() {
                var email=('arrows@emsl.pnnl.gov');
                var subject = (document.form.smi.value);
                var subjectEncoded = encodeURIComponent(subject);
                var body = ('I am the body of the feedback that you are sending.');
                var link = 'mailto:'+email+'?subject='+subjectEncoded;
                window.location.href = link;
                //document.write( '<a href="mailto:' + email +
                //                '?subject=' +subject+
                //                '">' + 'Click here to send email to arrows' + '<' + '/a>');
        }

	function getJMEstring() {
		var data = document.JME.jmeFile();
		document.getElementById("jme_output").value = data;
	}


        function entermult() {
           var rr;
           var mult0 = mult_arrowsdata();
           var mult = prompt("Please enter multiplicity:", mult0);
           if (document.form.smi.value.includes("mult{")) {
              rr = document.form.smi.value.split("mult{")[1].split("}")[0];
              rr = "mult{" + rr + "}";
              document.form.smi.value = document.form.smi.value.replace(rr,"");
           }
           document.form.smi.value += " mult{"+mult+"}";
        }
        function entercharge() {
           var rr;
           var charge0 = mult_arrowsdata();
           var charge = prompt("Please enter charge:", charge0);
           if (document.form.smi.value.includes("^{")) {
              rr = document.form.smi.value.split("^{")[1].split("}")[0];
              rr = "^{" + rr + "}";
              document.form.smi.value = document.form.smi.value.replace(rr,"");
           }
           document.form.smi.value += " ^{"+charge+"}";
        }



        function txspressed(button0) {
           var mystr = document.form.smi.value;
           var headstr   = "";
           var tailstr   = "";
           var theorystr = "";
           var xcstr     = "";
           var solvstr   = "";

           if (mystr.includes("theory{") || mystr.includes("xc{") || mystr.includes("solvation_type{")) {
              ss = mystr.trim().split(" ");
              sslen = ss.length;
              for (var i=0; i<sslen; ++i) {
                 if (ss[i].includes("theory{") || ss[i].includes("xc{") || ss[i].includes("solvation_type{")) {
                    tailstr += ss[i] + " "
                 } 
                 else {
                    headstr += ss[i] + " "
                 }
              }
              headstr = headstr.trim();
              tailstr = tailstr.trim();
           }
           else {
              headstr = mystr.trim();
           }

           if (tailstr.includes("theory{")) {
              theorystr = tailstr.split("theory{")[1].split("}")[0].trim();
           }

           if (tailstr.includes("xc{")) {
              xcstr = tailstr.split("xc{")[1].split("}")[0].trim();
           }

           if (tailstr.includes("solvation_type{")) {
              solvstr = tailstr.split("solvation_type{")[1].split("}")[0].trim();
           }

           if (button0=="dft")     { theorystr = "dft"; }
           if (button0=="pspw")    { theorystr = "pspw"; }
           if (button0=="pspw4")   { theorystr = "pspw4"; }
           if (button0=="mp2")     { theorystr = "mp2"; }
           if (button0=="ccsd(t)") { theorystr = "ccsd(t)"; }
           if (button0=="pm3")     { theorystr = "pm3"; }

           if (button0=="lda")    { xcstr = "lda"; }
           if (button0=="pbe")    { xcstr = "pbe"; }
           if (button0=="pbe0")   { xcstr = "pbe0"; }
           if (button0=="blyp")   { xcstr = "blyp"; }
           if (button0=="b3lyp")  { xcstr = "b3lyp"; }
           if (button0=="m06-2x") { xcstr = "m06-2x"; }

           if (button0=="COSMO")     { solvstr = "COSMO"; }
           if (button0=="COSMO-SMD") { solvstr = "COSMO-SMD"; }
           if (button0=="None")      { solvstr = "None"; }

           // remove conflicting options
           if ((theorystr=="mp2") || (theorystr=="ccsd(t)"))  { xcstr = ""; }
           if (((theorystr=="pspw") || (theorystr=="pspw4")) && (xcstr=="m06-2x")) { xcstr = ""; }
           if (((theorystr=="pspw") || (theorystr=="pspw4")) && (solvstr=="COSMO")) { solvstr = ""; }
           if (((theorystr=="pspw") || (theorystr=="pspw4")) && (solvstr=="COSMO-SMD")) { solvstr = ""; }
           if (theorystr=="pm3") { xcstr = ""; solvstr="";}

           // set the button colors
           var color1="background-color:#f8f8ff; color:#298DB4;";
           var color2="background-color:#f8f8ff; color:#74A52B;";
           if (theorystr=="dft") {
               document.getElementById("lda").style     = color1;
               document.getElementById("pbe").style     = color1;
               document.getElementById("pbe0").style    = color1;
               document.getElementById("blyp").style    = color1;
               document.getElementById("b3lyp").style   = color1;
               document.getElementById("m06-2x").style  = color1;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color1;
               document.getElementById("None").style      = color1;
           } else if (theorystr=="pspw") {
               document.getElementById("lda").style     = color1;
               document.getElementById("pbe").style     = color1;
               document.getElementById("pbe0").style    = color1;
               document.getElementById("blyp").style   = color1;
               document.getElementById("b3lyp").style   = color1;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color2;
               document.getElementById("COSMO-SMD").style = color2;
               document.getElementById("None").style      = color1;
           } else if (theorystr=="pspw4") {
               document.getElementById("lda").style     = color1;
               document.getElementById("pbe").style     = color1;
               document.getElementById("pbe0").style    = color1;
               document.getElementById("blyp").style   = color1;
               document.getElementById("b3lyp").style   = color1;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color2;
               document.getElementById("COSMO-SMD").style = color2;
               document.getElementById("None").style      = color1;
           } else if (theorystr=="mp2") {
               document.getElementById("lda").style     = color2;
               document.getElementById("pbe").style     = color2;
               document.getElementById("pbe0").style    = color2;
               document.getElementById("blyp").style   = color2;
               document.getElementById("b3lyp").style   = color2;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color1;
               document.getElementById("None").style      = color1;
           } else if (theorystr=="ccsd(t)") {
               document.getElementById("lda").style     = color2;
               document.getElementById("pbe").style     = color2;
               document.getElementById("pbe0").style    = color2;
               document.getElementById("blyp").style   = color2;
               document.getElementById("b3lyp").style   = color2;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color1;
               document.getElementById("COSMO-SMD").style = color1;
               document.getElementById("None").style      = color1;
           } else if (theorystr=="pm3") {
               document.getElementById("lda").style     = color2;
               document.getElementById("pbe").style     = color2;
               document.getElementById("pbe0").style    = color2;
               document.getElementById("blyp").style   = color2;
               document.getElementById("b3lyp").style   = color2;
               document.getElementById("m06-2x").style  = color2;
               document.getElementById("COSMO").style     = color2;
               document.getElementById("COSMO-SMD").style = color2;
               document.getElementById("None").style      = color2;
           }

           // set the esmiles string
           document.form.smi.value = headstr;
           //if ((theorystr!="") || (xcstr!="") || (solvstr!="")) { document.form.smi.value += " ~ "; }
           if ((headstr.includes("-->") || headstr.includes("==>"))  && (!headstr.includes("~"))) { document.form.smi.value += " ~ "; }
           if (theorystr!="") { document.form.smi.value += " theory{" + theorystr + "}"; }
           if (xcstr!="")     { document.form.smi.value += " xc{" + xcstr + "}"; }
           if (solvstr!="")   { document.form.smi.value += " solvation_type{" + solvstr + "}"; }

        }



</script>

</head>


<body onload="jmolOnLoad()">


	<!-- RECOMMENDED if your web app will not function without JavaScript enabled -->
	<noscript>
		<div
			style="width: 22em; position: absolute; left: 50%; margin-left: -11em; color: red; background-color: white; border: 1px solid red; padding: 4px; font-family: sans-serif">
			Your web browser must have JavaScript enabled in order for this
			application to display correctly.</div>
	</noscript>
        
        <table><tr>
        <td>
            <a href="https://dl.dropboxusercontent.com/s/ttekdmkebqdfjma/arrows4.png"> <img src="https://dl.dropboxusercontent.com/s/ttekdmkebqdfjma/arrows4.png" alt="Copyright Arrows Logo" width="400" height="200"> </a> 
           <font color="298DB4"><p> 75249 Arrows calculations carried out <br>
                                    44658 Molecular calculations in database </p></font>
         </td>
        <td><center> <font color="74A52B" size="+2"> <p><b>EMSL Arrows: A Revolutionary Approach To Materials and Chemical Simulations</b></p></font></center>
        <font color="E8613B"><p align="justify">A scientific service that uses NWChem and chemical computational databases to make materials and chemical modeling accessible via a broad spectrum of digital communications including posts to web APIs, social networks, and traditional email.</p></font><p><a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#">Click here for more information about EMSL Arrows.</a></p> </td>
        </tr></table>
    <br><br>
    <h2>Enter an <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#Introduction_to_ESMILES_-_How_to_Change_Calculation_Theories">esmiles</a>, <a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#ESMILES_Reactions_-_How_to_Calculate_Reaction_Energies"> esmiles reaction</a>, or other Arrows input, then push the "Run Arrows" button.</h2>
    <form action="." name="form"  method="POST">
       <table>
          <tr>
             <td> <input type="text" name="smi" SIZE=120> </td>
             <td> <input type="submit" name="JSME-arrows" value="Run Arrows" style="font-family: sans-serif; font-size: 20px;"></td>
          </tr>
          <tr> 
             <td> <INPUT TYPE="button" VALUE="Append SMILES from JSME Editor" onClick="appendSmiles()"> &nbsp;
                  <INPUT TYPE="button" VALUE="Append SMILES from JSMol Editor" onClick="appendSmiles2()"> &nbsp;
                  <INPUT TYPE="button" VALUE="Append xyzdata{} from JSMol Editor" onClick="appendXYZ2()"> &nbsp;
                  <INPUT TYPE="button" VALUE="no html5" 
                          onClick="document.form.smi.value+=' nohtml5'" > 
                  <INPUT TYPE="button" VALUE="Clear" onClick="clearSmiles()"> </td>
             <td> <INPUT TYPE="button" VALUE="Email Submit" onClick="emailSmiles()"> </td>
          </tr>
       </table>
    </form>
    <br>
    <FORM METHOD="POST" ONSUBMIT="return false;">
       <INPUT TYPE="button" VALUE="theory{dft}" id="dft"
              onClick="txspressed('dft')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw}" id="pspw"
              onClick="txspressed('pspw')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pspw4}" id="pspw4"
              onClick="txspressed('pspw4')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{mp2}" id="mp2"
              onClick="txspressed('mp2')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{ccsd(t)}" id="ccsd(t)"
              onClick="txspressed('ccsd(t)')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="theory{pm3}" id="pm3"
              onClick="txspressed('pm3')"
              style="background-color:#f8f8ff; color:#298DB4;"> <br>
       <INPUT TYPE="button" VALUE="xc{lda}" id="lda"
              onClick="txspressed('lda')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe}" id="pbe"
              onClick="txspressed('pbe')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{pbe0}" id="pbe0"
              onClick="txspressed('pbe0')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{blyp}" id="blyp"
              onClick="txspressed('blyp')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{b3lyp}" id="b3lyp"
              onClick="txspressed('b3lyp')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="xc{m06-2x}" id="m06-2x"
              onClick="txspressed('m06-2x')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO}"  id="COSMO"
              onClick="txspressed('COSMO')"
              onClick="document.form.smi.value+=' solvation_type{COSMO}'" 
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{COSMO-SMD}"  id="COSMO-SMD"
              onClick="txspressed('COSMO-SMD')"
              style="background-color:#f8f8ff; color:#298DB4;">
       <INPUT TYPE="button" VALUE="solvation_type{None}" id="None"
              onClick="txspressed('None')"
              style="background-color:#f8f8ff; color:#298DB4;"> <br>
       <INPUT TYPE="button" VALUE="-->" 
              onClick="document.form.smi.value+=' --> '" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="+" 
              onClick="document.form.smi.value+=' + '" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="~" 
              onClick="document.form.smi.value+=' ~ '" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="1" 
              onClick="document.form.smi.value+='1'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="2" 
              onClick="document.form.smi.value+='2'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="3" 
              onClick="document.form.smi.value+='3'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="4" 
              onClick="document.form.smi.value+='4'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="5" 
              onClick="document.form.smi.value+='5'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="6" 
              onClick="document.form.smi.value+='6'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="7" 
              onClick="document.form.smi.value+='7'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="8" 
              onClick="document.form.smi.value+='8'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="9" 
              onClick="document.form.smi.value+='9'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="0" 
              onClick="document.form.smi.value+='0'" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE=" " 
              onClick="document.form.smi.value+=' '" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="mult" 
              onClick="entermult()" 
              style="background-color:#f8f8ff; color:#298DB4;"> 
       <INPUT TYPE="button" VALUE="charge" 
              onClick="entercharge()" 
              style="background-color:#f8f8ff; color:#298DB4;"> 

    </FORM>
    <br>
    <p><a href="https://arrows.emsl.pnnl.gov/api">Switch to Molecular Editor</a> &nbsp; <a href="https://arrows.emsl.pnnl.gov/api/rxn">Switch to Reaction Editor</a></p>
    <div>
    <table> 
         <tr>
             <td id="appletContainer"></td>
             <td align="center" id="editor" style="height: 500px; width: 750px">some text is here </td>
        </tr> 
    </table>
    </div>

    <table> 
       <tr>
          <td>
             <input type="button" VALUE="&#8601; JSME to JSMol" onClick="jmsmiles()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="&#8601; JSME append to JSMol" onClick="jmasmiles()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="JSMol to JSME &#8599;" onClick="readMolecule()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
          </td>
          <td>
             <input type="button" VALUE="&#8599; JSMol to Editor" onClick="jmoltoeditor()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="Editor to JSMol &#8601;" onClick="jmxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="Editor append to JSMol &#8601;" onClick="jmappendxyz()" style="background-color:#f8f8ff; color:#0000ff; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="XYZ Format" onClick="convert2XYZ()" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="NWChem Format" onClick="convert2geometry()" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="vim" onClick="editor.setKeyboardHandler('ace/keyboard/vim');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="emacs" onClick="editor.setKeyboardHandler('ace/keyboard/emacs');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
             <input type="button" VALUE="ace" onClick="editor.setKeyboardHandler('');" style="background-color:#f8f8ff; color:#00000f; font-size: 14px; font-weight:bold"/>
          </td>
       </tr>
       </tr>
       <tr> 
            <td align="center" id="jsmoldiv"></td>
            <td>
               <table>
                   <tr><td align="center"> JSMol Builder Options </td> </tr>
                   <tr> <td id="jsmolbtns"></td></tr>
                   <tr>
                      <td>
                         <table>
                            <tr>
                               <td>
                                  <table align="center">
                                     <tr>
                                        <td> <input type="button" value="H " onClick="jmpickatom('H')" style="background-color:#f8f8ff; color:#606f7d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="B " onClick="jmpickatom('B')" style="background-color:#f8f8ff; color:#ff6699; font-weight:bold"/> </td>
                                        <td> <input type="button" value="C " onClick="jmpickatom('C')" style="background-color:#f8f8ff; color:#000000; font-weight:bold"/> </td>
                                        <td> <input type="button" value="N " onClick="jmpickatom('N')" style="background-color:#f8f8ff; color:#1f2bd5; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="O " onClick="jmpickatom('O')"  style="background-color:#f8f8ff; color:#e6000d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="F " onClick="jmpickatom('F')"  style="background-color:#f8f8ff; color:#7ed83d; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Al" onClick="jmpickatom('Al')" style="background-color:#f8f8ff; color:#a08c8c; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Si" onClick="jmpickatom('Si')" style="background-color:#f8f8ff; color:#dcaf82; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="P " onClick="jmpickatom('P')"  style="background-color:#f8f8ff; color:#e6640a; font-weight:bold"/> </td>
                                        <td> <input type="button" value="S " onClick="jmpickatom('S')"  style="background-color:#f8f8ff; color:#cccc00; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Cl" onClick="jmpickatom('Cl')" style="background-color:#f8f8ff; color:#23c814; font-weight:bold"/> </td>
                                        <td> <input type="button" value="Br" onClick="jmpickatom('Br')" style="background-color:#f8f8ff; color:#8c191e; font-weight:bold"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" name="atomX1" id="atomX1" value="??" onClick="jmpickatom('X1')"/> </td>
                                        <td> <input type="button" name="atomX2" id="atomX2" value="??" onClick="jmpickatom('X2')"/> </td>
                                        <td> <input type="button" name="atomX3" id="atomX3" value="??" onClick="jmpickatom('X3')"/> </td>
                                        <td> <input type="button" name="atomX4" id="atomX4" value="??" onClick="jmpickatom('X4')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" name="atomX5" id="atomX5" value="??" onClick="jmpickatom('X5')"/> </td>
                                        <td> <input type="button" name="atomX6" id="atomX6" value="??" onClick="jmpickatom('X6')"/> </td>
                                        <td> <input type="button" name="atomX7" id="atomX7" value="??" onClick="jmpickatom('X7')"/> </td>
                                        <td> <input type="button" value="Xx" onClick="jmpickatom('Xx')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" value="Q+" onClick="jms('set picking assignAtom_pl')"</td>
                                        <td> <input type="button" value="Q-" onClick="jms('set picking assignAtom_mi')"</td>
                                     </tr>
                                  </table>
                               <td/>
                               <td>
                                  <table align="center">
                                     <tr>
                                        <td> <input type="button" class="button2" value="Single" onClick="jms('hover on; set picking assignBond_1; hover off')"/> </td>
                                        <td> <input type="button" class="button2" value="Double" onClick="jms('hover on; set picking assignBond_2; hover off')"/> </td>
                                        <td> <input type="button" class="button2" value="Triple" onClick="jms('hover on; set picking assignBond_3; hover off')"/> </td>
                                        <td> <input type="button" class="button2" value="Drag atom" onClick="jms('set picking dragMinimize')"/> </td>
                                        <td> <input type="button" class="button2" value="Reset pointer"  onClick="resetPointer()"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Delete atom" onClick="jms('set picking off; set picking on; set atomPicking true;set picking DELETEATOM')"/> </td>
                                        <td> <input type="button" class="button2" value="Delete bond" onClick="jms('hover on; set picking assignBond_0; hover off')"/> </td>
                                        <td> <input type="button" class="button2" value="Delete molecule" onClick="jmdeletemolecule()"/> </td>
                                        <td> <input type="button" class="button2" value="Docking" onClick="jms('set picking dragMinimizeMolecule')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Move atom"  onClick="jmmoveatom()"/> </td>
                                        <td> <input type="button" class="button2" value="Move molecule"  onClick="jmmovemolecule()"/> </td>
                                        <td> <input type="button" class="button2" value="Rotate molecule"  onClick="jmrotatemolecule()"/> </td>
                                        <td> <input type="button" class="button2" value="Rotate bond"  onClick="jmrotatebond()"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Length" onClick="jms('set picking off;set picking on;set pickingstyle MEASURE; set picking MEASURE DISTANCE')"/> </td>
                                        <td> <input type="button" class="button2" value="Angle" onClick="jms('set picking off;set picking on;set pickingstyle MEASURE; set picking MEASURE ANGLE')"/> </td>
                                        <td> <input type="button" class="button2" value="Torsion" onClick="jms('set picking off;set picking on; set pickingstyle MEASURE; set picking MEASURE TORSION')"/> </td>
                                        <td> <input type="button" class="button2" value="Console" onClick="jms('console;')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" name="jmolspin" id="jmolspin" value="Spin on" onClick="jmspin()"/> </td>
                                        <td> <input type="button" class="button2" name="jmollabel" id="jmollabel" value="Labels on" onClick="jmlabel()"/> </td>
                                        <td> <input type="button" class="button2" name="jmolaxes" id="jmolaxes" value="Axes on" onClick="jmaxes()"/> </td>
                                        <td> <input type="button" class="button2" value="Black label" onClick="jms('color label black;')"/> </td>
                                     </tr>
                                     <tr>
                                        <td> <input type="button" class="button2" value="Minimize " onClick="jms('select xenon;select unselected;minimize steps 100; select *; wireframe 0.15; spacefill 23%; boundbox {*}; centerat boundbox; zoom 0; javascript echo(globalVar)')"/> </td>
                                        <td> <input type="button" class="button2" value="Correct H" onClick="jms('delete hydrogen;calculate hydrogens')"/> </td>
                                        <td> <input type="button" class="button2" name="jmolmodelkit" id="jmolmodelkit" value="ModelKit off"  onClick="jmmodelkit()"/> </td>
                                        <td> <input type="button" class="button2" value="Clean restart"  onClick="jmreset()"/> </td>
                                     </tr>
                                  </table>
                               </td>
                            <tr/>
                         </table>
                      </td>
                   </tr>
                   <tr>
                      <td>
                         <table>
                            <tr>
                               <td> </td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" value="Add H2O" onClick="jmaddsmiles('H2O')"</td>
                               <td> <input type="button" class="button3" value="Add smiles" onClick="jmaddsmiles('Xx')"</td>
                            </tr>
                            <tr>
                               <td> <input type="button" class="button3" name="smilesX1" id="smilesX1" value="smiles?" onClick="jmaddsmiles('X1')"</td>
                               <td> <input type="button" class="button3" name="smilesX2" id="smilesX2" value="smiles?" onClick="jmaddsmiles('X2')"</td>
                               <td> <input type="button" class="button3" name="smilesX3" id="smilesX3" value="smiles?" onClick="jmaddsmiles('X3')"</td>
                            </tr>
                         </table>
                      </td>
                   </tr>
               </table>
            </td>
       </tr> 
    </table>

    <center><font color="443322" size="2"><p> JSME Editor Citation: <a href="http://jcheminf.springeropen.com/articles/10.1186/1758-2946-5-24"> B. Bienfait and P. Ertl, JSME: a free molecule editor in JavaScript, J. Cheminformatics 5:24 (2013)</a> </p></font></center>
    <center><font color="443322" size="2"><p><a href="http://wiki.jmol.org/index.php/JSmol">JSmol: an open-source HTML5 viewer for chemical structures in 3D</a></p></font></center>
    <center><font color="443322" size="2"><p><a href="https://ace.c9.io">ACE: High Performance Code Editor for the Web</a></p></font><br><pre style="font-size:1.0em;color:black"></center>

    <script>
       var editor = ace.edit("editor");
       editor.setTheme("ace/theme/gob");
       editor.session.setMode("ace/mode/fortran");
       editor.resize();
    </script>
 
    
    <table> <tr>
    <td> <font color="443322" size="2"> <p align="justify"> This software service and its documentation were developed at the Environmental Molecular Sciences Laboratory (EMSL) at Pacific Northwest National Laboratory, a multiprogram national laboratory, operated for the U.S. Department of Energy by Battelle under Contract Number DE-AC05-76RL01830. Support for this work was provided by the Department of Energy Office of Biological and Environmental Research, and Department of Defense environmental science and technology program (SERDP). THE SOFTWARE SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE SERVICE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE SERVICE. </p></font> </td>
    <td> <a href="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif"><img src="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif" alt="Arrows Movie"> </a> </td>
    </tr></table>
     Keywords: quantum chemistry calculations - quantum chemistry computations - quantum chemistry - molecular modeling calculations - molecular modeling computations - molecular modeling - chemical modeling - chemical reactions calculations - chemical reactions computations - chemical reactions - NWChem calculations - computational chemistry - NWChem 

<br><br>
<div align="right"><font color="298DB4"> EMSL Arrows API visited 234952 times </font></div>

</body>
</html>
