#!/usr/bin/perl
#
# Copyright (C) 2002 - 2011, Brian Salter-Duke\n";
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

use lib '/srv/arrows/bin';
use strict;
use sqs;

################## qexample ###########################
# This is the main script for a simple call of qsub in the 
# Simple Queuing System (SQS) using the perl TERM::ReadKey
# module. This version prompts the user for all possible 
# arguments that might be added to the call of qsub.
#
#
#
# SQS Version 3.1 - May 2011
#
#
#
#
#

# This block of variables in needed for the call of the subroutine
# in sqs.pm.
my $noofqueues;
my $clustercommand;
my $noremote;
my $wait;
my $sqsdir;
my $bindir;
my $mandir;
my $queue_ref;
my @queue;
my $maxqu_ref;
my @maxqu;
my $maxperuser_ref;
my @maxperuser;
my $quhost_ref;
my @quhost;
my $pool_ref;
my @pool;
my $web_ref;
my @web;
my $remotealias_ref;
my @remotealias;
my $remotehosts_ref;
my @remotehosts;
my @remotecomm;
my $psexe_ref;
my @psexe;
my $psflag_ref;
my @psflag;
my $hostpath_ref;
my %hostpath;
my $webhost;
my $webuser;
my $webserver;

my $i;
my $j;

($noofqueues, $noremote, $wait, $sqsdir, $bindir, $mandir,
  $queue_ref, $maxqu_ref, $maxperuser_ref, $quhost_ref, $pool_ref, 
  $web_ref, $remotealias_ref, $remotehosts_ref, $psexe_ref, 
  $psflag_ref, $hostpath_ref, $webhost, $webuser, $webserver) = 
  &get_configuration_file ( ); 

$clustercommand = 'ssh -f';

for (my $i = 0; $i < $noofqueues; $i++) {
  $queue[$i] = ${$queue_ref}[$i];
  $maxqu[$i] = ${$maxqu_ref}[$i];
  $maxperuser[$i] = ${$maxperuser_ref}[$i];
  $quhost[$i] = ${$quhost_ref}[$i];
  $pool[$i] = ${$pool_ref}[$i];
  $web[$i] = ${$web_ref}[$i];
  $psexe[$i] = ${$psexe_ref}[$i];
  $psflag[$i] = ${$psflag_ref}[$i];
}
for (my $i = 0; $i < $noremote; $i++) {
  $remotealias[$i] = ${$remotealias_ref}[$i];
  $remotehosts[$i] = ${$remotehosts_ref}[$i];
  $remotecomm[$i] = 'ssh -f'
}
%hostpath = %$hostpath_ref;

my $nodefault;
my @allusers;
my $alias;
my $host;
my $comm;
my @qucomm;
my @quloc;
my @loc;
my $count;
my $q;
my $qt;
my $going;
my $serial;
my $qunow;
my $flag;
my $ename;
my $job;
my $pr;
my $nproc;
my $timestring;
my $going1;
my $serial1;
my $qunow1;
my $flag1;
my $ename1;
my $job1;
my $pr1;
my $nproc1;
my $timestring1;
my $killsig;
my $qseek_yes;
my $user = $ENV{USER};
my $date = `date`;
chop $date;

my $inqu = "${sqsdir}/sqs.id";
my $qu = "${sqsdir}/sqs.queue";
my $qutmp = "${sqsdir}/sqs.queue.tmp";
my $pid = "${sqsdir}/sqs.pid";
my $qsub = "${bindir}/qsub";
my $qseek = "${bindir}/qseek";
my $qrun = "${bindir}/qrun";
my $qrls = "${bindir}/qrls";
my $qinit = "${bindir}/qinit";
my $log = "${sqsdir}/sqs.log";
my $userfile = "${sqsdir}/sqs.users";
# Now create @qucomm and @loc.
my $h = `hostname`;
#my $h = `hostname -s`;
chop $h;
$j = 0;
until ($j == $noofqueues) {
   $quloc[$j] = 'l' if $quhost[$j] eq $h;
   $quloc[$j] = 'c' if $quhost[$j] ne $h;
   $qucomm[$j] = '' if $quloc[$j] eq 'l';
   $qucomm[$j] = $clustercommand if $quloc[$j] eq 'c';
   $loc[$j] = 'local' if $quloc[$j] eq 'l';
   $loc[$j] = 'cluster' if $quloc[$j] eq 'c';
   ++$j;
}
for ($j = 0; $j < $noofqueues; $j++) {
   next if $quloc[$j] eq 'c';
   last if $quloc[$j] eq 'l';
}
$nodefault = $j;
$nodefault = 0 if $j == $noofqueues;

#my $nohupfile = 'nohup.out';

sub printversion {
   if ($_[0] eq '-v') {
      my $version = "3.1 - May 2011";
      print "    This is the Simple Queueing System.\n";
      print "    $version\n\n";
      exit;
   }
}

sub forremote {
   my $i;
   for ($i = 0; $i < $noremote; $i++) {
      goto F if $alias eq $remotealias[$i];
   }
   print "    Remote host $alias not found.\n\n";
   exit;

F:
   $comm = $remotecomm[$i];
   $host = $remotehosts[$i];
}

sub make_remote_call {
  my $prog = $_[0];
  shift @ARGV;
  $alias = $ARGV[0];
  forremote ();
  shift @ARGV;
  print "    Inspecting remote machine $alias\n\n";
# print "$comm $host $hostpath{ $alias }/$prog @ARGV\n";
  system "$comm $host $hostpath{ $alias }/$prog @ARGV";
#  This early code treated rsh differently, but rsh is often softlinked
#  to ssh, so it is difficult to test. We recommend using 'ssh -f'
#  and in fact have built it in, so use of 'rsh' involves changing
#  this file, sqs.inc.
#  if ($comm =~ /^ssh/) {
#    system "$comm $host $hostpath{ $alias }/$prog @ARGV";
#  } else {
#    system "$comm $host $hostpath{ $alias }/$prog @ARGV &";
#  }
  sleep 2;
  exit;
}

sub check_queue {
  my $i;
  for ($i = 0; $i < $noofqueues; $i++) {
     goto F if $_[0] eq $queue[$i];
  }
  print "    Queue does not exist.\n\n";
  exit;
F:
$i;
}

sub release_file {
     my $rlsfile = $_[0];
     my $rlsfilet = $_[1];
     my $jobno = $_[2];
     my $time;
     my $rlsno;
     open (FILE,"< $rlsfile") or die "Can not open $rlsfile for reading";
     flock(FILE,1) or die "Can not flock $rlsfile: $!\n";
     open (FILE2, "> $rlsfilet") or die "Can not open $rlsfilet for writing";
     flock(FILE2,2) or die "Can not flock $rlsfilet: $!\n";
     while (<FILE>) {
       chop;
       ($rlsno,$time) = split / /;
       print FILE2 "$_\n" if $rlsno ne $jobno;
     }
     close(FILE);
     close(FILE2);
     rename $rlsfilet, $rlsfile if -e $rlsfilet;
     unlink $rlsfilet if -e $rlsfilet;
}

sub check_qseek {
     my $thispid = $_[1];
     my $c = $_[2];
     my $m = $_[3];
     my $user = $_[4];
     my $q = $_[5];
     my $sig = 0;
     my $got = 0;
     my $test = "/tmp/tt.$$";
     my $grep = `which grep`;
     chop $grep;
     if ( -e $thispid) {
          open (PID, "< $thispid") or die "Can not open $thispid for reading";
          flock(PID,1) or die "Can not flock $thispid: $!\n";
          $sig = (<PID>);
          chop $sig;
          close (PID);
          system ("$c $m $psexe[$q] $psflag[$q] $user | $grep $sig | $grep qseek | $grep -v grep > $test");
#print STDERR "$c $m $psexe[$q] $psflag[$q] $user | $grep $sig | $grep qseek | $grep -v grep\n";
          $got = 1 if -s $test; # qseek is running
     }
     unlink $test if -e $test;
     $_[0] = $sig;
     $got;
}
1;

#
use Term::ReadKey;

my $key;
my $quno;
my $quname;
my $del;
my $todel;
my $hold;
my $tohold;
my $qpr;
my $topr;
my $proc;
my $toproc;
my $p = `pwd`;

unless ($ARGV[0]) {
   print "No job parameter given. Exiting.\n";
   exit;
}

$job = $ARGV[0];
chop $p;

print "This will give you a question and answer session to submit\n";
print "an existing job file.\n\n";
print "You have asked to submit $p/$job\n\n";
print "There are no sanity checks for the priority or nproc value\n";
print "so take care.\n";

print "\nThe following queues are available:-\n";
for ($i = 0; $i < $noofqueues; $i++) {
  $j = $i + 1;
  if ($j == 1) {
     print "Default: ($j)   $queue[$i]\n";
  } else {
     print "         ($j)   $queue[$i]\n";
  }
}
getkey ("\nEnter the queue number you want or just hit enter if you want the default queue: ");
if ($key =~ /[^0-9]/) {
   $quno = 0;
} else {
   $quno = $key - 1;
}
$quname = "-q $queue[$quno]";

getkey ("\n\nDo you want to delete the job file when the job has finished? [(yes)/no]: ");
getyes($del,$todel,'y','-d');

getkey ("\n\nDo you want the job to be held on submission? [yes/(no)]: ");
getyes($hold,$tohold,'n','-h');

getkey ("\n\nDo you want to set a priority for this job? [yes/(no)]: ");
getyes($qpr,$topr,'n','-p');
if ($topr eq '-p') {
   getkey ("\n\nWhat priority do you want to set for this job? [nproc + 12(3)456789]: ");
   $key = 3 if $key =~ /[^1-9]/;
   $topr = "$topr" . " " . "$key";
}
getkey ("\n\nDo you want to set the number of processors for this job? [yes/(no)]: ");
getyes($proc,$toproc,'n','-nproc');
if ($toproc eq '-nproc') {
   getkey ("\n\nWhat number of processors do you want to set for this job? [(1)23456789]: ");
   $key = 1 if $key =~ /[^1-9]/;
   $toproc = "$toproc" . " " . "$key";
}


print "\n\nJob: $qsub $quname $todel $tohold $topr $toproc ${p}/${job} has been queued.\n\n";
exec "$qsub $quname $todel $tohold $topr $toproc ${p}/${job} > /dev/null"  || print "Error in exec ($qsub)\n";

sub getyes {
   $_[0] = $key;
   $_[0] = $_[2] if $key =~ /[^ynYN]/;
   $_[1] = $_[3] if $_[0] =~ /^[yY]/;
   $_[1] = '' if $_[0] =~ /^[nN]/;
}

sub getkey {
   print $_[0];
   ReadMode 'cbreak';
   $key = ReadKey(0);
   ReadMode 'normal';
}

