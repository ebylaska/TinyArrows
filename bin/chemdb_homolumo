#!/usr/bin/env python3

import sys,os,time,pickle,math,getopt,subprocess,pexpect,random,operator
import pymysql as MySQLdb
from math import *

############## machine parameters #########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME           = __file__.split("TinyArrows")[0] + "TinyArrows"
MY_ENV                = os.environ.copy()
MY_ENV["ARROWS_HOME"] = ARROWS_HOME

wrkdir     = ARROWS_HOME + "/Work"
chemdbfile = ARROWS_HOME + "/bin/.chemdb-en"

#tnt_submit = "/srv/arrows/bin/tnt_submit4 "
tnt_submit             = ARROWS_HOME + "/bin/tnt_submit5 "
chemdb_homolumo_image0 = ARROWS_HOME + "/bin/chemdb_homolumo_image0 "
############## machine parameters #########################


bbb = "bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p`%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08b`dgjc.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY/[\x08_pafgtck_afglc\x1e\x1e;\x1efffY0[\x08_pafgtcn_qqumpb\x1e;\x1efffY1[\x08"


def pexpect_command(pcmd,mypassword):
   if (mypassword=="nopassword"):
      #os.system(pcmd)
      try:
         result1 = subprocess.check_output(pcmd,shell=True).decode("utf-8")
         print("pcmd= ",result1)
      except:
         print("cp command failed")
         result1 = "failed"
      return result1 
   else:
      ssh_newkey = 'Are you sure you want to continue connecting'
      # my ssh command line
      p=pexpect.spawn(pcmd,timeout=300)
      i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==0:
          #print "I say yes"
          p.sendline('yes')
          i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==1:
          #print "sending password",
          p.sendline(mypassword)
          p.expect(pexpect.EOF)
      elif i>=2:
          #print "either received key or connection timeout"
          pass
      print(p.before) # print out the result
      return p.before  # return the result

aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec(aaa)

################################################
#                                              #
#             generate_homolumo_image0         #
#                                              #
################################################
def generate_homolumo_image0(molecule_id):
   print("HELLO")
   header =  "Message from arrows..Failed to generate homolumo for id = %d" % molecule_id
   try:
      #os.system('say ' + "\'" + foo + "\'")
      #cmd3 = 'ssh bylaska@we24397.emsl.pnl.gov /Users/bylaska/bin/chemdb_homolumo_image0 %d'  % molecule_id
      #pexpect_command(cmd3,archivepassword)
      cmd6 = chemdb_homolumo_image0  + "%d"  % molecule_id
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
   except:
      print('say ' + "\'" + header + "\'")


#############################################
#                                           #
#             resubmit_homolumo             #
#                                           #
#############################################

def resubmit_homolumo(hup,dbfile,table,id):
   msg     = "resubmit_homolumo for Id=%d\n\n" % id
   vtag    = '"homolumoresubmitjob:%d:homolumoresubmitjob"' % id
   xyzfile = wrkdir + "/" + "homolumo-%d.xyz" % id

   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   checklist = []
   checklist.append(id)
   wherestr =  " where Id=?"
   if (issqlite3):
      sqlcheck = "select smiles,theory,xc,basis,charge,mult,solvation_type,xyz_blob from " + table + wherestr
   else:
      sqlcheck = "select smiles,theory,xc,basis,charge,mult,solvation_type,xyz_blob from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      #dbcon = MySQLdb.connect(host,user,pss,dbfile)
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      row = cur.fetchone()
   
   ### id found? ###
   if (row[0]!=None):
      smiles = row[0]
      theory = row[1]
      xc     = row[2]
      basis  = row[3]
      charge = row[4]
      mult   = row[5]
      solvation_type = row[6]
      xyz_blob       = row[7].decode("utf-8")
      if ("ry" in basis.lower()):
          tt = basis.split()[0]
          uu = eval(tt)/2.0
          basis = "%f" % ((eval(tt)/2.0))
      with open(xyzfile,'w') as ofile:
         ofile.write(xyz_blob)
      cmd0 = ''
      cmd0 += ' -t ' + theory + " -b '" + basis + "' -x " + xc + " -y " + solvation_type
      cmd0 += " -s %d" % mult
      cmd0 += " -q %d" % charge
      cmd0 += " -p mo_coefficients"
      cmd0 += " -v " + vtag
      if "COSMO" in solvation_type:
         cmd0 += " -c cb"
         #cmd0 += " -c ecb"
      else:
         cmd0 += " -c eb"
      cmd1 = tnt_submit + cmd0 + " " + xyzfile
      theoryok = ((theory=="pspw") or (theory=="pspw4") or (theory=="dft") or (theory=="hf") or (theory=="paw") or (theory=="paw4"))

      if theoryok:
         print("cmd1=",cmd1)
         try:
            msg += subprocess.check_output(cmd1,shell=True).decode("utf-8")
         except:
            msg += "\n\nresubmit_homolumo failed and job was not submitted\n\n"
      else:
         msg += "\n\nresubmit_homolumo failed and job was not submitted because bad theory\n\n"

   else:
      msg += "no xyz data for Id=%d\n\n" % id

   ### remove temporary xyzfile ###
   try:
      os.unlink(xyzfile)
   except:
      print("resubmit_homolumo: Failed to remove " + xyzfile)

   return msg



usage = \
"""
chemdb homolumo program

  Usage: chemdb_homolumo arrows_id

  -f regenerate image
  -g regenerate cubes
  -h prints this message

"""

#Database defaults
hup    = hup0
dbfile = "TNT_Project"
table  = "calculations"

regenerate_image = False
nocubegen = True
regeneratecubes = False
opts, args = getopt.getopt(sys.argv[1:], "hfg")
for o, a in opts:
  if '-f' in o:
    regenerate_image = True
  if '-g' in o:
    nocubegen = False
    regeneratecubes = True
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<1):
   print(usage)
   exit()

arrows_id   = args[0]
molecule_id = eval(arrows_id)

if regeneratecubes:
    print("Regenerating cubes. Submitting HOMOLUMO generation job.")
    msg = resubmit_homolumo(hup,dbfile,table,molecule_id)
    print(msg)
    exit()

a = molecule_id%10
b = (molecule_id/10)%10
c = (molecule_id/100)%10
d = (molecule_id/1000)%10
e = (molecule_id/10000)%10
imagedir = archivemachine+"/chemdb_homolumo/%d/%d/%d/%d/%d/" % (a,b,c,d,e)
myfilename  = "%d-homolumo.png" % molecule_id

cmd1   = "scp " + imagedir + myfilename + " " + wrkdir + "/" + myfilename
if ((":/" not in imagedir) and (":/" not in wrkdir)):
   cmd1 = cmd1.replace("scp","cp")
   ppth = wrkdir
   if (not os.path.isdir(ppth)):
      cmd9 = "mkdir -p " +  ppth
      pexpect_command(cmd9,nwpassword)
result = pexpect_command(cmd1,archivepassword)
foundfile = os.path.isfile(wrkdir + "/" + myfilename)
print("FOUNDFILE1=",foundfile,wrkdir+"/"+myfilename)

if (not foundfile) or (regenerate_image): generate_homolumo_image0(molecule_id)

cmd1   = "scp " + imagedir + myfilename + " " + wrkdir + "/" + myfilename
if ((":/" not in imagedir) and (":/" not in wrkdir)):
   cmd1 = cmd1.replace("scp","cp")
   ppth = wrkdir
   if (not os.path.isdir(ppth)):
      cmd9 = "mkdir -p " +  ppth
result = pexpect_command(cmd1,archivepassword)
foundfile = os.path.isfile(wrkdir + "/" + myfilename)

if foundfile and nocubegen:
    print("HOMOLUMOImageFilename: " + wrkdir +"/"+myfilename + " :HOMOLUMOImageFilename")
else:
    print("HOMOLUMO was not found. Submitting HOMOLUMO generation job.")
    msg = resubmit_homolumo(hup,dbfile,table,molecule_id)
    print(msg)


