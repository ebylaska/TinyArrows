#!/usr/bin/python

import sys,os,time,pickle,math,MySQLdb,urllib2,getopt,subprocess,pexpect,random,operator,pymongo,json
import datetime
from math import *

####################### mongoDB #############################
#uri = "mongodb://arrows:reaction@we17860.emsl.pnl.gov:27017"
with open("/srv/arrows/bin/.queue_nwchem",'r') as f: uri = f.readline().strip()
mongo_client              = pymongo.MongoClient(uri)
arrows_db                 = mongo_client.Arrows
esmiles_queue_collection = arrows_db.esmiles_queue_collection
####################### mongoDB #############################

############## machine parameters #########################
babel              = "/usr/bin/babel"
obabel             = "/usr/bin/obabel "
esmiles2xyz        = "/srv/arrows/bin/esmiles2xyz "
wrkdir             = "/srv/arrows/Work"
chemdbfile         = "/srv/arrows/bin/.chemdb-en"
#with open('/srv/arrows/bin/.chemdb','r') as f:
#   hup0            = f.readline().strip()
#   archivemachine  = f.readline().strip()
#   archivepassword = f.readline().strip()
ddrand = random.randint(0,999999)
tmpsmi1 = "tmpsmi1-%d.smi" % ddrand
tmpsmi2 = "tmpsmi2-%d.smi" % ddrand
tmpxyz1 = "tmpxyz1-%d.xyz" % ddrand
############## machine parameters #########################


bbb = "\x08bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08_pafgtck_afglc\x1e\x1e;\x1efffY/[\x08_pafgtcn_qqumpb\x1e;\x1efffY0[\x08"


def is_json(myjson):
  try:
    json_object = json.loads(myjson)
  except ValueError, e:
    return False
  return True


periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}




def evalnum(s):
   try:
      return int(s)
   except ValueError:
      return float(s)


def ireplace(old, new, text):
    idx = 0
    while idx < len(text):
        index_l = text.lower().find(old.lower(), idx)
        if index_l == -1:
            return text
        text = text[:index_l] + new + text[index_l + len(old):]
        idx = index_l + len(old)
    return text


def stripWARNINGS(str):
   str1 = ''
   for s in str.split('\n'):
      if 'WARNING' not in s:
         str1 += s + '\n'
   return str1

aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec aaa



#### geturlresult function ####
def geturlresult(url):
    try:
        proxy = urllib2.ProxyHandler({'http': 'http://squid-proxy.pnl.gov:3128',
                                      'https': 'https://squid-proxy.pnl.gov:3128'}
                                    )
        opener = urllib2.build_opener(proxy)
        urllib2.install_opener(opener)
        connection = urllib2.urlopen(url)
    except urllib2.HTTPError, e:
        return ""
    else:
        return connection.read().rstrip()

def pexpect_command(pcmd,mypassword):
   if (mypassword=="nopassword"):
      os.system(pcmd)
   else:
      ssh_newkey = 'Are you sure you want to continue connecting'
      # my ssh command line
      p=pexpect.spawn(pcmd,timeout=300)
      i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==0:
          print "I say yes"
          p.sendline('yes')
          i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==1:
          print "sending password",
          p.sendline(mypassword)
          p.expect(pexpect.EOF)
      elif i>=2:
          print "either received key or connection timeout"
          pass
      print p.before # print out the result


def smiles2twirl(smiles):
   #result = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/twirl"
   link = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/twirl"
   result = "<a href=\"" + link + "\">TwirlMol Link</a>"
   return result

def smiles2image(smiles):
   #result = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/image"
   link   = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/image"
   result = "<a href=\"" + link + "\">GIF Image Link</a>"
   return result

#### pubchem_smiles2canonicalsmiles function ####
def pubchem_smiles2canonicalsmiles(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/CanonicalSMILES/TXT" % smiles)
    return result


#### pubchem_smiles2iupac function ####
def pubchem_smiles2iupac(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/IUPACName/TXT" % smiles)
    return result

#### pubchem_smiles2cid function ####
def pubchem_smiles2cid(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/cids/TXT" % smiles)
    return result

#### pubchem_smiles2synonyms function ####
def pubchem_smiles2synonyms(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    return result

#### pubchem_smiles2cas function ####
def pubchem_smiles2cas(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    cas = ''
    for s in ss:
       if ((len(s.split('-'))==3) and (cas=='')):
          t = s.split('-')
          if (t[0].isdigit() and t[1].isdigit() and t[2].isdigit()):
             cas = s
       if 'CAS-' in s: cas = s.strip('CAS-')
    return cas

#### pubchem_smiles2kegg function ####
def pubchem_smiles2kegg(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    ckegg = ''
    dkegg = ''
    for s in ss:
       if ((s[0]=='C') and (len(s)==6) and s[1:].isdigit()): ckegg = s
       if ((s[0]=='D') and (len(s)==6) and s[1:].isdigit()): dkegg = s
    kegg = ckegg + " " + dkegg

    return kegg.strip()




#### mol2smiles function ####
def mol2smiles(mol):
   eoln = "\n"
   try:
      molfile    = wrkdir + "/"+tmpsmi1
      smilefile2 = wrkdir + "/"+tmpsmi2
      ofile = open(molfile,'w')
      ofile.write(mol); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -imol " + molfile + " -ocan " + smilefile2
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      smiles2 = "nosmiles"
      sdat = []
      ofile = open(smilefile2,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles2 = sdat[0].split()[0]
   except:
      smiles2 = "nosmiles"
   ### special cases ###
   if ((smiles2=='[HH]') or
       (smiles2=='[H2]') or
       (smiles2=='HH')   or
       (smiles2=='[H].[H]')): smiles2 = '[HH]'
   return smiles2


def removespace_basis(basis):
   if ('ry' not in basis.lower()) and ('hartree' not in basis.lower()):
      basis = basis.replace(" ", "")
   return basis


####################################
#                                  #
#         nametosmiles             #
#                                  #
####################################
def nametosmiles(name):
 try:
   #
   hup    = hup0
   dbfile = "TNT_Project"
   table  = "nametosmiles"
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False
   sqlinsert = "insert into " + table + " (name,smiles) values (?,?);"
   sqlcheck  = "select * from " + table + " where name=?;"
   if (not issqlite3):
      sqlcheck = sqlcheck.replace('?','%s')
      sqlinsert = sqlinsert.replace('?','%s')

   checklist = []
   checklist.append(name)
   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss  = hup.split()[2]
      dbcon = MySQLdb.connect(host,user,pss,dbfile)

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)==0):

         ### try pubchem then spiderchem ###
         smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/%s/property/CanonicalSMILES/TXT" % name)
         #if smiles == "":
         #   rdfdata = geturlresult("http://rdf.chemspider.com/search/%s" % name)
         #   if rdfdata!='':
         #      rdfdata2 = rdfdata.split('<chemdomain:SMILES')[1].split('</chemdomain:SMILES>')[0]
         #      smiles   = rdfdata2.split('<chemdomain:hasValue>')[1].split('</chemdomain:hasValue>')[0].strip()

         if smiles != "":
            ss = smiles.strip().split()
            smiles = ss[0]
            insertlist = []
            insertlist.append(name)
            insertlist.append(smiles)
            print "inserting "+ name + " " + smiles + " into " + table
            cur.execute(sqlinsert,insertlist)
      else:
         smiles = rows[0][2]
   dbcon.close()

 except:
   smiles = ""

 return smiles


####################################
#                                  #
#           esmiles_hasname        #
#                                  #
####################################
def esmiles_hasname(esmiles):
   if (("id=" in esmiles.lower())   or 
       ("inchi=" in esmiles.lower()) or
       ("kegg=" in esmiles.lower()) or
       ("cas=" in esmiles.lower())  or
       ("cid=" in esmiles.lower())  or
       ("csid=" in esmiles.lower())  or
       ("name=" in esmiles.lower()) or
       ("label=" in esmiles.lower())):
      hasname = False
   else:
      try:
         smiles = esmiles.strip().split()[0]
         cmd = obabel + ' -:\"' + smiles + '\" -ocan'
         result = subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT)
         #print "result=",result
         if "0 molecules converted" in result:
            hasname = True
         else:
            hasname = False
      except:
         hasname = False

   return hasname

####################################
#                                  #
#    esmileswithname_to_esmiles    #
#                                  #
####################################

def esmileswithname_to_esmiles(esmiles0):
   try:
      if esmiles_hasname(esmiles0):
         sss = esmiles0.split()
         ss = []
         bopen = False
         for s in sss:
            if "{" in s:    bopen = True
            if (not bopen): ss.append(s)
            if "}" in s:    bopen = False
            #if "{" not in s:
            #   ss.append(s)
         name = ''
         for ll in range(len(ss)-1):
            name += ss[ll] + "%20"
         name += ss[len(ss)-1]

         esmiles1 = nametosmiles(name)

         if esmiles1=='': esmiles1='C'
         bopen = False
         for s in sss:
            if "{" in s:    bopen = True
            if (bopen): esmiles1 += " " + s
            if "}" in s:    bopen = False
            #if "{" in s:
            #   esmiles1 += " " + s
      else:
         esmiles1 = esmiles0

   except:
      esmiles1 = esmiles0

   return esmiles1





#### parsetosmiles function ####
def parsetosmiles(str):
   global xyzdata
   ss = str.split()
   str2 = ''
   for s in ss:
      if 'kegg=' in s:
         kegg = s.split('=')[1]
         mol = geturlresult("http://rest.kegg.jp/get/%s/mol" % kegg)
         smiles = mol2smiles(mol)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'cid=' in s:
         cid = s.split('=')[1]
         smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/%s/property/CanonicalSMILES/TXT" % cid)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'csid=' in s:
         csid = s.split('=')[1]
         #rdfdata = geturlresult("http://rdf.chemspider.com/%s" % csid)
         #if rdfdata=='':
         #   smiles='C'
         #else:
         #   rdfdata2 = rdfdata.split('<chemdomain:SMILES')[1].split('</chemdomain:SMILES>')[0]
         #   smiles   = rdfdata2.split('<chemdomain:hasValue>')[1].split('</chemdomain:hasValue>')[0].strip()
         rdfdata = geturlresult("http://www.chemspider.com/Chemical-Structure.%s.html" % csid)
         if rdfdata=='':
            smiles='C'
         else:
            rdfdata2 = rdfdata.split('<span class="prop_title">SMILES</span>')[1].split('<span class="prop_title">Std. InChi</span>')[0]
            smiles   = rdfdata2.split('ClipboardCopyInit(this, &#39;')[1].split('&#39;')[0].strip()
         str2 += ' '
         str2 += smiles
      elif 'cas=' in s:
         cas = s.split('=')[1]
         smiles = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/smiles" % cas)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'inchi=' in s.lower():
         smiles = InChI2smiles("InChI=" + s.split('=')[1])
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'name=' in s:
         name = s.split('=')[1]
         #smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/%s/property/CanonicalSMILES/TXT" % name)
         smiles = nametosmiles(name)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'label=' in s:
         tag = s.split('=')[1]
         for dd in xyzdata:
            if tag==dd[0]: smiles = dd[1] + ' xyzdata{' + dd[2] + '} '
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      else:
         str2 += ' '
         str2 += s
   str2 = str2.strip()

   return str2




#### cannonicalsmiles function ####
def cannonicalsmiles(smiles):
   eoln = "\n"
   try:
      smilefile  = wrkdir + "/"+tmpsmi1
      smilefile2 = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()

      cmd6 = babel + " -ismi " + smilefile + " -ocan " + smilefile2 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      smiles2 = "nosmiles"
      sdat = []
      ofile = open(smilefile2,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles2 = sdat[0].split()[0]
   except:
      smiles2 = smiles

   ### special cases ###
   if ((smiles=='[HH]') or
       (smiles=='[H2]') or
       (smiles=='HH')   or
       (smiles=='[H].[H]')): smiles2 = '[HH]'

   return smiles2

#### xyz2smiles function ####
def xyz2smiles(xyzfile):
   try:
      smiles = ''
      smilefile = wrkdir + "/"+tmpsmi1
      cmd6 = babel + " -ixyz " + xyzfile + " -ocan " + smilefile
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles = ''
   return smiles

#### cactus_smiles2xyz function ####
def cactus_smiles2xyz(smiles):
    tsmiles = smiles.replace("#","")
    tsmiles = tsmiles.replace("$","")
    result = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/file?format=xyz&get3d=True" % tsmiles)
    return result


#### smiles2xyz function ####
def smiles2xyz(smiles,xyzfile):
   cmd6 = esmiles2xyz + ' "' + smiles.strip() + '" ' +xyzfile
   #os.system(cmd6)
   result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)

   #### if nan's are produced then use cactus smiles2xyz rest interface ####
   with open(xyzfile,'r') as ff:
      test = ff.read()
   if 'nan' in test:
      xyzdata = cactus_smiles2xyz(smiles)
      with open(xyzfile,'w') as ff:
         ff.write(xyzdata+eoln)



#### xyz2InChI function ####
def xyz2InChI(xyzfile):
   inchi = ''
   try:
      inchifile = wrkdir + "/"+ tmpsmi1
      cmd6 = babel + " -ixyz " + xyzfile + " -oinchi " + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

#### xyz2InChIKey function ####
def xyz2InChIKey(xyzfile):
   inchi = ''
   try:
      inchifile = wrkdir + "/"+tmpsmi1
      cmd6 = babel + " -ixyz " + xyzfile + " -oinchikey " + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi


#### smiles2InChI function ####
def smiles2InChI(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -ismi " + smilefile + " -oinchi " + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi


#### smiles2InChIKey function ####
def smiles2InChIKey(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -ismi " + smilefile + " -oinchikey " + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi


#### InChI2smiles function ####
def InChI2smiles(inchi):
   eoln   = "\n"
   smiles = ''
   try:
      inchifile = wrkdir + "/"+tmpsmi2
      smilefile = wrkdir + "/"+tmpsmi1
      ofile = open(inchifile,'w')
      ofile.write(inchi); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -iinchi " + inchifile + " -osmi " + smilefile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT)
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles= ''
   return smiles


def smiles2charge(smiles):
  charge = 0
  ss = smiles.split('[')
  if (len(ss)>1):
     ss = ss[1:]
  else:
     ss = []
  for s in ss:
     inside = s.split(']')[0]
     if   (inside.find("+4")!=-1): charge += 4
     elif (inside.find("-4")!=-1): charge -= 4
     elif (inside.find("+3")!=-1): charge += 3
     elif (inside.find("-3")!=-1): charge -= 3
     elif (inside.find("+2")!=-1): charge += 2
     elif (inside.find("-2")!=-1): charge -= 2
     elif (inside.find("+1")!=-1): charge += 1
     elif (inside.find("-1")!=-1): charge -= 1
     elif (inside.find("+")!=-1):  charge += inside.count('+')
     elif (inside.find("-")!=-1):  charge -= inside.count('-')

  return charge

def esmiles2mult_set(smiles,charge,esmiles):
   mult = smiles2mult(smiles,charge)
   if 'mult{' in esmiles:
      isodd = ((mult%2)==1)
      mult0 = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      isodd0 = ((mult0%2)==1)
      if (isodd==isodd0):
         mult = mult0
      elif (mult0<2) and isodd:
         mult = 1
      elif (mult0<3) and (not isodd):
         mult = 2
      else:
         mult = mult0-1
   return mult

def smiles2mult(smiles,q):
  mult = 1
  smiles2xyz(smiles,wrkdir + "/"+tmpxyz1)
  pcharge = q
  count = 0
  xyzfile = open(wrkdir + "/"+tmpxyz1,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult

def xyz2mult(xyzfilename,q):
  mult = 1
  pcharge = q
  count = 0
  xyzfile = open(xyzfilename,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult




#### functions ####
def xyz_molecular_formula(xyzfilename):
   #
   fdict = {}
   xyzfile = open(xyzfilename,'r')
   n = evalnum(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline().strip()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (fdict.has_key(key)):
         fdict[key] += 1
      else:
         fdict[key] = 1
   xyzfile.close()

   formula = ''
   #ll = fdict.items()
   #for i in range(len(ll)):
   #   formula += ll[i][0] + "%d" % ll[i][1]
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      formula += x[0] + "%d" % x[1]

   return formula



#############################################
#                                           #
#             clean_smiles                  #
#                                           #
#############################################

def clean_smiles(smiles):
   smiles2 = smiles[:]
   tags = ['^','mult','theory','xc','solvation_type','basis','theory_base','xc_base','basis_base','geometry_generation']
   for tt in tags:
      if tt in smiles2:
         tag1 = tt+"{"
         tag2 = "}"
         msg2 = smiles2.split(tag1)
         msg3 = msg2[1].split(tag2)[0]
         smiles2 = smiles2.replace(tag1+msg3+tag2,"")
   return smiles2



################################################
#                                              #
#           lowest_energy_esmiles              #
#                                              #
################################################

#returns only the lowest energy row

def lowest_energy_esmiles(rows):
   if (len(rows)>1):
      newrows = []
      emin = 99.99e99

      ### search for lowest energy with no negative frequencies ###
      negative_freq = True
      for molecule in rows:
         if (molecule[14]<emin) and (molecule[35]==0):
            negative_freq = False
            emin = molecule[14]
            molecule_min = molecule

      ### if there are always negative frequencies then just search for lowest energy entry ###
      if (negative_freq):
         for molecule in rows:
            if (molecule[14]<emin):
               emin = molecule[14]
               molecule_min = molecule

      newrows.append(molecule_min)
   else:
      newrows = rows

   return newrows


#############################################
#                                           #
#             fetch_table_columns           #
#                                           #
#############################################
def fetch_table_columns(hup,dbfile,table):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   getcolumns = "show columns from " + table

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host,user,pss,dbfile)

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(getcolumns)
      rows = cur.fetchall()
   dbcon.close()

   return rows
 except:
   return "nope"


#############################################
#                                           #
#             fetch_esmiles                 #
#                                           #
#############################################

def fetch_esmiles(oprint,hup,dbfile,table,esmiles,submitrequest=True):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   theory_base = ''
   xc_base     = ''
   basis_base  = ''
   if 'ccsd(t)' in esmiles:
      theory='ccsd(t)';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
   elif 'mp2' in esmiles:
      theory='mp2';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
   elif 'pspw4' in esmiles:
      theory='pspw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'pspw' in esmiles:
      theory='pspw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw4' in esmiles:
      theory='paw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw' in esmiles:
      theory='paw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'am1' in esmiles:
      theory='am1';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'pm3' in esmiles:
      theory='pm3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mndo' in esmiles:
      theory='mndo';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mindo3' in esmiles:
      theory='mindo3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'dft' in esmiles:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
   elif 'uhf' in esmiles:
      theory='uhf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
   elif 'hf' in esmiles:
      theory='hf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
   else:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'

   #esmiles1=esmiles.strip()
   esmiles1=esmileswithname_to_esmiles(esmiles.strip())
   ss = esmiles1.split()

   smiles  = clean_smiles(ss[0])
   if "id=" in smiles.lower():
      searchingid = True
      try:
         smiles = smiles.replace(")","")
         smiles = smiles.replace("]","")
         smiles = smiles.replace("(","")
         smiles = smiles.replace("[","")
         id = evalnum(smiles.split("=")[1].strip())
      except:
         id = 1001
      wherestr =  " where Id=?"
      wherestr2 =  " where id=? ;"
      checklist = []
      checklist.append(id)
   else:
      searchingid = False
      csmiles  = cannonicalsmiles(smiles)
      inchi    = smiles2InChI(smiles)    #used because it includes charge in inchi
      inchikey = smiles2InChIKey(smiles) #used because it includes charge in inchikey

      xyzfile = wrkdir + "/" + tmpxyz1
      if ("xyzdata{" in esmiles):
         smiles2xyz(esmiles,xyzfile)
      else:
         smiles2xyz(smiles,xyzfile)
      inchi2    = xyz2InChI(xyzfile)    #inchi2 does not include charge
      inchikey2 = xyz2InChIKey(xyzfile) #inchikey2 does not include charge

      if 'theory{' in esmiles: theory = esmiles.split('theory{')[1].split('}')[0]
      if 'xc{' in esmiles:     xc     = esmiles.split('xc{')[1].split('}')[0]
      if 'basis{' in esmiles:  basis  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
      if 'theory_base{' in esmiles: theory_base = esmiles.split('theory_base{')[1].split('}')[0]
      if 'xc_base{' in esmiles:     xc_base     = esmiles.split('xc_base{')[1].split('}')[0]
      if 'basis_base{' in esmiles:  basis_base  = removespace_basis(esmiles.split('basis_base{')[1].split('}')[0])
      charge = smiles2charge(smiles)
      if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      mult = esmiles2mult_set(smiles,charge,esmiles)
      #mult = smiles2mult(smiles,charge)
      #if 'mult{' in esmiles:   mult   = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      if 'calculation_type' in esmiles: calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]

      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      if 'ry' in  basis_base.lower():      basis_base = '%.1f Ry' % (evalnum(basis_base.strip().split()[0]))
      if 'hartree' in  basis_base.lower(): basis_base = '%.1f Ry' % (2*evalnum(basis_base.strip().split()[0]))

      if (oprint):
         print 
         print "fetch_esmiles table  =",table
         print "fetch_esmiles inchi  =",inchi
         print "fetch_esmiles inchi2 =",inchi2
         print "fetch_esmiles inchikey  =",inchikey
         print "fetch_esmiles inchikey2 =",inchikey2
         print "fetch_esmiles theory=",theory
         print "fetch_esmiles xc    =",xc
         print "fetch_esmiles basis =",basis
      if (theory_base!=''): print "fetch_esmiles theory_base=",theory_base
      if (xc_base!=''):     print "fetch_esmiles xc_base    =",xc_base
      if (basis_base!=''):  print "fetch_esmiles basis_base =",basis_base
      if (oprint):
         print "fetch_esmiles charge=",charge
         print "fetch_esmiles mult  =",mult
         print "fetch_esmiles solvation_type=",solvation_type
         print "fetch_esmiles calculation_type=",calculation_type

      checklist = []
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(theory)
      checklist.append(xc)
      checklist.append(basis)
      if (theory_base!=''): checklist.append(theory_base)
      if (xc_base!=''):     checklist.append(xc_base)
      if (basis_base!=''):  checklist.append(basis_base)
      checklist.append(charge)
      checklist.append(mult)
      checklist.append(solvation_type)
      checklist.append(calculation_type)

      wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?)"
      wherestr += " and theory=?"
      wherestr += " and xc=?"
      wherestr += " and basis=?"
      if (theory_base!=''): wherestr += " and theory_base=?"
      if (xc_base!=''):     wherestr += " and xc_base=?"
      if (basis_base!=''):  wherestr += " and basis_base=?"
      wherestr += " and charge=?"
      wherestr += " and mult=?"
      wherestr += " and solvation_type=?"
      wherestr += " and calculation_type=?"

   wherestr2 =  " where id=? ;"

   if (issqlite3):
      #sqlcheck = "select * from " + table + wherestr
      sqlcheck = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      #sqlcheck = "select * from " + table + wherestr.replace('?','%s')
      sqlcheck = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')


   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host,user,pss,dbfile)

   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])
   dbcon.close()

   return rows2

 except:
   return []








#############################################
#                                           #
#             molecule2esmiles              #
#                                           #
#############################################
def molecule2esmiles(molecule):
   try:
      tt = (molecule[4],molecule[9],molecule[11],molecule[10],molecule[17],molecule[12],molecule[13],molecule[35])
      esmiles = "%s theory{%s} basis{%s} xc{%s} solvation_type{%s} ^{%d} mult{%d} nf{%d}" % tt
   except:
      tt = (molecule[4],molecule[9],molecule[11],molecule[10],molecule[17],molecule[12],molecule[13])
      esmiles = "%s theory{%s} basis{%s} xc{%s} solvation_type{%s} ^{%d} mult{%d} nf{?}" % tt
   
   return esmiles

#############################################
#                                           #
#        esmileswithid_to_esmiles           #
#                                           #
#############################################

def esmileswithid_to_esmiles(hup,dbfile,table,esmiles0):
   esmiles1 = esmiles0
   try:
      if "id=" in esmiles0.lower():
         rows = fetch_esmiles(hup,dbfile,table,esmiles0,False)
         if (len(rows)>0):
            ss          = esmiles0.strip().split()
            tagsoptions = " ".join(ss[1:])
            molecule    = rows[0]
            smiles      = molecule[4]
            charge      = molecule[12]
            mult        = molecule[13]
            xyz         = molecule[23].strip()
            xyzdata     = "xyzdata{" + xyz.replace('\n',' | ') + "}"
            if ("^{" not in tagsoptions):    smiles += " ^{%d}"    % charge
            if ("mult{" not in tagsoptions): smiles += " mult{%d}" % mult
            esmiles1 =  smiles + " " + xyzdata + " " + tagsoptions
         else:
            esmiles1 = "C"
   except:
      esmiles1 = "C"

   return esmiles1

#############################################
#                                           #
#        molecule_to_dict                   #
#                                           #
#############################################
def molecule_to_dict(showcolumns,molecule):
   mdict = {}
   for i in len(molecule):
      mdict[showcolumns[i][0]] = molecule[i]
   return mdict
      





############################# main program ###################################
usage = \
"""
chemdb fetch esmiles program

  Usage: chemdb_fetch_esmiles -h hup_string -d database -t table (esmiles|jsonin)  jsonout

  -h hup_string="machine user password" or enter sqlite3 for sqlite3 db
  -d database = "name of database"
  -t table = "name of calculation table"
  -p print output
  -c gets a calculation
  -h prints this message

"""


dictout = {}
eoln = "\n"
#Database defaults
hup    = hup0
dbfile = "TNT_Project"
table  = "calculations"
if (hup=='sqlite3'):
   issqlite3 = True
else:
   issqlite3 = False

tt      = time.localtime()
oprint = False
getcalculation = False
outfile = ''

opts, args = getopt.getopt(sys.argv[1:], "h:d:t:cph")
for o, a in opts:
  if '-h' in o:
     hup = a
  if '-d' in o:
     dbfile = a
  if '-t' in o:
     table = a
  if '-p' in o:
     oprint = True
  if '-c' in o:
     getcalculation = True
  if o in ("-h","--help"):
    print usage
    exit()

if getcalculation:
   newjob = {}
   queue = esmiles_queue_collection.find(newjob)
   for job in queue:
      print job
   exit()

if (len(args)<1): 
   print usage
   exit()


if (oprint):
   print "chemdb_fetch_esmiles5 mysql version"
   print args

### define the outputfile
if (len(args)>1):
   outfile = args[1]


### load the input file into rstring ###
if (os.path.isfile(args[0])):
   rfile = open(args[0],'r')
   rstring = rfile.read()
   rfile.close()
else:
   rstring = args[0]

if is_json(rstring):
   rdict = json.loads(rstring)
   if "name" in rdict:
      esmiles = rdict['name']
   else:
      esmiles = "C"
   for keyword,option in rdict.iteritems():
      if (keyword != "name"):
         esmiles += " " + keyword +"{"+option+"}"
else:
   esmiles = rstring

if (oprint): print "esmiles="+esmiles


### name{}  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
esmiles = ireplace("NAME", "name", esmiles)
while ((len(esmiles.split("name{"))>1) and (not toolong)):
   msg2 = esmiles.split("name{")
   msg3 = msg2[1].split("}")[0]
   ss = msg3.split()
   rmsg3 = ' name='
   for ll in range(len(ss)-1):
     rmsg3 += ss[ll] + "%20"
   rmsg3 += ss[len(ss)-1]
   rmsg3 += " "
   esmiles  = esmiles.replace("name{"+msg3+"}",rmsg3)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   if (oprint): print "chemdb_fetch_esmiles: too long parsing name{}, exiting.\n"

esmiles   = parsetosmiles(esmiles)
molecules = fetch_esmiles(oprint,hup,dbfile,table,esmiles,False)

#### esmiles found generate non-trivial dictout ####
if (len(molecules)>0):
   showcolumns = fetch_table_columns(hup,dbfile,table)
   for i in range(len(molecules)):
      molecule = molecules[i]
      mdict = {}
      for j in range(len(molecule)):
         moleculej = molecule[j]
         if (showcolumns[j][1]=="datetime") and (molecule[j] is not None):
            mdict[showcolumns[j][0]] = molecule[j].strftime('%Y-%m-%d %H:%M:%S')
         else:
            mdict[showcolumns[j][0]] = molecule[j]
      dictout[i] = mdict

#### esmiles not found add to esmiles_queue_collection ####
else:
   newjob = {}
   newjob['esmiles']     =  esmiles
   newjob['submit_time'] = time.strftime('%Y-%m-%d %H:%M:%S')
   newjob['hup']    = hup
   newjob['dbfile'] = dbfile
   newjob['table'] = table
   esmiles_queue_collection.insert(newjob)


#### print jsonout ####
jsonout = json.dumps(dictout)
if outfile=='':
   print jsonout
else:
   with open(outfile,'w') as ff:
      ff.write(jsonout+eoln)


### remove temporary wrkdir files ###
try:
   os.unlink(wrkdir + "/"+tmpsmi1)
except:
   a = 2
   #print "chemdb_fetch_esmiles5 Failed to remove " + wrkdir + "/"+ tmpsmi1

try:
   os.unlink(wrkdir + "/"+tmpsmi2)
except:
   a = 3
   #print "chemdb_fetch_esmiles5 Failed to remove " + wrkdir + "/"+ tmpsmi2

try:
   os.unlink(wrkdir + "/"+tmpxyz1)
except:
   a = 4
   #print "chemdb_fetch_esmiles5 Failed to remove " + wrkdir + "/"+ tmpxyz1

