#!/usr/bin/env python3

#import sys,os,time,pickle,math,MySQLdb,urllib2,getopt,subprocess,pexpect,random,operator,re,threading,shlex,urllib
import sys,os,time,pickle,math,urllib,getopt,subprocess,pexpect,random,operator,re,threading,shlex,sqlite3,urllib.parse
import pymysql as MySQLdb

from math import *


############## machine parameters #########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME     = __file__.split("TinyArrows")[0] + "TinyArrows"

ARROWS_API_HOME = 'http://localhost:5000/api/'

#################### machine specifics ######################
#babel              = "/usr/bin/babel"
obabel             = "/usr/bin/env obabel "
obgrep             = "/usr/bin/env obgrep "
gnuplot            = "/usr/bin/env gnuplot "

chemdb_balance_reaction = ARROWS_HOME + "/bin/chemdb_balance_reaction9f "
chemdb_predict_reaction = ARROWS_HOME + "/bin/chemdb_predict_reaction "
chemdb_queue            = ARROWS_HOME + "/bin/chemdb_queue "
chemdb_freq             = ARROWS_HOME + "/bin/chemdb_freq -v "
chemdb_freq0            = ARROWS_HOME + "/bin/chemdb_freq "
tnt_submit              = ARROWS_HOME + "/bin/tnt_submit5 "

esmiles2xyz        = ARROWS_HOME + "/bin/esmiles2xyz "
chemdb_add_request = ARROWS_HOME + "/bin/chemdb_add_request "
chemdb_add_Hf      = ARROWS_HOME + "/bin/chemdb_add_Hf "
chemdb_image0      = ARROWS_HOME + "/bin/chemdb_image0 "
chemdb_homolumo    = ARROWS_HOME + "/bin/chemdb_homolumo "
chemdb_reaction_image = ARROWS_HOME + "/bin/chemdb_reaction_image "
chemdb_say            = ARROWS_HOME + "/bin/chemdb_say "
queue_nwchem_em    = ARROWS_HOME + "/bin/queue_nwchem_em "


wrkdir             = ARROWS_HOME + "/Work"
#arrowslogo         = wrkdir + "/arrowslogo2.html"
arrowslogosvg      = ARROWS_HOME + "/Public/static/arrows-static/arrowslogo2.svg"
chemdbfile         = ARROWS_HOME + "/bin/.chemdb-en"
#with open('/srv/arrows/bin/.chemdb','r') as f:
#   hup0            = f.readline().strip()
#   archivemachine  = f.readline().strip()
#   archivepassword = f.readline().strip()
ddrand = random.randint(0,999999)
tmpsmi1 = "tmpsmi1-%d.smi" % ddrand
tmpsmi2 = "tmpsmi2-%d.smi" % ddrand
tmpxyz1 = "tmpxyz1-%d.xyz" % ddrand
tmperxn = "tmperxn-%d.dat" % ddrand
tmperxn2= "tmperxn2-%d.dat" % ddrand
tmperxn3= "tmperxn3-%d.dat" % ddrand
tmpnwout= "tmpnwout-%d.out" % ddrand
calculation_counter = ARROWS_HOME + "/Public/counters/arrowsjobsrun"
############## machine parameters #########################

def use_arrows_api(prog):
   return prog + "--arrows_api=" + ARROWS_API_HOME + " " 

##### Increment calculation counter ######
with open(calculation_counter,'r') as ff: aa = ff.read()
tmpcounter = int(aa.strip()) + 1
with open(calculation_counter,'w') as ff: ff.write("%d" % tmpcounter)
##### Increment calculation counter ######

bbb = "bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p`%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08b`dgjc.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY/[\x08_pafgtck_afglc\x1e\x1e;\x1efffY0[\x08_pafgtcn_qqumpb\x1e;\x1efffY1[\x08"

#http://www.nwchem-sw.org/images/Ray.gif
#http://www.nwchem-sw.org/images/Diamond-nvt.gif
headerfigure = ['<a href="https://dl.dropboxusercontent.com/s/1fdkluujb97tr0b/banner2.gif"><img src="https://dl.dropboxusercontent.com/s/1fdkluujb97tr0b/banner2.gif" alt="Arrows Banner Movie"> </a>', '<a href="https://dl.dropboxusercontent.com/s/en5l9l7l31ggz6e/EMSL_banner.jpg"><img src="https://dl.dropboxusercontent.com/s/en5l9l7l31ggz6e/EMSL_banner.jpg" alt="EMSL Computing Banner" border=0 /></a>', ' <a href="https://dl.dropboxusercontent.com/s/rcoee0m9urc4e3o/Surface-uprot.gif"><img src="https://dl.dropboxusercontent.com/s/rcoee0m9urc4e3o/Surface-uprot.gif" alt="Arrows Movie" width="200" height="200"> </a><a href="https://dl.dropboxusercontent.com/u/11053366/nwchemjobs/Ray.gif"><img src="https://dl.dropboxusercontent.com/u/11053366/nwchemjobs/Ray.gif" alt="Metadynamics Movie" width="200" height="200"> </a> <a href="https://dl.dropboxusercontent.com/u/11053366/diamond-nvt.gif"><img src="https://dl.dropboxusercontent.com/u/11053366/diamond-nvt.gif" alt="Diamond Movie" width="200" height="200"> </a> ', '<a href="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif"><img src="https://dl.dropboxusercontent.com/s/chxhlvamd8ro356/ArrowsBeaker2.gif" alt="Arrows Movie"> </a> ', '<a href="https://dl.dropboxusercontent.com/s/ttekdmkebqdfjma/arrows4.png"> <img src="https://dl.dropboxusercontent.com/s/ttekdmkebqdfjma/arrows4.png" alt="Copyright Arrows Logo" width="250" height="125"> </a> ']


##### define the arrows logos ##### E8613B
ih = random.randint(1,3)
if (ih==1): ih=0

ArrowsHeader0 = '''
   <center> <font color="74A52B" size="+2"> <p><b>Results from an EMSL Arrows Calculation</b></p></font></center>
   <table><tr>
   <td> <center> <font color="298DB4"><p>EMSL Arrows is a revolutionary approach to materials and chemical simulations that uses NWChem and chemical computational databases to make materials and chemical modeling accessible via a broad spectrum of digital communications including posts to web APIs, social networks, and traditional email. </p></font></center>
   </td></tr></table>
   <font color="E8613B"><p> Molecular modeling software has previously been extremely complex, making it prohibative to all but experts in the field, yet even experts can struggle to perform calculations.  This service is designed to be used by experts and non-experts alike.  Experts can carry out and keep track of large numbers of complex calculations with diverse levels of theories present in their workflows.  Additionally, due to a streamlined and easy-to-use input, non-experts can carry out a wide variety of molecular modeling calculations previously not accessible to them.</p></font>
''' 

ArrowsHeader = '''
   <center> <font color="74A52B" size="+2"> <p><b>Results from an EMSL Arrows Calculation</b></p></font></center>
   <table><tr>
   <td> %s </td>
   <td> <center> <font color="298DB4"><p>EMSL Arrows is a revolutionary approach to materials and chemical simulations that uses NWChem and chemical computational databases to make materials and chemical modeling accessible via a broad spectrum of digital communications including posts to web APIs, social networks, and traditional email. </p></font></center>
   </td></tr></table>
   <font color="E8613B"><p> Molecular modeling software has previously been extremely complex, making it prohibative to all but experts in the field, yet even experts can struggle to perform calculations.  This service is designed to be used by experts and non-experts alike.  Experts can carry out and keep track of large numbers of complex calculations with diverse levels of theories present in their workflows.  Additionally, due to a streamlined and easy-to-use input, non-experts can carry out a wide variety of molecular modeling calculations previously not accessible to them.</p></font>
   %s
''' % (headerfigure[4],'<a href="' + ARROWS_API_HOME + '/">Link back to EMSL Arrows API</a>')

ArrowsHeader_QDK = '''
   <center> <font color="4A9FF9" size="+2"> <p><b>Results from an EMSL Arrows MQDK Calculation</b></p></font></center>
   <table><tr>
   <td> %s </td>
   <td> <center> <font color="298DB4"><p>EMSL Arrows is a revolutionary approach to materials and chemical simulations that uses NWChem and chemical computational databases to make materials and chemical modeling accessible via a broad spectrum of digital communications including posts to web APIs, social networks, and traditional email. </p></font></center>
   </td></tr></table>
   <font color="E8613B"><p>  This webpage contains a link to a (Microsoft Quantum Development Kit) YAML file, which has in it the 1-electron and 2-electron integrals over the requested select-CI orbital subspace. To fetch the YAML file scroll down the the "Molecular Calculation" section in the output and then in the "Datafiles:" subsection click on the (download) link next to the YAML file. </p></font>
   %s
''' % (headerfigure[4],'<a href="' + ARROWS_API_HOME + 'qsharp_chem">Link back to Microsoft Quantum Editor</a>')



helpmsg = "</pre>\n"
helpmsg += '<a href="https://dl.dropboxusercontent.com/u/11053366/ArrowsManual/ArrowsManual.htm">Link to Arrows manual</a>'
helpmsg +=" <pre style=\"font-size:1.0em;color:black\">\n"


alogosvg = "</pre>\n"
with open(arrowslogosvg,'r') as f: alogosvg += f.read()
alogosvg += '''

<br>
<a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#">More information about EMSL Arrows</a>
<br>
<br>
<pre style=\"font-size:1.0em;color:darkgreen\">
KEYWORDs -
   reaction: :reaction
   molecule: :molecule
   nmr: :nmr
   predict: :predict
   submitesmiles: :submitesmiles
   nosubmitmissingesmiles
   resubmitmissingesmiles
   submitmachines: :submitmachines
   useallentries
   nomodelcorrect
   eigenvalues: :eigenvalues
   frequencies: :frequencies
   nwoutput: :nwoutput
   xyzfile: :xyzfile
   alleigs: :alleigs
   allfreqs: :allfreqs

   reactionenumerate:
      energytype:[erxn(gas) hrxn(gas) grxn(gas) delta_solvation grxn(aq)] :energytype
      energytype:[kcal/mol kj/mol ev cm-1 ry hartree au] :energytype
      tablereactions:
         reaction: ... :reaction
         reaction: ... :reaction
         ...
      :tablereactions
      tablemethods:
         method: ... :method
         method: ... :method
         ...
      :tablemethods
   :reactionenumerate

   rotatebonds
   xyzinput:
      label:  :label
      xyzdata:
       ... xyz data ...
      :xyzdata
   :xyzinput

   submitHf: :submitHf
   nmrexp: :nmrexp

   findreplace: old text | new text :findreplace

   listnwjobs
   fetchnwjob: :fetchnwjob
   pushnwjob:  :pushnwjob

   printcsv: :printcsv
   printeig: :printeig
   printfreq: :printfreq
   printxyz: :printxyz
   printjobinfo: :printjobinfo
   printnwout: :printnwout
   badids: :badids
   hup_string: 
   database:
   table:
   request_table:
   listallesmiles
   queuecheck                     </pre> 
   <font color="443322" size="1"> This software service and its documentation were developed at the Environmental Molecular Sciences Laboratory (EMSL) at Pacific Northwest National Laboratory, a multiprogram national laboratory, operated for the U.S. Department of Energy by Battelle under Contract Number DE-AC05-76RL01830. Support for this work was provided by the Department of Energy Office of Biological and Environmental Research, and Department of Defense environmental science and technology program (SERDP). THE SOFTWARE SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE SERVICE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE SERVICE. </font>
   <pre style=\"font-size:1.0em;color:black\">

'''


alogo = '''
<br>
<a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#">More information about EMSL Arrows</a>
<br>
<br>
</pre> <pre style=\"font-size:1.0em;color:darkgreen\">


                                                                                    
                                             Qk,                    
                                             Q  R,                  
                                             Q   .KQ                
                                             Q      ?Q              
 w                                           Q        "g            
 Q h                                         @          `W          
 Q   ",                                      @            `k,       
 Q     `g      [Thermodynamics and Kinetics] @               RQ     
 h       `v..................................@     EMSL        KQ   
`k````````x``````````````````````````````````@```````````````````R  
 [      m        [  of Molecules and Solids] @    Arrows      ,#    
 [    4.                                     @              ,R      
 [ ,4                                        @            yR.       
 $^                                          ]          #L          
                                             ]        #^            
                                             ]     ,#^              
                                             ]   ,R.                
                                             ] yR                   
                                             |^                     
KEYWORDs - 
   reaction: :reaction
   molecule: :molecule
   nmr: :nmr
   predict: :predict
   submitesmiles: :submitesmiles
   nosubmitmissingesmiles
   resubmitmissingesmiles
   submitmachines: :submitmachines
   useallentries
   nomodelcorrect
   eigenvalues: :eigenvalues
   frequencies: :frequencies
   nwoutput: :nwoutput
   xyzfile: :xyzfile
   alleigs: :alleigs
   allfreqs: :allfreqs

   reactionenumerate:
      energytype:[erxn(gas) hrxn(gas) grxn(gas) delta_solvation grxn(aq)] :energytype
      energytype:[kcal/mol kj/mol ev cm-1 ry hartree au] :energytype
      tablereactions:
         reaction: ... :reaction
         reaction: ... :reaction
         ...
      :tablereactions
      tablemethods:
         method: ... :method
         method: ... :method
         ...
      :tablemethods
   :reactionenumerate


   rotatebonds
   xyzinput:
      label:  :label
      xyzdata:
       ... xyz data ...
      :xyzdata
   :xyzinput


   submitHf: :submitHf
   nmrexp: :nmrexp

   findreplace: old text | new text :findreplace

   listnwjobs
   fetchnwjob: :fetchnwjob
   pushnwjob: :pushnwjob

   printcsv: :printcsv
   printeig: :printeig
   printfreq: :printfreq
   printxyz: :printxyz
   printjobinfo: :printjobinfo
   printnwout: :printnwout
   badids: :badids
   hup_string: 
   database:
   table:
   request_table:
   listallesmiles
   queuecheck                              </pre>
   <font color="443322" size="1"> This software service and its documentation were developed at the Environmental Molecular Sciences Laboratory (EMSL) at Pacific Northwest National Laboratory, a multiprogram national laboratory, operated for the U.S. Department of Energy by Battelle under Contract Number DE-AC05-76RL01830. Support for this work was provided by the Department of Energy Office of Biological and Environmental Research, and Department of Defense environmental science and technology program (SERDP). THE SOFTWARE SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE SERVICE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE SERVICE. </font>
   <pre style=\"font-size:1.0em;color:black\">

'''

alogowww = '''
</pre>
<br>
<a href="%s">Link to EMSL Arrows API</a>
<br>
<a href="http://www.nwchem-sw.org/index.php/EMSL_Arrows#">More information about EMSL Arrows</a>
<br>
<br>
<pre style=\"font-size:1.0em;color:darkgreen\">
KEYWORDs - 
   reaction: :reaction
   molecule: :molecule
   nmr: :nmr
   predict: :predict
   submitesmiles: :submitesmiles
   nosubmitmissingesmiles
   resubmitmissingesmiles
   submitmachines: :submitmachines
   useallentries
   nomodelcorrect
   eigenvalues: :eigenvalues
   frequencies: :frequencies
   nwoutput: :nwoutput
   xyzfile: :xyzfile
   alleigs: :alleigs
   allfreqs: :allfreqs

   reactionenumerate:
      energytype:[erxn(gas) hrxn(gas) grxn(gas) delta_solvation grxn(aq)] :energytype
      energytype:[kcal/mol kj/mol ev cm-1 ry hartree au] :energytype
      tablereactions:
         reaction: ... :reaction
         reaction: ... :reaction
         ...
      :tablereactions
      tablemethods:
         method: ... :method
         method: ... :method
         ...
      :tablemethods
   :reactionenumerate


   rotatebonds
   xyzinput:
      label:  :label
      xyzdata:
       ... xyz data ...
      :xyzdata
   :xyzinput


   submitHf: :submitHf
   nmrexp: :nmrexp

   findreplace: old text | new text :findreplace

   listnwjobs
   fetchnwjob: :fetchnwjob
   pushnwjob: :pushnwjob

   printcsv: :printcsv
   printeig: :printeig
   printfreq: :printfreq
   printxyz: :printxyz
   printjobinfo: :printjobinfo
   printnwout: :printnwout
   badids: :badids
   hup_string: 
   database:
   table:
   request_table:
   listallesmiles
   queuecheck                              </pre>
   <font color="443322" size="1"> This software service and its documentation were developed at the Environmental Molecular Sciences Laboratory (EMSL) at Pacific Northwest National Laboratory, a multiprogram national laboratory, operated for the U.S. Department of Energy by Battelle under Contract Number DE-AC05-76RL01830. Support for this work was provided by the Department of Energy Office of Biological and Environmental Research, and Department of Defense environmental science and technology program (SERDP). THE SOFTWARE SERVICE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE SERVICE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE SERVICE. </font>
   <pre style=\"font-size:1.0em;color:black\">

''' % (ARROWS_API_HOME)




periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}


periodic_table_mass = {
    'H'  : 1.008,
    'He' : 4.0026,
    'Li' : 7.016,
    'Be' : 9.01218,
    'B'  : 11.00931,
    'C'  : 12.0,
    'N'  : 14.00307,
    'O'  : 15.99491,
    'F'  : 18.9984,
    'Ne' : 19.99244,
    'Na' : 22.9898,
    'Mg' : 23.98504,
    'Al' : 26.98154,
    'Si' : 27.97693,
    'P'  : 30.97376,
    'S'  : 31.97207,
    'Cl' : 34.96885,
    'Ar' : 39.9624,
    'K'  : 38.96371,
    'Ca' : 39.96259,
    'Sc' : 44.95592,
    'Ti' : 45.948,
    'V'  : 50.9440,
    'Cr' : 51.9405,
    'Mn' : 54.9381,
    'Fe' : 55.9349,
    'Co' : 58.9332,
    'Ni' : 57.9353,
    'Cu' : 62.9298,
    'Zn' : 63.9291,
    'Ga' : 68.9257,
    'Ge' : 73.9219,
    'As' : 74.9216,
    'Se' : 78.9183,
    'Br' : 79.9165,
    'Kr' : 83.912,
    'Rb' : 84.9117,
    'Sr' : 87.9056,
    'Y'  : 88.9054,
    'Zr' : 89.9043,
    'Nb' : 92.9060,
    'Mo' : 97.9055,
    'Tc' : 97.9072,
    'Ru' : 101.9037,
    'Rh' : 102.9048,
    'Pd' : 105.9032,
    'Ag' : 106.90509,
    'Cd' : 113.9036,
    'In' : 114.9041,
    'Sn' : 117.9018,
    'Sb' : 120.9038,
    'Te' : 129.9067,
    'I'  : 126.9004,
    'Xe' : 131.9042,
    'Cs' : 132.9051,
    'Ba' : 137.9050,
    'La' : 138.9061,
    'Ce' : 139.9053,
    'Pr' : 140.9074,
    'Nd' : 143.9099,
    'Pm' : 144.9128,
    'Sm' : 151.9195,
    'Eu' : 152.920,
    'Gd' : 157.9241,
    'Tb' : 159.9250,
    'Dy' : 163.9288,
    'Ho' : 164.9303,
    'Er' : 165.930,
    'Tm' : 168.9344,
    'Yb' : 173.9390,
    'Lu' : 174.9409,
    'Hf' : 179.9468,
    'Ta' : 180.948,
    'W'  : 183.9510,
    'Re' : 186.9560,
    'Os' : 189.9586,
    'Ir' : 192.9633,
    'Pt' : 194.9648,
    'Au' : 196.9666,
    'Hg' : 201.9706,
    'Tl' : 204.9745,
    'Pb' : 207.9766,
    'Bi' : 208.9804,
    'Po' : 209.9829,
    'At' : 210.9875,
    'Rn' : 222.0175,
    'Fr' : 223.0198,
    'Ra' : 226.0254,
    'Ac' : 227.0278,
    'Th' : 232.0382,
    'Pa' : 231.0359,
    'U'  : 238.0508,
    'Np' : 237.0482,
    'Pu' : 244.0642,
    'Am' : 243.0614,
    'Cm' : 247.0704,
    'Bk' : 247.0703,
    'Cf' : 251.0796,
    'Es' : 252.0829,
    'Fm' : 257.0950,
    'Md' : 258.0986,
    'No' : 259.1009,
    'Lr' : 262.1100,
    'Rf' : 261.1087,
    'Ha' : 262.1138,
    'Sg' : 266.1219,
    'Bh' : 262.1229,
    'Hs' : 267.1318,
    'Mt' : 268.1388
}




covalentstr = '''
H 32 0 0 0
He 46 0 0 0
Li 133 124 0 0
Be 102 90 85 0
B 85 78 73 0
C 75 67 60 68
N 71 60 54 0
O 63 57 53 0
F 64 59 53 0
Ne 67 96 0 0
Na 155 160 0 0
Mg 139 132 127 0
Al 126 113 111 0
Si 116 107 102 0
P 111 102 94 0
S 103 94 95 0
Cl 99 95 93 0
Ar 96 107 96 0
K 196 193 0 0
Ca 171 147 133 0
Sc 148 116 114 0
Ti 136 117 108 0
V 134 112 106 0
Cr 122 111 103 0
Mn 119 105 103 0
Fe 116 109 102 0
Co 111 103 96 0
Ni 110 101 101 0
Cu 112 115 120 0
Zn 118 120 0 0
Ga 124 116 121 0
Ge 121 111 114 0
As 121 114 106 0
Se 116 107 107 0
Br 114 109 110 0
Kr 117 121 108 0
Rb 210 202 0 0
Sr 185 157 139 0
Y 163 130 124 0
Zr 154 127 121 0
Nb 147 125 116 0
Mo 138 121 113 0
Tc 128 120 110 0
Ru 125 114 103 0
Rh 125 110 106 0
Pd 120 117 112 0
Ag 128 139 137 0
Cd 136 144 0 0
In 142 136 146 0
Sn 140 130 132 0
Sb 140 133 127 0
Te 136 128 121 0
I 133 129 125 0
Xe 131 135 122 0
Cs 232 196 0 0
Ba 196 161 149 0
La 180 139 139	 0
Ce 163 137 131 0
Pr 176 138 128 0
Nd 174 137 0 0
Pm 173 135 0 0
Sm 172 134 0 0
Eu 168 134 0 0
Gd 169 135 132 0
Tb 168 135 0 0
Dy 167 133 0 0
Ho 166 133 0 0
Er 165 133 0 0
Tm 164 131 0 0
Yb 170 129 0 0
Lu 162 131 131	 0
Hf 152 128 122	 0
Ta 146 126 119	 0
W 137 120 115	 0
Re 131 119 110	 0
Os 129 116 109	 0
Ir 122 115 107	 0
Pt 123 112 110	 0
Au 124 121 123 0
Hg 133 142 0 0
Tl 144 142 150 0
Pb 144 135 137 0
Bi 151 141 135 0
Po 145 135 129 0
At 147 138 138 0
Rn 142 145 133 0
Fr 223 218 0 0
Ra 201 173 159 0
Ac 186 153 140 0
Th 175 143 136	 0
Pa 169 138 129	 0
U 170 134 118 0
Np 171 136 116 0
Pu 172 135 0  0
Am 166 135 0 0
Cm 166 136 0 0
Bk 168 139 0 0
Cf 168 140 0 0
Es 165 140 0 0
Fm 167 0 0 0
Md 173 139 0 0
No 176 0 0  0
Lr 161 141 0 0
Rf 157 140 131 0
Db 149 136 126 0
Sg 143 128 121 0
Bh 141 128 119 0
Hs 134 125 118 0
Mt 129 125 113 0
Ds 128 116 112 0
Rg 121 116 118	 0
Cn 122 137 130 0
Uut 136 0 0 0
Fl 143 0 0 0
Uup 162  0 0 0
Lv 175 0 0 0
Uus 165 0 0 0
Uuo 157  0 0 0
'''
rcovalent = {}
for ln in covalentstr.strip().split('\n'):
   ss = ln.split()
   rcovalent[ss[0]] = (0.01*eval(ss[1]),0.01*eval(ss[2]),0.01*eval(ss[3]),0.01*eval(ss[4]))


###########################################
#                                         #
#              bond_order                 #
#                                         #
###########################################
def bond_order(rc1,rc2,r12):
   dd = 0.0001
   cov = (abs(r12-(rc1[0]+rc2[0]))/(rc1[0]+rc2[0]+dd),
          abs(r12-(rc1[1]+rc2[1]))/(rc1[1]+rc2[1]+dd),
          abs(r12-(rc1[2]+rc2[2]))/(rc1[2]+rc2[2]+dd),
          abs(r12-(rc1[3]+rc2[3]))/(rc1[3]+rc2[3]+dd))
   imin = 0
   dmin = cov[0]
   if (cov[1]<dmin):
      dmin = cov[1]
      imin = 1
   if (cov[2]<dmin):
      dmin = cov[2]
      imin = 2
   if (cov[3]<dmin):
      dmin = cov[3]
      imin = 3
   b = 0
   if (cov[imin]<.10): 
      b = 1+imin
      if (imin==3): 
         b = 1.5
   return b



##############################################
#                                            #
#                f_reaction                  #
#                                            #
##############################################
def f_reaction(mformulas,rps,coeffs):
   ss = []
   for a in mformulas:
      ss += re.findall ('[^\d ]+', a)
   symbols = list(set(ss))

   f = {}
   for s in symbols:
      f[s] =  0
      for i in range(len(mformulas)):
         mformula = mformulas[i]
         x        = coeffs[i]
         z        = rps[i]
         ss1 = re.findall ('[^\d ]+', mformula)
         ss2 = re.findall ('[\d]+', mformula)
         for j in range(len(ss1)):
            if ss1[j]==s:
               f[s] += eval(ss2[j])*x*z
   return f

##############################################
#                                            #
#                f2_reaction                 #
#                                            #
##############################################
def f2_reaction(mformulas,rps,coeffs):
   f = f_reaction(mformulas,rps,coeffs)
   f2 = 0
   for key,val in f.items():
      f2 += val*val

   return f2




##############################################
#                                            #
#     print_xyzdat_bond_angle_torsion        #
#                                            #
##############################################

def print_xyzdat_bond_angle_torsion(xyzdat):
   eoln = '\n'
   msg = ''
   if isinstance(xyzdat,bytes): xyzdat = xyzdat.decode("utf-8")
   lines = xyzdat.strip().split("\n")
   nion = eval(lines[0])

   symbols = []
   xyz = []
   for ll in lines[2:]:
      ss = ll.split()
      symb = ss[0].strip()
      x = eval(ss[1]); y = eval(ss[2]); z = eval(ss[3])
      symbols.append(symb)
      xyz.append(x)
      xyz.append(y)
      xyz.append(z)
   msg += "  Number of Atoms = %d\n " % nion

   ### determing bonds ###
   count = 1
   geomstrings = []
   #print "  Id1 Element1   Id2 Element2  Distance"
   #print "-------------------------------------------------"
   for jj in range(nion):
      for ii in range(jj+1,nion):
         xj = xyz[3*jj]; yj = xyz[3*jj+1]; zj = xyz[3*jj+2]
         xi = xyz[3*ii]; yi = xyz[3*ii+1]; zi = xyz[3*ii+2]
         dx = xi-xj
         dy = yi-yj
         dz = zi-zj
         r = math.sqrt(dx*dx + dy*dy + dz*dz)

         rci   = rcovalent[symbols[ii]]
         rcj   = rcovalent[symbols[jj]]
         
         if (bond_order(rci,rcj,r)>0):
            sj = symbols[jj] +"%d" % (jj+1)
            si = symbols[ii] +"%d" % (ii+1)
            tstr = "%5d Stretch %9s %5s %28.5f" % (count,sj,si,r)
            geomstrings.append(tstr)
            count += 1

   for jj in range(nion):
      for ii in range(nion):
         for kk in range(ii+1,nion):
            if (kk!=ii) and (kk!=jj) and (ii!=jj):
               xi = xyz[3*ii]; yi = xyz[3*ii+1]; zi = xyz[3*ii+2]
               xj = xyz[3*jj]; yj = xyz[3*jj+1]; zj = xyz[3*jj+2]
               xk = xyz[3*kk]; yk = xyz[3*kk+1]; zk = xyz[3*kk+2]
               dxij = xi-xj
               dyij = yi-yj
               dzij = zi-zj
               rij = math.sqrt(dxij*dxij + dyij*dyij + dzij*dzij)

               dxkj = xk-xj
               dykj = yk-yj
               dzkj = zk-zj
               rkj = math.sqrt(dxkj*dxkj + dykj*dykj + dzkj*dzkj)

               rci   = rcovalent[symbols[ii]]
               rcj   = rcovalent[symbols[jj]]
               rck   = rcovalent[symbols[kk]]
               #if (rij<=2.5) and (rkj<=2.5):
               if ((bond_order(rci,rcj,rij)>0) and (bond_order(rck,rcj,rkj)>0)):
                  cstheta = (dxij*dxkj + dyij*dykj + dzij*dzkj)/(rij*rkj)
                  theta = math.acos(cstheta)*180.0/math.pi
                  sk = symbols[kk] +"%d" % (kk+1)
                  sj = symbols[jj] +"%d" % (jj+1)
                  si = symbols[ii] +"%d" % (ii+1)
                  tstr = "%5d Bend    %9s %5s %5s %22.5f" % (count,si,sj,sk,theta)
                  geomstrings.append(tstr)
                  count += 1

   for ii in range(nion):
      for jj in range(nion):
         for kk in range(nion):
            for ll in range(ii+1,nion):
               if (ii!=jj) and (ii!=kk) and (ii!=ll) and (jj!=kk) and (jj!=ll) and (kk!=ll):
                  xi = xyz[3*ii]; yi = xyz[3*ii+1]; zi = xyz[3*ii+2]
                  xj = xyz[3*jj]; yj = xyz[3*jj+1]; zj = xyz[3*jj+2]
                  xk = xyz[3*kk]; yk = xyz[3*kk+1]; zk = xyz[3*kk+2]
                  xl = xyz[3*ll]; yl = xyz[3*ll+1]; zl = xyz[3*ll+2]

                  dxij = xj-xi
                  dyij = yj-yi
                  dzij = zj-zi
                  rij = math.sqrt(dxij*dxij + dyij*dyij + dzij*dzij)

                  dxjk = xk-xj
                  dyjk = yk-yj
                  dzjk = zk-zj
                  rjk = math.sqrt(dxjk*dxjk + dyjk*dyjk + dzjk*dzjk)

                  dxkl = xl-xk
                  dykl = yl-yk
                  dzkl = zl-zk
                  rkl = math.sqrt(dxkl*dxkl + dykl*dykl + dzkl*dzkl)
               
                  rci   = rcovalent[symbols[ii]]
                  rcj   = rcovalent[symbols[jj]]
                  rck   = rcovalent[symbols[kk]]
                  rcl   = rcovalent[symbols[ll]]
                  if ((bond_order(rci,rcj,rij)>0) and (bond_order(rcj,rck,rjk)>0) and (bond_order(rck,rcl,rkl)>0)):
                     dy = dxij*(dyjk*dzkl-dykl*dzjk)+dyij*(dzjk*dxkl-dzkl*dxjk)+dzij*(dxjk*dykl-dxkl*dyjk)
                     dy = dy*math.sqrt(dxjk**2+dyjk**2+dzjk**2)
                     dx = (dyjk*dzkl-dykl*dzjk)*(dyij*dzjk-dyjk*dzij)+(dzjk*dxkl-dzkl*dxjk)*(dzij*dxjk-dzjk*dxij)+(dxjk*dykl-dxkl*dyjk)*(dxij*dyjk-dxjk*dyij)
                     f = math.atan2(dy,dx)*180.0/math.pi
                     sl = symbols[ll] +"%d" % (ll+1)
                     sk = symbols[kk] +"%d" % (kk+1)
                     sj = symbols[jj] +"%d" % (jj+1)
                     si = symbols[ii] +"%d" % (ii+1)
                     tstr = "%5d Dihedral %8s %5s %5s %5s %16.5f" % (count,si,sj,sk,sl,f)
                     geomstrings.append(tstr)
                     count += 1
   msg += eoln
   msg += "  Units are Angstrom for bonds and degrees for angles" + eoln
   msg += eoln
   msg += "      Type          I     J     K     L     M      Value" + eoln
   msg += "      ----------- ----- ----- ----- ----- ----- ----------" + eoln
   for ss in geomstrings:
      msg += ss + eoln
   msg += eoln

   return msg


###########################################
#                                         #
#          xyz_bonding_strings            #
#                                         #
###########################################

def xyz_bonding_strings(xyzfilename):

   #### read xyz file ####
   fdict = {}
   verts  = []
   symbol = []
   rxyz   = []
   xyzfile = open(xyzfilename,'r')
   n = eval(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (key in fdict):
         fdict[key] += 1
      else:
         fdict[key] = 1
      line = line.split()
      symbol.append(line[0].strip())
      tple = ('atom',(0.0, line[0].strip(), '', 0, 0, -1))
      verts.append(tple)
      rxyz.append(eval(line[1]))
      rxyz.append(eval(line[2]))
      rxyz.append(eval(line[3]))
   xyzfile.close()

   #### generate mformula ####
   mformula = ''
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      mformula += x[0] + "%d" % x[1]

   #### generate adjacency matrix ####
   adjmat = []
   rij    = []
   for i in range(n):
      rij.append([0.0]*n)
      adjmat.append([0]*n)
   for i in range(n):
      for j in range(n):
         symi = symbol[i]
         symj = symbol[j]
         rci   = rcovalent[symbol[i]]
         rcj   = rcovalent[symbol[j]]
         dx = rxyz[3*i]   - rxyz[3*j]
         dy = rxyz[3*i+1] - rxyz[3*j+1]
         dz = rxyz[3*i+2] - rxyz[3*j+2]
         r = math.sqrt(dx*dx + dy*dy + dz*dz)
         rij[i][j] = r
         if i!=j:
            adjmat[i][j] = bond_order(rci,rcj,r)

   #### generate bonding ####
   covbondcount = {}
   bondcount = {}
   for i in range(n):
      for j in range(i+1,n):
         if (adjmat[i][j] > 0):
            symi = symbol[i]
            symj = symbol[j]
            if (symi<symj):
               key = symi.strip() + symj.strip()
            else:
               key = symj.strip() + symi.strip()

            if (key in bondcount):
               bondcount[key] += 1
            else:
               bondcount[key] = 1
            covkey = key + "(%.1f)" % (adjmat[i][j])
            if (covkey in covbondcount):
               covbondcount[covkey] += 1
            else:
               covbondcount[covkey] = 1
   bonding = ''
   for x  in sorted(bondcount.items(), key=operator.itemgetter(0)):
      bonding += x[0] + "%d" % x[1]
   covbonding = ''
   for x  in sorted(covbondcount.items(), key=operator.itemgetter(0)):
      covbonding += x[0] + "=%d," % x[1]
   covbonding = covbonding.strip(',')

   #### generate bonding2 ####
   bond2count = {}
   for i in range(n):
      for j in range(n):
         for k in range(j+1,n):
            if (adjmat[i][j] > 0) and (adjmat[i][k] > 0):
               symi = symbol[i]
               symj = symbol[j]
               symk = symbol[k]
               if (symj<symk):
                  key = symj.strip() + symi.strip() + symk.strip()
               else:
                  key = symk.strip() + symi.strip() + symj.strip()
               if (key in bond2count):
                  bond2count[key] += 1
               else:
                  bond2count[key] = 1
   bonding2 = ''
   for x  in sorted(bond2count.items(), key=operator.itemgetter(0)):
      bonding2 += x[0] + "%d" % x[1]

   #### generate neighbors ####
   neighborcount = {}
   for i in range(n):
      neighbors = []
      for j in range(n):
         if (adjmat[i][j] > 0):
            neighbors.append(symbol[j].strip())
      neighbors.sort()
      key = symbol[i].strip() + "(" +  ",".join(neighbors) + ")"
      if (key in neighborcount):
         neighborcount[key] += 1
      else:
         neighborcount[key] = 1
   neighbors = ''
   for x  in sorted(neighborcount.items(), key=operator.itemgetter(0)):
      neighbors += x[0] + "=%d," % x[1]
   neighbors = neighbors.strip(',')

   return  (mformula + ":" + bonding + ":" + bonding2 + ":" + neighbors,  covbonding)



def evalnum(s):
   try:
      return int(s)
   except ValueError:
      return float(s)

def isevalnum(s):
   try:
      x = evalnum(s)
      return True
   except:
      return False


def ireplace(old, new, text):
    idx = 0
    while idx < len(text):
        index_l = text.lower().find(old.lower(), idx)
        if index_l == -1:
            return text
        text = text[:index_l] + new + text[index_l + len(old):]
        idx = index_l + len(old)
    return text


def stripWARNINGS(str):
   str1 = ''
   for s in str.split('\n'):
      if 'WARNING' not in s:
         str1 += s + '\n'
   return str1

aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec(aaa)
print("hup0=",hup0)
print("dbfile0=",dbfile0)
print("archivemachine=",archivemachine)
print("archivepassword=",archivepassword)

#def readchemdb(filename):
#   with open(filename,'rb') as ff: paw1 = pickle.loads(ff.read())
#   paw = ''
#   for b in paw1:
#      a = int( (-99 + math.sqrt(99*99-4*9*(-999-b)))/(2*9) )
#      paw += chr(a)
#   rrr = []
#   for a in paw.split('\n'):
#      rrr.append(a.strip())
#   return rrr
#hhh = readchemdb(chemdbfile)
#hup0            = hhh[0]
#dbfile0         = hhh[1]
#archivemachine  = hhh[2]
#archivepassword = hhh[3]
#


#### geturlresult function ####
def geturlresult(url):
    try:
        proxy = urllib2.ProxyHandler({'http': 'http://squid-proxy.pnl.gov:3128',
                                      'https': 'https://squid-proxy.pnl.gov:3128'}
                                    )
        opener = urllib2.build_opener(proxy)
        urllib2.install_opener(opener)
        connection = urllib2.urlopen(url)
    except urllib2.HTTPError(e):
        return ""
    else:
        return connection.read().rstrip()

def pexpect_command(pcmd,mypassword):
   if (mypassword=="nopassword"):
      #os.system(pcmd)
      result1 = subprocess.check_output(pcmd,shell=True).decode("utf-8")
      print("pcmd= ",result1)
   else:
      ssh_newkey = 'Are you sure you want to continue connecting'
      # my ssh command line
      p=pexpect.spawn(pcmd,timeout=300)
      i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==0:
          print("I say yes")
          p.sendline('yes')
          i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==1:
          print("sending password")
          p.sendline(mypassword)
          p.expect(pexpect.EOF)
      elif i>=2:
          print("either received key or connection timeout")
          pass
      print(p.before) # print out the result


def cleanxyzdata(foo):
   while ("xyzdata{" in foo) and ("}" in foo):
      msg0 = foo.split("xyzdata{")[1].split("}")[0]
      foo  = foo.replace('xyzdata{' + msg0 + '}','')
   return foo


################################################
#                                              #
#             text2speech                      #
#                                              #
################################################
def cleanfoo(foo):
   foo = foo.replace('(','').replace(')','')
   while ("xyzdata{" in foo) and ("}" in foo):
      msg0 = foo.split("xyzdata{")[1].split("}")[0]
      foo  = foo.replace('xyzdata{' + msg0 + '}','')
   return foo

# calls the mac osx system call say with foo string.
def text2speech(foo):
   try:
      os.system(chemdb_say + "\'" + foo + "\'")
      #thread = threading.Thread(target=os.system, args=(chemdb_say + "\'" + foo + "\'"))
      #thread.daemon = True                            # Daemonize thread
      #thread.start()        
   except:
      print('say ' + "\'" + foo + "\'")


class text2speech_Threading(object):
    def __init__(self, foo="nada"):
        self.foo = cleanfoo(foo)
        thread = threading.Thread(target=self.run, args=())
        thread.daemon = True                            # Daemonize thread
        thread.start()                                  # Start the execution
    def run(self):
        os.system(chemdb_say + "\'" + self.foo + "\'")

def resubmit_homolumo_Background(myid):
   cmd99 = chemdb_homolumo + "-g %d" % myid
   cmd99args = shlex.split(cmd99)
   try:
      #result99 = subprocess.check_output(cmd99,shell=True)
      p = subprocess.Popen(cmd99args,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
   except:
      result99 = "\n\nchemdb_homolumo failed and job was not submitted\n\n"


def subprocess_Background(cmd99):
   #cmd9 = cmd99 + " >> " + wrkdir + "/BACKGROUNDJOBS & "
   #cmd99args = shlex.split(cmd99)
   try:
      #result99 = subprocess.check_output(self.cmd99,shell=True)
      #p = subprocess.Popen(cmd99args,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
      #os.system(cmd9)
      result99 = subprocess.check_output(cmd99,shell=True).decode("utf-8")
   except:
      result99 = "\n\nsubprocess_Background Failed\n\n"





def nwoutputfromid(id):
   ss = '%d' % id
   #link = "https://arrows.emsl.pnnl.gov/api/nwoutput/%22id=" + ss + "%22"
   link = ARROWS_API_HOME + "nwoutput/%22id=" + ss + "%22"
   result = "<a target=\"_blank\" href=\"" + link + "\">Link to NWChem Output</a>"
   return result

def nwoutputfromid_download(id):
   ss = '%d' % id
   link = ARROWS_API_HOME + "nwoutput_download/%22id=" + ss + "%22"
   result = "<a target=\"_blank\" href=\"" + link + "\">(download)</a>"
   return result

def imageresetfromid(id):
   ss = '%d' % id
   #link = "https://arrows.emsl.pnnl.gov/api/image_reset/" + ss
   #result = "<a target=\"_blank\" href=\"" + link + "\">image reset</a>"
   link = "api/image_reset/" + ss
   result = "image_resset: " + link
   return result


def smartsinesmiles(smarts,esmiles):
   result = ''
   try:
      fname00 = wrkdir + "/harry.smi" 
      with open(fname00,'w') as ff:
         ff.write(esmiles + "\n")
      #cmd1 = obgrep + ' -c \"' + smarts + '\" ' + fname00
      cmd1 =  obabel + ' -ismi ' + fname00 + ' -osmi -s \"' + smarts + '\"'
      result = subprocess.check_output(cmd1,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      if ("0 molecules converted" in result):
         hassmarts = False
      else:
         hassmarts = True
   except:
      hassmarts = False

   return hassmarts



def smiles2twirl(smiles):
   #result = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/twirl"
   link = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/twirl"
   result = "<a target=\"_blank\" href=\"" + link + "\">TwirlMol Link</a>"
   return result

def smiles2image(smiles):
   #result = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/image"
   link   = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/image"
   result = "<a target=\"_blank\" href=\"" + link + "\">GIF Image Link</a>"
   return result

def smiles2nmrdb(smiles):
   #result = "http://cactus.nci.nih.gov/chemical/structure/"+ smiles + "/image"
   link1   = "http://www.nmrdb.org/service.php?name=nmr-1h-prediction&smiles="+ smiles
   link2   = "http://www.nmrdb.org/service.php?name=nmr-13c-prediction&smiles="+ smiles
   link3   = "http://www.nmrdb.org/service.php?name=cosy-prediction&smiles="+smiles
   link4   = "http://www.nmrdb.org/service.php?name=hmbc-prediction&smiles="+smiles
   result  = "\n"
   result += "<a target=\"_blank\" href=\"" + link1 + "\">Link to 1H NMR prediction from nmrdb</a>\n"
   result += "<a target=\"_blank\" href=\"" + link2 + "\">Link to 13C NMR prediction from nmrdb</a>\n"
   result += "<a target=\"_blank\" href=\"" + link3 + "\">Link to COSY prediction from nmrdb</a>\n"
   result += "<a target=\"_blank\" href=\"" + link4 + "\">Link to HSQC/HMBC prediction from nmrdb</a>\n"
   result += "\n"
   return result


#### pubchem_smiles2canonicalsmiles function ####
def pubchem_smiles2canonicalsmiles(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/CanonicalSMILES/TXT" % smiles)
    return result


#### pubchem_smiles2iupac function ####
def pubchem_smiles2iupac(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/IUPACName/TXT" % smiles)
    return result

#### pubchem_smiles2cid function ####
def pubchem_smiles2cid(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/cids/TXT" % smiles)
    return result

#### pubchem_smiles2synonyms function ####
def pubchem_smiles2synonyms(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    return result

#### pubchem_smiles2cas function ####
def pubchem_smiles2cas(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    cas = ''
    for s in ss:
       if ((len(s.split('-'))==3) and (cas=='')):
          t = s.split('-')
          if (t[0].isdigit() and t[1].isdigit() and t[2].isdigit()):
             cas = s
       if 'CAS-' in s: cas = s.strip('CAS-')
    return cas

#### pubchem_smiles2kegg function ####
def pubchem_smiles2kegg(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    ckegg = ''
    dkegg = ''
    for s in ss:
       if ((s[0]=='C') and (len(s)==6) and s[1:].isdigit()): ckegg = s
       if ((s[0]=='D') and (len(s)==6) and s[1:].isdigit()): dkegg = s
    kegg = ckegg + " " + dkegg

    return kegg.strip()

####################################
#                                  #
#         elementssplit            #
#                                  #
####################################

def elementssplit(bb0,tt0):
   if (tt0==''):
      nn0 = 1
   else:
      nn0 = eval(tt0)

   t = []
   bb = bb0

   ll2 = bb[len(bb)-2:]
   found2 = False
   #for e2,n2 in periodic_table_charge.iteritems():
   for e2,n2 in periodic_table_charge.items():
      if ((len(e2)==2) and (e2==ll2)):
         t.append((e2,nn0))
         found2 = True
   if found2: bb = bb[:len(bb)-2]

   if (t == []):
      ll1 = bb[len(bb)-1:]
      found1 = False
      for e1,n1 in periodic_table_charge.items():
         if ((len(e1)==1) and (e1==ll1)):
            t.append((e1,nn0))
            found1 = True
      if found1: bb = bb[:len(bb)-1]

   if (t == []): return []

   for e2,n2 in periodic_table_charge.items():
      if ((len(e2)==2) and (e2 in bb)):
         t.append((e2,1))
         bb = bb.replace(e2,'')

   for e1,n1 in periodic_table_charge.items():
      if ((len(e1)==1) and (e1 in bb)):
         t.append((e1,1))
         bb = bb.replace(e1,'')

   return t

####################################
#                                  #
#         string2mformulalist      #
#                                  #
####################################

def string2mformulalist(s):
   if (s==''):
      return []
   else:
      head = s.rstrip('0123456789')
      tail = s[len(head):]
      s1 = head.rstrip('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
      element = head[len(s1):]
      s1list = string2mformulalist(s1)
      return s1list + elementssplit(element,tail)


####################################
#                                  #
#         mformula_to_smiles       #
#                                  #
####################################

def mformula_to_smiles(hup,dbfile,table,mformula0):

   ll = string2mformulalist(mformula0)
   fdict = {}
   for x in ll:
      fdict[x[0]] = x[1]

   #### generate mformula ####
   mformula = ''
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      mformula += x[0] + "%d" % x[1]


   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False
   sqlcheck  = "select csmiles from " + table + " where mformula=?;"
   if (not issqlite3):
      sqlcheck = sqlcheck.replace('?','%s')

   checklist = []
   checklist.append(mformula)
   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss  = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)==0):
         print("do something else?")
         smileslist = []
      else:
         smileslist = []
         for r in rows:
            smileslist.append(r[0])
         smileslist = list(set(smileslist))

   return smileslist

####################################
#                                  #
#       formula_to_reactions       #
#                                  #
####################################

def formula_to_reactions(hup,dbfile,table,reaction):
   reaction = ireplace("FORMULA", "formula", reaction)
   reactions = [reaction]

   foundformula = False
   for r in reactions: 
      if ("formula=" in r): foundformula = True

   while (foundformula):
      reactions1 = []
      for reaction in reactions:
         if "formula=" in reaction:
            ii      = reaction.find("formula=")
            formula = reaction[ii:].split("=")[1].split()[0]
            left    = reaction.split("formula="+formula)[0]
            right   = reaction[len(left)+len(formula)+8:]
            smileslist = mformula_to_smiles(hup,dbfile,table,formula)
            for smiles in smileslist:
               #reaction1 = reaction.replace("formula="+formula,smiles)
               reaction1 = left + " " + smiles + " " + right
               reactions1.append(reaction1)
         else:
            reactions1.append(reaction)
      reactions = reactions1
      foundformula = False
      for r in reactions: 
         if ("formula=" in r): foundformula = True

   return reactions


def formula_to_reactions1(hup,dbfile,table,reaction):
   reaction = ireplace("FORMULA", "formula", reaction)
   reactions = [reaction]

   foundformula = False
   for r in reactions:
      if ("formula=" in r): foundformula = True

   while (foundformula):
      reactions1 = []
      for reaction in reactions:
         if "formula=" in reaction:
            ii      = reaction.find("formula=")
            formula = reaction[ii:].split("=")[1].split()[0]
            left    = reaction.split("formula="+formula)[0]
            right   = reaction[len(left)+len(formula)+8:]
            smileslist = mformula_to_smiles(hup,dbfile,table,formula)
            for smiles in smileslist[:1]:
               #reaction1 = reaction.replace("formula="+formula,smiles)
               reaction1 = left + " " + smiles + " " + right
               reactions1.append(reaction1)
         else:
            reactions1.append(reaction)
      reactions = reactions1
      foundformula = False
      for r in reactions:
         if ("formula=" in r): foundformula = True

   return reactions







#### mol2smiles function ####
def mol2smiles(mol):
   eoln = "\n"
   try:
      molfile    = wrkdir + "/"+tmpsmi1
      smilefile2 = wrkdir + "/"+tmpsmi2
      ofile = open(molfile,'w')
      ofile.write(mol); ofile.write(eoln)
      ofile.close()
      cmd6 = obabel + " -imol " + molfile + " -ocan -O" + smilefile2 
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      smiles2 = "nosmiles"
      sdat = []
      ofile = open(smilefile2,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles2 = sdat[0].split()[0]
   except:
      smiles2 = "nosmiles"
   ### special cases ###
   if ((smiles2=='[HH]') or
       (smiles2=='[H2]') or
       (smiles2=='HH')   or
       (smiles2=='[H].[H]')): smiles2 = '[HH]'
   if ('*' in smiles2): smiles2 = smiles2.replace('*','C')
   return smiles2


####################################
#                                  #
#         nametosmiles             #
#                                  #
####################################
def nametosmiles(name):
 try:
   #
   hup    = hup0
   dbfile = dbfile0
   table  = "nametosmiles"
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False
   sqlinsert = "insert into " + table + " (name,smiles) values (?,?);"
   sqlcheck  = "select * from " + table + " where name=?;"
   if (not issqlite3):
      sqlcheck = sqlcheck.replace('?','%s')
      sqlinsert = sqlinsert.replace('?','%s')

   checklist = []
   checklist.append(name)
   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss  = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)==0):

         ### try pubchem then spiderchem ###
         smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/%s/property/CanonicalSMILES/TXT" % name)
         #if smiles == "":
            #rdfdata = geturlresult("http://rdf.chemspider.com/search/%s" % name)
            #if rdfdata!='':
            #   rdfdata2 = rdfdata.split('<chemdomain:SMILES')[1].split('</chemdomain:SMILES>')[0]
            #   smiles   = rdfdata2.split('<chemdomain:hasValue>')[1].split('</chemdomain:hasValue>')[0].strip()

         if smiles != "":
            ss = smiles.strip().split()
            smiles = ss[0]
            insertlist = []
            insertlist.append(name)
            insertlist.append(smiles)
            print("inserting "+ name + " " + smiles + " into " + table)
            cur.execute(sqlinsert,insertlist)
      else:
         smiles = rows[0][2]

 except:
   smiles = ""

 return smiles


def inchionlyHZ(inchi):
   try:
      onlyHZ = True
      for a in re.findall('[A-Z][^A-Z]*', inchi.split("/")[1]):
         aa = re.sub("[^a-zA-Z]","", a)
         if (periodic_table_charge[aa]<21): onlyHZ = False
   except:
      onlyHZ = False

   return onlyHZ

def inchihasHZ(inchi):
   try:
      hasHZ = False
      #for aa in re.findall('[^\d^. ]+',inchi.split("/")[1]):
      for a in re.findall('[A-Z][^A-Z]*', inchi.split("/")[1]):
         aa = re.sub("[^a-zA-Z]","", a)
         if (periodic_table_charge[aa]>=21): hasHZ = True
   except:
      hasHZ = False

   return hasHZ

def removespace_basis(basis):
   if ('ry' not in basis.lower()) and ('hartree' not in basis.lower()):
      basis = basis.replace(" ", "")
   return basis


####################################
#                                  #
#           esmiles_hasname        #
#                                  #
####################################
def esmiles_hasname(esmiles):
   if (("id=" in esmiles.lower())   or 
       ("inchi=" in esmiles.lower()) or
       ("kegg=" in esmiles.lower()) or
       ("cas=" in esmiles.lower())  or
       ("chembl=" in esmiles.lower())  or
       ("cid=" in esmiles.lower())  or
       ("pubchem=" in esmiles.lower())  or
       ("csid=" in esmiles.lower())  or
       ("chemspider=" in esmiles.lower())  or
       ("name=" in esmiles.lower()) or
       ("peptide=" in esmiles.lower()) or
       ("peptoid=" in esmiles.lower()) or
       ("label=" in esmiles.lower())):
      hasname = False
   else:
      try:
         smiles = esmiles.strip().split()[0]
         cmd = obabel + ' -:\"' + smiles + '\" -ocan'
         result = subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
         #print "result=",result
         if "0 molecules converted" in result:
            hasname = True
         else:
            hasname = False
      except:
         hasname = False

   return hasname

####################################
#                                  #
#    esmileswithname_to_esmiles    #
#                                  #
####################################

def esmileswithname_to_esmiles(esmiles0):
   try:
      if esmiles_hasname(esmiles0):
         sss = esmiles0.split()
         ss = []
         bopen = False
         for s in sss:
            if "{" in s:    bopen = True
            if (not bopen): ss.append(s)
            if "}" in s:    bopen = False
            #if "{" not in s:
            #   ss.append(s)
         name = ''
         for ll in range(len(ss)-1):
            name += ss[ll] + "%20"
         name += ss[len(ss)-1]

         esmiles1 = nametosmiles(name)

         if esmiles1=='': esmiles1='C'
         bopen = False
         for s in sss:
            if "{" in s:    bopen = True
            if (bopen): esmiles1 += " " + s
            if "}" in s:    bopen = False
            #if "{" in s:
            #   esmiles1 += " " + s
      else:
         esmiles1 = esmiles0

   except:
      esmiles1 = esmiles0

   return esmiles1


#def isformula_check(str0):
#   atomlist = [ 'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Ha', 'Sg', 'Bh', 'Hs', 'Mt' ]
#
#   items = re.findall('\d+|\D+', str0)
#   isformula = (len(items)%2)==0
#   for it in items[0::2]:
#      if not it in atomlist: isformula = False
#   for it in items[1::2]:
#      if it.isalpha(): isformula = False
#
#   return isformula

def isformula_check(str0):
   atomlist = [ 'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Ha', 'Sg', 'Bh', 'Hs', 'Mt' ]

   nohash = not (":bond:" in str0)
   try:
      smiles = str0.strip()
      cmd = obabel + ' -:\"' + smiles + '\" -ocan'
      result = subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      if "0 molecules converted" in result:
         isformula = True
      else:
         isformula = False
   except:
      isformula = True


   if isformula:
      items = re.findall(r'([A-Z][a-z]*)(\d*)', str0)
      isformula = len(items)>0
      for it in items:
         if not it[0] in atomlist: isformula = False
         if it[1].isalpha():        isformula = False

   return isformula and nohash


def convertmformula(str0):
   items = re.findall(r'([A-Z][a-z]*)(\d*)', str0)
   fdict = {}
   for it in items:
      key = it[0]
      if (it[1].isalpha()) or (it[1]==''):
         val = 1
      else:
         val = evalnum(it[1])
      if (key in fdict):
         fdict[key] += val
      else:
         fdict[key] = val

   mformula = ''
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      mformula += x[0] + "%d" % x[1]

   return mformula


def iscas_check(str0):
   items = str0.split('-')
   iscas = (len(items)==3)
   for it in items:
      if not it.isdigit(): iscas = False

   return iscas



def getpeptoidMonomers():
   monomer = dict()
   monomer['nlys'] = 'N(CCCC[NH3+])CC(=O)O'
   monomer['nae']  = 'N(CC[NH3+])CC(=O)O'
   monomer['nleu'] = 'N(CC(C)C)CC(=O)O'
   monomer['nile'] = 'N(C(C)CC)CC(=O)O'
   monomer['nval'] = 'N(C(C)C)CC(=O)O'
   monomer['nmb']  = 'N(CC(C)CC)CC(=O)O'

   monomer['npm']  = 'N(Cc1ccccc1)CC(=O)O'
   monomer['npe']  = 'N(CCc1ccccc1)CC(=O)O'
   monomer['ndpe'] = 'N(CC(c1ccccc1)c1ccccc1)CC(=O)O'
   monomer['nal']  = 'N(C1=CC(CCC2)=C2C=C1)CC(=O)O'
   monomer['ntrp'] = 'N(CCc1c[nH]c2ccccc12)CC(=O)O'
   monomer['nspe'] = 'N(C(C)c1ccccc1)CC(=O)O'

   return monomer


def peptoid2smiles(string0):

   string = string0.strip()
   smiles = ''
   monomers = getpeptoidMonomers()
   aa3 = set(['nlys','nae','nleu','nile','nval','nmb','npm','npe','ndpe','nal','ntrp','nspe'])

   if all((c.lower() in aa3) for c in string.split("-")):
      acids = string.split("-")
   elif "peptoid=" in string.lower():
      acids = string[8:].split("-")
   else:
      acids = list(string)

   aa0 = acids[0].lower()
   if (aa0 in monomers):
      smiles = monomers[aa0]
   else:
      smiles = smiles[:-1] + "N(" + acids[0] + ")CC(=O)O"

   for aa in acids[1:]:
      bb = aa.lower()
      if (bb in monomers):
         smiles = smiles[:-1] + monomers[bb]
      else:
         smiles = smiles[:-1] + "N(" + aa + ")CC(=O)O"

   return smiles



def ispeptoid(string0):
   string = string0.strip()
   aa3 = set(['nlys','nae','nleu','nile','nval','nmb','npm','npe','ndpe','nal','ntrp','nspe'])
   success = False

   if all((c.lower() in aa3) for c in string.split("-")):
      success = True

   elif "peptoid=" in string.lower():
      success = True

   else:
      success = False

   return success


def getAminoAcids():
   aminoacid = dict()
   aminoacid['ala'] = aminoacid['a'] = 'NC(C)C(=O)O'
   aminoacid['cys'] = aminoacid['c'] = 'NC(CS)C(=O)O'
   aminoacid['asp'] = aminoacid['d'] = 'NC(CC(=O)O)C(=O)O'
   aminoacid['glu'] = aminoacid['e'] = 'NC(CCC(=O)O)C(=O)O'
   aminoacid['phe'] = aminoacid['f'] = 'NC(Cc1ccccc1)C(=O)O'

   aminoacid['gly'] = aminoacid['g'] = 'NCC(=O)O'
   aminoacid['his'] = aminoacid['h'] = 'NC(CC1N=CNC=1)C(=O)O'
   aminoacid['ile'] = aminoacid['i'] = 'NC(C(C)CC)C(=O)O'
   aminoacid['lys'] = aminoacid['k'] = 'NC(CCCCN)C(=O)O'
   aminoacid['leu'] = aminoacid['l'] = 'NC(CC(C)C)C(=O)O'

   aminoacid['met'] = aminoacid['m'] = 'NC(CCSC)C(=O)O'
   aminoacid['asn'] = aminoacid['n'] = 'NC(CC(=O)N)C(=O)O'
   aminoacid['pro'] = aminoacid['p'] = 'N1C(CCC1)C(=O)O'
   aminoacid['gln'] = aminoacid['q'] = 'NC(CCC(=O)N)C(=O)O'
   aminoacid['arg'] = aminoacid['r'] = 'NC(CCCNC(=N)N)C(=O)O'

   aminoacid['ser'] = aminoacid['s'] = 'NC(CO)C(=O)O'
   aminoacid['thr'] = aminoacid['t'] = 'NC(C(C)O)C(=O)O'
   aminoacid['sec'] = aminoacid['u'] = 'NC(C[Se][H])C(=O)O'
   aminoacid['val'] = aminoacid['v'] = 'NC(C(C)C)C(=O)O'
   aminoacid['trp'] = aminoacid['w'] = 'NC(Cc1c2ccccc2nc1)C(=O)O'

   aminoacid['tyr'] = aminoacid['y'] = 'NC(Cc1cc(O)ccc1)C(=O)O'

   aminoacid['asx'] = aminoacid['b'] = aminoacid['d']
   aminoacid['xle'] = aminoacid['j'] = aminoacid['l']
   aminoacid['pyl'] = aminoacid['o'] = 'NC(CCCNC(=O)C1N=CCC1C)C(=O)O'
   aminoacid['glx'] = aminoacid['z'] = aminoacid['e']

   # add protonated versions of bases
   aminoacid['hisp'] = 'NC(CC1N[CH3+]NC=1)C(=O)O'
   aminoacid['lysp'] = 'NC(CCCC[NH3+])C(=O)O'
   aminoacid['argp'] = 'NC(CCCNC(=[H2+])N)C(=O)O'

   # add deprotonated versions of acids
   aminoacid['aspd'] = 'NC(CC(=O)[O-])C(=O)O'
   aminoacid['glud'] = 'NC(CCC(=O)[O-])C(=O)O'

   return aminoacid

def peptide2smiles(string0):

   string = string0.strip()
   smiles = ''
   aminoacids = getAminoAcids()
   aa3 = set(['ala','cys','asp','glu','phe','gly','his','ile','lys','leu','met','asn','pro','gln','arg','ser','thr','sec','val','trp','tyr','pyl','asx','glx','xle'])

   if all((c.lower() in aa3) for c in string.split("-")): 
      acids = string.split("-")
   elif "peptide=" in string.lower():
      acids = list(string[8:])
   else:
      acids = list(string)

   aa0 = acids[0].lower()
   smiles = aminoacids[aa0]

   for aa in acids[1:]:
      bb = aa.lower()
      smiles = smiles[:-1] + aminoacids[bb]

   return smiles

def ispeptide(string0):
   string = string0.strip()
   aa3 = set(['ala','cys','asp','glu','phe','gly','his','ile','lys','leu','met','asn','pro','gln','arg','ser','thr','sec','val','trp','tyr','pyl','asx','glx','xle'])
   success = False
   if all((c.lower() in aa3) for c in string.split("-")): 
      success = True

   elif "peptide=" in string.lower():
      success = True

   else:
      success = False
      #chars    = set('A  DE GH  KLM   QR TUVWYZ')
      #allchars = set('ABCDEFGHIJKLMNOPQRSTUVWYZ')
      #badchars = set('=*_-!~^&[]()+-{}\|<>?.,:;0123456789$@%^Xabcdefghijklmnopqrstuvwxyz')
      #if any((c in chars) for c in string):    success = True
      #if any((c in badchars) for c in string):     success = False
      #if any((c not in allchars) for c in string): success = False

   return success



#### parsexyzdata function ####
def parsexyzdatastr(str0):
   toolongcountmax = 20
   toolongcount = 0
   toolong      = False
   rstring2 = ireplace("XYZDATA{", "xyzdata{", str0)
   while ("xyzdata{" in rstring2) and (not toolong):
      rstring = rstring2
      msg  = rstring.split("xyzdata{")[1].split("}")[0]
      rmsg = "xyzdata{" + msg + "}"
      rmsg00 = "xyzdata00{" + msg + "}"
      xyzss = msg.split("|")
      nion = len(xyzss)
      xyz = '\n'.join(xyzss) + '\n'
      with open(wrkdir+"/"+tmpxyz1,'w') as f:
         f.write("%d\n\n" % nion)
         f.write(xyz)
      #esmiles = xyz2smiles(wrkdir+"/"+tmpxyz1)
      print("HERA NION=",nion)
      print("xyz=",xyz)
      esmiles = xyz2esmiles(wrkdir+"/"+tmpxyz1)
      esmiles += " " + rmsg00
      rstring2 = rstring.replace(rmsg,esmiles)
      toolongcount += 1
      toolong = (toolongcount>toolongcountmax)

   rstring = rstring2.replace("xyzdata00{", "xyzdata{")
      
   print("RSTRING=",rstring)
   return rstring


#### parsetosmiles function ####
def parsetosmiles(str):
   global xyzdata

   #if ("xyzdata{" in str.split()[0]): 
   #   str1 = xyzdata2esmiles(str)
   if ("xyzdata{" in str.lower()): 
      str1 = parsexyzdatastr(str)
   else:
      str1 = str

   str2 = ''
   ss   = str1.split()
   nbraces = 0
   for s in ss:
      if ('{' in s) or ('}' in s):
         str2 += ' '
         str2 += s
         if ('{' in s): nbraces += s.count('{')
         if ('}' in s): nbraces -= s.count('}')
         if (nbraces<0): nbraces = 0
      elif (nbraces>0):
         str2 += ' '
         str2 += s
      elif 'rkegg=' in s.lower():
         rkegg = s.split('=')[1]
         rdata  = geturlresult("http://rest.kegg.jp/get/%s" % rkegg)
         req = rdata.split("EQUATION")[1].split("\n")[0]
         print("req=",req)
         rr = req.split("<=>")[0]
         pp = req.split("<=>")[1]
         print("rr=",rr)
         print("pp=",pp)
         reaction = ''
         for r in rr.split('+'):
            sr = r.split()
            if (len(sr)==1):
               coef = ''
               kegg = sr[0]
            else:
               coef = sr[0]
               kegg = sr[1]
            mol = geturlresult("http://rest.kegg.jp/get/%s/mol" % kegg)
            smiles = mol2smiles(mol)
            if smiles=='': smiles='C'
            reaction += coef + ' ' + smiles + ' + '
         reaction = reaction.rstrip('+ ')
         reaction += " --> "
         for p in pp.split('+'):
            sp = p.split()
            if (len(sp)==1):
               coef = ''
               kegg = sp[0]
            else:
               coef = sp[0]
               kegg = sp[1]
            mol = geturlresult("http://rest.kegg.jp/get/%s/mol" % kegg)
            smiles = mol2smiles(mol)
            if smiles=='': smiles='C'
            reaction += coef + ' ' + smiles + ' + '
         reaction = reaction.rstrip('+ ')
         reaction += " ~  "
         print("reaction=",reaction)
         str2 += reaction
      elif 'kegg=' in s.lower():
         kegg = s.split('=')[1]
         mol = geturlresult("http://rest.kegg.jp/get/%s/mol" % kegg)
         smiles = mol2smiles(mol)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif ('cid=' in s.lower()) or ('pubchem=' in s.lower()) :
         cid = s.split('=')[1]
         smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/%s/property/CanonicalSMILES/TXT" % cid)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif ('csid=' in s.lower()) or ('chemspider=' in s.lower()):
            
         csid = s.split('=')[1]
         #rdfdata = geturlresult("http://rdf.chemspider.com/%s" % csid)
         rdfdata = geturlresult("http://www.chemspider.com/Chemical-Structure.%s.html" % csid)
         if rdfdata=='':
            smiles='C'
         else:
            rdfdata2 = rdfdata.split('<span class="prop_title">SMILES</span>')[1].split('<span class="prop_title">Std. InChi</span>')[0]
            smiles   = rdfdata2.split('ClipboardCopyInit(this, &#39;')[1].split('&#39;')[0].strip()
         str2 += ' '
         str2 += smiles
      elif 'cas=' in s.lower():
         cas = s.split('=')[1]
         smiles = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/smiles" % cas)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif iscas_check(s):
         cas = s
         smiles = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/smiles" % cas)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'chembl' in s.lower():
         if 'chembl=' in s.lower():
            chembl = 'CHEMBL'+s.split('=')[1]
         else:
            for a in s.lower().split():
               if 'chembl' in a: chembl=a
         ddata = geturlresult("https://www.ebi.ac.uk/chembl/api/data/molecule/%s" % chembl)
         if "<canonical_smiles>" in ddata:
            smiles = ddata.split("<canonical_smiles>")[1].split("</canonical_smiles>")[0]
         else:
            smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'name=' in s:
         name = s.split('=')[1]
         #smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/%s/property/CanonicalSMILES/TXT" % name)
         smiles = nametosmiles(name)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'label=' in s:
         smiles=''
         tag = s.split('=')[1]
         for dd in xyzdata:
            if tag==dd[0]: smiles = dd[1] + ' xyzdata{' + dd[2] + '} '
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'inchi=' in s.lower():
         inchi = "InChI="+s.split('=')[1]
         smiles = InChI2smiles(inchi)
         str2 += ' '
         str2 += smiles
      elif isformula_check(s):
         str2 += ' formula='
         str2 += convertmformula(s)
      elif ispeptide(s):
         smiles = peptide2smiles(s)
         str2 += ' '
         str2 += smiles
      elif ispeptoid(s):
         smiles = peptoid2smiles(s)
         str2 += ' '
         str2 += smiles
      else:
         str2 += ' '
         str2 += s
   str2 = str2.strip()

   return str2


def addspaceatoms(rstring):
   rstringout = ''
   imalpha = False
   imax = len(rstring)-1
   for i in range(len(rstring)):
      s = rstring[i]
      isalpha = s.isalpha()
      if (s.lower()=='e') and (i!=0) and (i!=imax):
         notbalpha = not rstring[i-1].isalpha()
         notaalpha = not rstring[i+1].isalpha()
         isenum = notbalpha and notaalpha
         isalpha = not isenum
      if (not isalpha) and (imalpha):
         rstringout += " "
         rstringout += s
         imalpha = False
      elif isalpha and (not imalpha):
         rstringout += " "
         rstringout += s
         imalpha = True
      elif isalpha:
         rstringout += s
         imalpha = True
      else:
         imalpha = False
         rstringout += s
   return rstringout




def parse_xyzdata(rstring):
   global xyzdata

   eoln = "\n"
   success = True
   xyzdata = []
   toolongcountmax = 20
   toolongcount = 0
   toolong      = False
   rstring = ireplace("XYZINPUT", "xyzinput", rstring)
   while ((len(rstring.split("xyzinput:"))>1) and (not toolong)):
      msg2 = rstring.split("xyzinput:")
      msg3 = msg2[1].split(":xyzinput")[0]
      rstring  = rstring.replace("xyzinput:"+msg3+":xyzinput","")
      xyzlabel = msg3.split("label:")[1].split(":label")[0].strip()
      xyz0 = msg3.split("xyzdata:")[1].split(":xyzdata")[0].strip()
      xyz0 = addspaceatoms(xyz0)
      xyz0ss = xyz0.split()
      if (not xyz0ss[0].isalpha()): xyz0ss = xyz0ss[1:]
      xyz = ""
      ii = 0
      nion = (len(xyz0ss)/4)
      xyzdone    = False
      xyzfailed = False
      while (not xyzdone):

         symb = xyz0ss[4*ii]

         if (not xyz0ss[4*ii+1].isalpha()):
            x = evalnum(xyz0ss[4*ii+1])
         else:
            xyzfailed = True

         if (not xyz0ss[4*ii+2].isalpha()):
            y = evalnum(xyz0ss[4*ii+2])
         else:
            xyzfailed = True

         if (not xyz0ss[4*ii+3].isalpha()):
            z = evalnum(xyz0ss[4*ii+3])
         else:
            xyzfailed = True

         if (not xyzfailed):
            xyz += "%s %f %f %f\n" % (symb,x,y,z)
         ii += 1
         xyzdone = (ii>=nion) or xyzfailed
         
      xyz = xyz.strip()
      nion = len(xyz.strip().split("\n"))
      if (nion>0):
         with open(wrkdir+"/"+tmpxyz1,'w') as f:
            f.write("%d\n\n" % nion)
            f.write(xyz)
         smiles = xyz2smiles(wrkdir+"/"+tmpxyz1)
         xyzdata.append([xyzlabel,smiles,xyz.replace('\n',' | ')])
      toolong = (toolongcount > toolongcountmax)
      toolongcount += 1
   if (toolong): success = False

   return (rstring,success)





#### cannonicalsmiles function ####
def cannonicalsmiles(smiles):
   eoln = "\n"
   try:
      smilefile  = wrkdir + "/"+tmpsmi1
      smilefile2 = wrkdir + "/"+tmpsmi2
      print("smilefile=",smilefile)
      with open(smilefile,'w') as ofile:
         ofile.write(smiles); ofile.write(eoln)

      cmd6 = obabel + " -ismi " + smilefile + " -ocan -O" + smilefile2 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      smiles2 = "nosmiles"
      sdat = []
      ofile = open(smilefile2,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles2 = sdat[0].split()[0]
   except:
      smiles2 = smiles

   ### special cases ###
   if ((smiles=='[HH]') or
       (smiles=='[H2]') or
       (smiles=='HH')   or
       (smiles=='[H].[H]')): smiles2 = '[HH]'

   return smiles2

#### xyz2smiles function ####
def xyz2smiles(xyzfile):
   try:
      smiles = ''
      smilefile = wrkdir + "/"+tmpsmi1
      cmd6 = obabel + " -ixyz " + xyzfile + " -ocan -O" + smilefile 
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles = ''

   ### special cases ###
   if ((smiles=='[HH]') or
       (smiles=='[H2]') or
       (smiles=='HH')   or
       (smiles=='[H].[H]')): smiles = '[HH]'

   if (smiles=='O.[H]'): smiles = '[OH3]'

   return smiles




def xyz2esmiles(xyzfile):
   with open(xyzfile,'r') as ff:
      xyz = ff.read()
   xyzdat0 = ''
   for xx in xyz.strip().split('\n')[2:]:
      xyzdat0 += xx + " | "
   xyzdat0 = xyzdat0.strip().rstrip('|').strip()
   esmile0 = "xyzdata{" + xyzdat0 + '}'
   cmd6 = esmiles2xyz + ' "' + esmile0.strip() + '" ' +xyzfile
   try:
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
   except:
      result = "xyz2esmiles failed\n"
   smiles = result.split("smiles   =")[1].split('\n')[0]

   return smiles


def xyzdata2esmiles(esmiles0):
   xyzfile = wrkdir + "/" + tmpxyz1
   cmd6 = esmiles2xyz + ' "' + esmiles0.strip() + '" ' +xyzfile
   try:
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
   except:
      result = "xyzdata2esmiles failed\n"
   smiles = result.split("smiles   =")[1].split('\n')[0]
   esmiles =  smiles + " " + esmiles0

   return esmiles


#### cactus_smiles2xyz function ####
def cactus_smiles2xyz(smiles):
    tsmiles = smiles.replace("#","")
    tsmiles = tsmiles.replace("$","")
    result = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/file?format=xyz&get3d=True" % tsmiles)
    return result

##### smiles2xyz function ####
#def smiles2xyz(smiles,xyzfile):
#   eoln = "\n"
#   smilefile = wrkdir + "/"+tmpsmi1
#   ofile = open(smilefile,'w')
#   ofile.write(smiles); ofile.write(eoln)
#   ofile.close()
#   cmd6 = babel + " --ffuff --gen3d -ismi " + smilefile + " -oxyz " + xyzfile + " >& junk.err"
#   os.system(cmd6)
#
#   #### if nan's are produced then use cactus smiles2xyz rest interface ####
#   with open(xyzfile,'r') as ff:
#      test = ff.read()
#   if 'nan' in test:
#      xyzdata = cactus_smiles2xyz(smiles)
#      with open(xyzfile,'w') as ff:
#         ff.write(xyzdata+eoln)

#### smiles2xyz function ####
def smiles2xyz(smiles,xyzfile):
   cmd6 = esmiles2xyz + ' "' + smiles.strip() + '" ' +xyzfile
   os.system(cmd6)

   #### if nan's are produced then use cactus smiles2xyz rest interface ####
   with open(xyzfile,'r') as ff:
      test = ff.read()
   if 'nan' in test:
      xyzdata = cactus_smiles2xyz(smiles)
      with open(xyzfile,'w') as ff:
         ff.write(xyzdata+eoln)

#### esmiles2xyzdat function ####
def esmiles2xyzdat(esmiles,xyzfile):
   cmd6 = esmiles2xyz + ' "' + esmiles.strip() + '" ' +xyzfile
   try:
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
   except:
      result = "emsiles2xyzdat failed\n"
   return result



#### xyz2InChI function ####
def xyz2InChI(xyzfile):
   inchi = ''
   try:
      inchifile = wrkdir + "/"+ tmpsmi1
      cmd6 = obabel + " -ixyz " + xyzfile + " -oinchi -O" + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

#### xyz2InChIKey function ####
def xyz2InChIKey(xyzfile):
   inchi = ''
   try:
      inchifile = wrkdir + "/"+tmpsmi1
      cmd6 = obabel + " -ixyz " + xyzfile + " -oinchikey -O" + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

def xyzdat2sdf(xyzdat):
   sdf = ''
   try:
      sdffile = wrkdir + "/"+tmpsmi2
      xyzfile = wrkdir + "/"+tmpsmi1
      with open(xyzfile,'w') as ff:
         ff.write(xyzdat)
      cmd6 = obabel + " -ixyz " + xyzfile + " -osdf -O" + sdffile
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      with open(sdffile,'r') as ff: 
         sdf = ff.read()
   except:
      sdf = ''
   return sdf


def xyzdat2mol(xyzdat):
   mol = ''
   try:
      molfile = wrkdir + "/"+tmpsmi2
      xyzfile = wrkdir + "/"+tmpsmi1
      with open(xyzfile,'w') as ff:
         ff.write(xyzdat)
      cmd6 = obabel + " -ixyz " + xyzfile + " -omol -O" + molfile
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      with open(molfile,'r') as ff:
         mol0 = ff.read()
      mol = 'arrows\n'
      for ll in mol0.strip().split("\n")[1:]:
         if "M  RAD" not in ll:
            mol += ll + "\n"
   except:
      mol = ''
   return mol



#### smiles2InChI function ####
def smiles2InChI(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = obabel + " -ismi " + smilefile + " -oinchi -O" + inchifile 
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi


#### smiles2InChIKey function ####
def smiles2InChIKey(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = obabel + " -ismi " + smilefile + " -oinchikey -O" + inchifile
      #os.system(cmd6)
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

#### InChI2smiles function ####
def InChI2smiles(inchi):
   eoln   = "\n"
   smiles = ''
   try:
      inchifile = wrkdir + "/"+tmpsmi2
      smilefile = wrkdir + "/"+tmpsmi1
      ofile = open(inchifile,'w')
      ofile.write(inchi); ofile.write(eoln)
      ofile.close()
      cmd6 = obabel + " -iinchi " + inchifile + " -osmi -O" + smilefile
      result = subprocess.check_output(cmd6,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles= ''
   return smiles




def smiles2charge(smiles):
  charge = 0
  ss = smiles.split('[')
  if (len(ss)>1):
     ss = ss[1:]
  else:
     ss = []
  for s in ss:
     inside = s.split(']')[0]
     if   (inside.find("+10")!=-1): charge += 10
     elif (inside.find("-10")!=-1): charge -= 10
     elif (inside.find("+9")!=-1): charge += 9
     elif (inside.find("-9")!=-1): charge -= 9
     elif (inside.find("+8")!=-1): charge += 8
     elif (inside.find("-8")!=-1): charge -= 8
     elif (inside.find("+7")!=-1): charge += 7
     elif (inside.find("-7")!=-1): charge -= 7
     elif (inside.find("+6")!=-1): charge += 6
     elif (inside.find("-6")!=-1): charge -= 6
     elif (inside.find("+5")!=-1): charge += 5
     elif (inside.find("-5")!=-1): charge -= 5
     elif (inside.find("+4")!=-1): charge += 4
     elif (inside.find("-4")!=-1): charge -= 4
     elif (inside.find("+3")!=-1): charge += 3
     elif (inside.find("-3")!=-1): charge -= 3
     elif (inside.find("+2")!=-1): charge += 2
     elif (inside.find("-2")!=-1): charge -= 2
     elif (inside.find("+1")!=-1): charge += 1
     elif (inside.find("-1")!=-1): charge -= 1
     elif (inside.find("+")!=-1):  charge += inside.count('+')
     elif (inside.find("-")!=-1):  charge -= inside.count('-')

  return charge

def esmiles2mult_set(smiles,charge,esmiles):
   mult = smiles2mult(smiles,charge)
   if 'mult{' in esmiles:   
      isodd = ((mult%2)==1)
      mult0 = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      isodd0 = ((mult0%2)==1)
      if (isodd==isodd0): 
         mult = mult0
      elif (mult0<2) and isodd:
         mult = 1
      elif (mult0<3) and (not isodd):
         mult = 2
      else:
         mult = mult0-1
   return mult

def smiles2mult(smiles,q):
  mult = 1
  smiles2xyz(smiles,wrkdir + "/"+tmpxyz1)
  pcharge = q
  count = 0
  xyzfile = open(wrkdir + "/"+tmpxyz1,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult

def xyz2mult(xyzfilename,q):
  mult = 1
  pcharge = q
  count = 0
  xyzfile = open(xyzfilename,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult









#### functions ####
def xyz_molecular_formula(xyzfilename):
   #
   fdict = {}
   xyzfile = open(xyzfilename,'r')
   n = evalnum(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline().strip()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (key in fdict):
         fdict[key] += 1
      else:
         fdict[key] = 1
   xyzfile.close()

   formula = ''
   #ll = fdict.items()
   #for i in range(len(ll)):
   #   formula += ll[i][0] + "%d" % ll[i][1]
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      formula += x[0] + "%d" % x[1]

   return formula


###########################################
#                                         #
#             xyz2cif                     #
#                                         #
###########################################
def xyz2cif(xyzdat,cell):
   try:
      a1 = cell.split("a1=<")[1].split(">")[0].strip().split()
      a2 = cell.split("a2=<")[1].split(">")[0].strip().split()
      a3 = cell.split("a3=<")[1].split(">")[0].strip().split()
      for i in range(3):
         a1[i] = eval(a1[i])*0.529177
         a2[i] = eval(a2[i])*0.529177
         a3[i] = eval(a3[i])*0.529177

      a = eval(cell.split("a=")[1].split("b=")[0].strip())*0.529177
      b = eval(cell.split("b=")[1].split("c=")[0].strip())*0.529177
      c = eval(cell.split("c=")[1].split("\n")[0].strip())*0.529177
      alpha = eval(cell.split("alpha=")[1].split("beta=")[0].strip())
      beta  = eval(cell.split("beta=")[1].split("gamma=")[0].strip())
      gamma = eval(cell.split("gamma=")[1].split("\n")[0].strip())
   except:
      a1 = [50.0,  0.0,  0.0]
      a2 = [ 0.0, 50.0,  0.0]
      a3 = [ 0.0,  0.0, 50.0]
      a = b = c = 50.0
      alpha = beta = gamma = 90.0

   b1 = [0]*3
   b1[0] = a2[1]*a3[2] - a2[2]*a3[1]
   b1[1] = a2[2]*a3[0] - a2[0]*a3[2]
   b1[2] = a2[0]*a3[1] - a2[1]*a3[0]

   b2 = [0]*3
   b2[0] = a3[1]*a1[2] - a3[2]*a1[1]
   b2[1] = a3[2]*a1[0] - a3[0]*a1[2]
   b2[2] = a3[0]*a1[1] - a3[1]*a1[0]

   b3 = [0]*3
   b3[0] = a1[1]*a2[2] - a1[2]*a2[1]
   b3[1] = a1[2]*a2[0] - a1[0]*a2[2]
   b3[2] = a1[0]*a2[1] - a1[1]*a2[0]

   volume = a1[0]*b1[0] + a1[1]*b1[1] + a1[2]*b1[2]
   for i in range(3):
      b1[i] = b1[i]/volume
      b2[i] = b2[i]/volume
      b3[i] = b3[i]/volume


   msg = '''data_arrows_pspw 

_audit_creation_date   Wed Apr 19 18:30:16 2017
_audit_creation_method    generated by EMSL Arrows


_cell_length_a      %12.4f
_cell_length_b      %12.4f
_cell_length_c      %12.4f
_cell_angle_alpha   %12.4f
_cell_angle_beta    %12.4f
_cell_angle_gamma   %12.4f

_symmetry_space_group_name_H-M     P1  

loop_
_atom_site_type_symbol
_atom_site_fract_x
_atom_site_fract_y
_atom_site_fract_z''' % (a,b,c,alpha,beta,gamma)

   msg += "\n"
   for ll in xyzdat.strip().split("\n")[2:]:
      ss = ll.split()
      symb = ss[0]
      x = eval(ss[1])
      y = eval(ss[2])
      z = eval(ss[3])
      f1 = x*b1[0] + y*b1[1] + z*b1[2]
      f2 = x*b2[0] + y*b2[1] + z*b2[2]
      f3 = x*b3[0] + y*b3[1] + z*b3[2]
      msg += "%s %12.6f %12.6f %12.6f\n" % (symb,f1+0.5,f2+0.5,f3+0.5)

   return msg



###########################################
#                                         #
#             xyzdat2jsmol                #
#                                         #
###########################################
#color = "0x3BBC52"
def xyzdat2jsmol(backgroundcolor,xyzdat,cell=None):
   staticdir = ARROWS_HOME + "/Public/static/"
   xx = random.randint(0,999999)
   if cell is not None:
      xyzfilename = "tmp/molecule-jsmol-%d.cif" % xx
      xyzlist = xyzdat.strip().split("\n")
      nion = eval(xyzlist[0].strip())
      cifdat = ''
      while (len(xyzlist)>=(nion+2)):
         xyzdat0 = "\n".join(xyzlist[:nion+2])
         xyzlist = xyzlist[nion+2:]
         cifdat += xyz2cif(xyzdat0,cell)
      #cifdat = xyz2cif(xyzdat,cell)
      with open(staticdir + xyzfilename,'w') as ff:
         ff.write(cifdat)
   else:
      xyzfilename = "tmp/molecule-jsmol-%d.xyz" % xx
      with open(staticdir + xyzfilename,'w') as ff:
         ff.write(xyzdat)

   nion = eval(xyzdat.split("\n")[0].strip())
   nframes = (len(xyzdat.split("\n")))/(nion+2)
   alabel = ""
   count = 0
   for ll in xyzdat.strip().split("\n")[2:nion+2]:
      count += 1
      ss = ll.split()
      alabel += "select atomno=%d; label %s%d;" % (count,ss[0],count)

   msg4 = "</pre>\n"
   msg4 += '<script type=\"text/javascript\" src=\"{{url_for(\'static\', filename=\'jsmol/JSmol.min.js\')}}\"></script>\n'
   msg4 += '''
   <script type="text/javascript"> 
      $(document).ready(
      function() {
            Info = {
            width: 500,
            height: 500,
            debug: false,
            j2sPath: "{{url_for('static', filename='jsmol/j2s')}}",
            //j2sPath: "jsmol/j2s",
            //color: "0x3BBC52",
            color: "%s",
            disableJ2SLoadMonitor: true,
            disableInitialConsole: true,
            addSelectionOptions: false,
            //serverURL: "http://10.0.1.99/jsmol.php",
            //serverURL: "http://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php",
            serverURL: "{{ url_for('static', filename='jsmol/jsmol.php')}}",
            use: "HTML5",
            readyFunction: null,
            script: "load  {{url_for('static', filename='%s')}} ; x = getproperty('modelinfo.models.num'); for (var i=1; i<=x.length; i++) {x[i] += %d}; frame *; frame title @x;  animation MODE LOOP 0 0; animation FPS 2; animation on"
         }
         $("#jsmolmydiv").html(Jmol.getAppletHtml("jmolApplet0",Info))
   ''' % (backgroundcolor,xyzfilename,0)
   if (nframes>1):
      msg4 += '''
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "animation MODE LOOP 0 0; animation FPS 20; animation on","fast animation")+Jmol.jmolButton(jmolApplet0, "animation MODE LOOP 0 0; animation FPS 2; animation on","slow animation") +Jmol.jmolButton(jmolApplet0, "animation off","animation stop")+ Jmol.jmolButton(jmolApplet0, "frame next","next frame") + Jmol.jmolButton(jmolApplet0, "frame previous","previous frame") +Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF")+Jmol.jmolButton(jmolApplet0, "%s","labels On")+Jmol.jmolButton(jmolApplet0, "select all;label off","labels Off") + Jmol.jmolButton(jmolApplet0, "unitcell 1; axes 1","unitcell/axes On") + Jmol.jmolButton(jmolApplet0, "unitcell 0; axes 0","unitcell/axes Off")) 
      }
      );
   </script>
      ''' % (alabel)
   else:
      msg4 += '''
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF")+Jmol.jmolButton(jmolApplet0, "%s","labels On")+Jmol.jmolButton(jmolApplet0, "select all;label off","labels Off") + Jmol.jmolButton(jmolApplet0, "unitcell 1; axes 1","unitcell/axes On") + Jmol.jmolButton(jmolApplet0, "unitcell 0; axes 0","unitcell/axes Off")) 
      }
      );
   </script>
      ''' % (alabel)

#         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF")+Jmol.jmolButton(jmolApplet0, "%s","labels On")+Jmol.jmolButton(jmolApplet0, "select all;label off","labels Off") + Jmol.jmolButton(jmolApplet0, "unitcell 1; axes 1","unitcell/axes On") + Jmol.jmolButton(jmolApplet0, "unitcell 0; axes 0","unitcell/axes Off")) 
#      }
#      );
#   </script>
#   ''' % (backgroundcolor,xyzfilename,alabel)

   msg4 += '<span id=jsmolmydiv></span>\n'
   msg4 += '<span id=jsmolbtns></span>\n'
   msg4 += '<br><font color="443322" size="2"><p><a target=\"_blank\" href="http://wiki.jmol.org/index.php/JSmol">JSmol: an open-source HTML5 viewer for chemical structures in 3D</a></p></font><br>'
   msg4 += "<pre style=\"font-size:1.0em;color:black\">\n"

   return msg4


###########################################
#                                         #
#             nmrdat2jsmol                #
#                                         #
###########################################
def nmrdat2jsmol(xyzdat,tscript):
   staticdir = ARROWS_HOME + "/Public/static/"
   xx = random.randint(0,999999)
   xyzfilename = "tmp/molecule-nmr-jsmol-%d.xyz" % xx
   with open(staticdir + xyzfilename,'w') as ff:
      ff.write(xyzdat)

   msg4 = "</pre>\n"
   msg4 += '<script type=\"text/javascript\" src=\"{{url_for(\'static\', filename=\'jsmol/JSmol.min.js\')}}\"></script>\n'
   msg4 += '''
   <script type="text/javascript"> 
      $(document).ready(
      function() {
            Info = {
            width: 500,
            height: 500,
            debug: false,
            j2sPath: "{{url_for('static', filename='jsmol/j2s')}}",
            //j2sPath: "jsmol/j2s",
            color: "0xcbd655",
            disableJ2SLoadMonitor: true,
            disableInitialConsole: true,
            addSelectionOptions: false,
            //serverURL: "http://10.0.1.99/jsmol.php",
            //serverURL: "http://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php",
            serverURL: "{{ url_for('static', filename='jsmol/jsmol.php')}}",
            use: "HTML5",
            readyFunction: null,
            script: "load  {{url_for('static', filename='%s')}} ; %s "
         }
         $("#jsmolmydiv").html(Jmol.getAppletHtml("jmolApplet0",Info))
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF"))    
      }
      );
   </script>
   ''' % (xyzfilename,tscript)

   msg4 += '<span id=jsmolmydiv></span>\n'
   msg4 += '<span id=jsmolbtns></span>\n'
   msg4 += '<br><font color="443322" size="2"><p><a target=\"_blank\" href="http://wiki.jmol.org/index.php/JSmol">JSmol: an open-source HTML5 viewer for chemical structures in 3D</a></p></font><br>'
   msg4 += "<pre style=\"font-size:1.0em;color:black\">\n"

   return msg4




###########################################
#                                         #
#              nwout2jsmol                #
#                                         #
###########################################
#color = "0x3BBC52"
def nwout2jsmol(backgroundcolor,datafiles,xyzdat):
   staticdir = ARROWS_HOME + "/Public/static/"
   afilename = ''
   for mm in datafiles.split():
      if "mo_orbital_" in mm: 
         afilename = mm

   xx = random.randint(0,999999)
   nwoutfilename = "tmp/molecule-jsmol-%d.out" % xx
   cmd0 = "scp " + afilename + " " + staticdir + nwoutfilename
   if ((":/" not in afilename) and (":/" not in nwoutfilename)): cmd0 = cmd0.replace("scp","cp")
   pexpect_command(cmd0,archivepassword)

   restricted = True
   with open(staticdir+nwoutfilename,'r') as ff: aa = ff.read()
   if ("Wavefunction type:  spin polarized." in aa):
      restricted = False
      norb = aa.split("AO basis - number of functions:")[1].split('\n')[0].strip()
      nalpha = aa.split("Alpha electrons :")[1].split('\n')[0].strip()
      nbeta  = aa.split("Beta electrons :")[1].split('\n')[0].strip()
      nshift = "%d" % (eval(norb)+eval(nalpha)-eval(nbeta))

   nion = eval(xyzdat.split("\n")[0].strip())
   alabel = ""
   count = 0
   for ll in xyzdat.strip().split("\n")[2:nion+2]:
      count += 1
      ss = ll.split()
      alabel += "select atomno=%d; label %s%d;" % (count,ss[0],count)

   msg4 = "</pre>\n"
   msg4 += '<script type=\"text/javascript\" src=\"{{url_for(\'static\', filename=\'jsmol/JSmol.min.js\')}}\"></script>\n'
   msg4 += '''
   <script type="text/javascript"> 
      $(document).ready(
      function() {
            Info = {
            width: 500,
            height: 500,
            debug: false,
            j2sPath: "{{url_for('static', filename='jsmol/j2s')}}",
            //j2sPath: "jsmol/j2s",
            //color: "0x3BBC52",
            color: "%s",
            disableJ2SLoadMonitor: true,
            disableInitialConsole: true,
            addSelectionOptions: false,
            //serverURL: "http://10.0.1.99/jsmol.php",
            //serverURL: "http://chemapps.stolaf.edu/jmol/jsmol/php/jsmol.php",
            serverURL: "{{ url_for('static', filename='jsmol/jsmol.php')}}",
            use: "HTML5",
            readyFunction: null,
            script: "load  {{url_for('static', filename='%s')}} ; animation MODE LOOP 0 0; animation FPS 20; animation on"
         }
         $("#jsmolmydiv").html(Jmol.getAppletHtml("jmolApplet0",Info))
   ''' % (backgroundcolor,nwoutfilename)
   if (restricted):
      msg4 += '''
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF")+Jmol.jmolButton(jmolApplet0, "%s","labels On")+Jmol.jmolButton(jmolApplet0, "select all;label off","labels Off") + Jmol.jmolButton(jmolApplet0, "mo homo","HOMO") + Jmol.jmolButton(jmolApplet0, "mo lumo","LUMO") +  Jmol.jmolButton(jmolApplet0, "mo previous","mo previous") +  Jmol.jmolButton(jmolApplet0, "mo next","mo next") ) 
      }
      );
   </script>
      ''' % (alabel)
   else:
      msg4 += '''
         $("#jsmolbtns").html(Jmol.jmolButton(jmolApplet0, "spin on","spin ON")+Jmol.jmolButton(jmolApplet0, "spin off","spin OFF")+Jmol.jmolButton(jmolApplet0, "%s","labels On")+Jmol.jmolButton(jmolApplet0, "select all;label off","labels Off") + Jmol.jmolButton(jmolApplet0, "mo homo +%s","alpha HOMO") + Jmol.jmolButton(jmolApplet0, "mo lumo +%s","alpha LUMO") +  Jmol.jmolButton(jmolApplet0, "mo homo","beta HOMO") + Jmol.jmolButton(jmolApplet0, "mo lumo","beta LUMO") +  Jmol.jmolButton(jmolApplet0, "mo previous","mo previous") +  Jmol.jmolButton(jmolApplet0, "mo next","mo next") ) 
      }
      );
   </script>
      ''' % (alabel,nshift,nshift)

   msg4 += '<span id=jsmolmydiv></span>\n'
   msg4 += '<span id=jsmolbtns></span>\n'
   msg4 += '<br><font color="443322" size="2"><p><a target=\"_blank\" href="http://wiki.jmol.org/index.php/JSmol">JSmol: an open-source HTML5 viewer for chemical structures in 3D</a></p></font><br>'
   msg4 += "<pre style=\"font-size:1.0em;color:black\">\n"

   return msg4





###########################################
#                                         #
#             xyzdat2glmol                #
#                                         #
###########################################
def xyzdat2glmol(xyzdat):
   sdf =  xyzdat2sdf(xyzdat).replace('\n','\\n')
   msg4 = "</pre>\n"
   msg4 += '<div id=\"view\" style=\"width: 400px; height: 400px; background-color: green;\"></div>\n'
   msg4 += '<script src=\"{{ url_for(\'static\', filename=\'glmol/jquery-1.7.min.js\')}}\"></script>\n'
   msg4 += '<script src=\"{{ url_for(\'static\', filename=\'glmol/Three49custom.js\')}}\"></script>\n'
   msg4 += '<script type=\"text/javascript\" src=\"{{ url_for(\'static\', filename=\'glmol/GLmol.js\')}}\"></script>\n'
   msg4 += '''
   <script type=\"text/javascript\"> 
      var data1 = \"%s\"
      var data2 = \"/Users/bylaska/dnan.xyz\\n OpenBabel09261614393D\\n\\n 20 20  0  0  0  0  0  0  0  0999 V2000\\n    0.8108    1.2609    0.2248 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.4453    0.6266    0.1486 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.5501   -0.7476   -0.0242 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.5983   -1.5109   -0.0513 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.8567   -0.9274    0.0820 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.9510    0.4405    0.2083 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    2.7370   -1.5501    0.0624 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    2.9124    0.9277    0.2739 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.0622    2.5751    0.2960 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.2134    3.5576   -0.3234 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.5207   -1.2098   -0.1051 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7123    1.3420    0.3515 N   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.4858   -2.9662   -0.2108 N   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6368   -3.4411   -0.3272 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.5263   -3.6135   -0.2183 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.6716    1.0041   -0.3277 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7339    2.1985    1.2281 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.8824    4.3493   -0.6471 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.5103    3.9401    0.3892 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.2978    3.1368   -1.1888 H   0  0  0  0  0  0  0  0  0  0  0  0\\n  1  9  1  0  0  0  0\\n  2  1  2  0  0  0  0\\n  2 12  1  0  0  0  0\\n  3  2  1  0  0  0  0\\n  4  3  2  0  0  0  0\\n  4  5  1  0  0  0  0\\n  5  6  2  0  0  0  0\\n  6  1  1  0  0  0  0\\n  6  8  1  0  0  0  0\\n  7  5  1  0  0  0  0\\n 10  9  1  0  0  0  0\\n 10 19  1  0  0  0  0\\n 11  3  1  0  0  0  0\\n 12 17  2  0  0  0  0\\n 13  4  1  0  0  0  0\\n 14 13  2  0  0  0  0\\n 15 13  2  0  0  0  0\\n 16 12  2  0  0  0  0\\n 18 10  1  0  0  0  0\\n 20 10  1  0  0  0  0\\nM  END\\n$$$$\\n\"

       var glmol = new GLmol(\"view\", true);
       glmol.defineRepresentation = function() {
          var all = this.getAllAtoms();
          var hetatm = this.removeSolvents(this.getHetatms(all));
          var asu = new THREE.Object3D();
   
          this.colorByAtom(all, { });
          this.colorByChain(all);
          //this.drawBondsAsStick(asu, hetatm, this.cylinderRadius, this.cylinderRadius);
          this.drawBondsAsStick(asu, hetatm, this.cylinderRadius / 2.0, this.cylinderRadius, true, true, 0.3);
          this.drawCartoon(asu, all, this.curveWidth, this.thickness);
          this.modelGroup.add(asu);
       };
       glmol.loadMoleculeStr(false, data1);
   </script>
   ''' % sdf
   msg4 += "<pre style=\"font-size:1.0em;color:black\">\n"

   return msg4


##########################################
#                                        #
#          xydata_plotdatajs             #
#                                        #
##########################################
def xydata_plotdatajs(edat,label,chart):

   title = label
   xylabels = ''
   if ('#Title' in edat):
      title = edat.split("#Title")[1].split('\n')[0]
   else:
      title = label
   if ('#Labels' in edat): xylabels = edat.split("#Labels")[1].split('\n')[0]
   xlabel0 = ''
   ylabel0 = ''
   if ('#Xlabel' in edat): xlabel0 = edat.split("#Xlabel")[1].split('\n')[0].strip()
   if ('#Ylabel' in edat): ylabel0 = edat.split("#Ylabel")[1].split('\n')[0].strip()

   elist = edat.strip().split("\n")
   while ("#" in elist[0]): 
      elist = elist[1:]

   ny = len(elist[0].split())-1
   hasheader = not isevalnum(elist[0].split()[0])
  
   if (hasheader):
      xlabel = elist[0].split()[0]
      ylabel = elist[0].split()[1]
      xdat = "['%s'," % (elist[0].split()[0])
      ydat = []
      for i in range(ny):
         ydat.append("['%s'," % (elist[0].split()[i+1]))
      elist = elist[1:]
   else:
      xlabel = 'x'
      ylabel = 'y data'
      xdat = "['x',"
      ydat = []
      for i in range(ny):
         ydat.append("['y%d'," % i)
      if (xylabels!=''):
         xylist = xylabels.split()
         xlabel = xylist[0]
         ylabel = xylist[1]
         xdat = "['%s'," % (xylist[0])
         for i in range(1,len(xylist)):
            ydat[i-1] = "['%s'," % (xylist[i])

   if (xlabel0==''): xlabel0=xlabel
   if (ylabel0==''): ylabel0=ylabel
   for ee in elist:
      ss = ee.split()
      if ("#" not in ss[0]):
         xdat += ss[0] + ", "
         for i in range(ny):
            ydat[i] += ss[i+1] + ", "
   xdat  = xdat.rstrip(',') + "]"
   for i in range(ny):
      ydat[i] = ydat[i].rstrip(',') + "]"


   msg4 = "</pre>\n"
   msg4 += '''
    <!--link href="{{url_for('static',filename='c3js/c3.min.css')}}" rel="stylesheet"-->
    <!--script type="text/javascript" src="{{url_for('static', filename='c3js/c3.min.js')}}"></script-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.6.9/c3.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://d3js.org/d3.v5.min.js" charset="utf-8"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.6.9/c3.min.js"></script>
    <br> <b> %s </b>
    <div id="%s"></div>
    <script type="text/javascript">
    var %s = c3.generate({
       bindto: '#%s',
       size: { height: 480, width: 800 },
       data: {
         //type: 'spline',
         x: '%s',
         columns: [
           %s  ''' % (title,chart,chart,chart,xlabel,xdat)
   for i in range(ny): msg4 += ", %s" % (ydat[i])
   msg4 += '''
         ]
       },
       axis: {
           x: {
               label: '%s',
               tick: {count: 10, format: d3.format(".2f"), culling: false}
           },
           y: {
               label: '%s'
           }
       }
    });
    </script>
    ''' % (xlabel0,ylabel0)

   msg4 += "<pre style=\"font-size:1.0em;color:black\">\n"

   return msg4







###########################################
#                                         #
#            ascii_plotter                #
#                                         #
###########################################
maxrow_ascii = 30
maxcol_ascii = 75
shift1_ascii = 2
shift2_ascii = 11
#maxcol_ascii = 86
xmin_ascii = 0.0
ymin_ascii = 0.0
xmax_ascii = 1.0
ymax_ascii = 1.0
def ascii_xscale(x):
   return int(round((x-xmin_ascii)*(maxcol_ascii-1)/(xmax_ascii-xmin_ascii)))

def ascii_yscale(y):
   return int(round((y-ymax_ascii)*(maxrow_ascii-1)/(ymin_ascii-ymax_ascii)))

def ascii_plotter(x,y,symbols,title,xlabel,ylabel,xmin,xmax,ymin,ymax,plotzero):
   global xmin_ascii
   global ymin_ascii
   global xmax_ascii
   global ymax_ascii

   xmin_ascii = xmin
   ymin_ascii = ymin
   xmax_ascii = xmax
   ymax_ascii = ymax
   shift_ascii = shift1_ascii+shift2_ascii
   point = []
   for k in range(maxrow_ascii):
      row = [' ']*(maxcol_ascii+shift_ascii)
      point.append(row)

   ### set y-axis ###
   for j in range(maxrow_ascii):
      point[j][shift1_ascii+10] = ":"

   if ((ascii_xscale(0.0)<(maxcol_ascii-1)) and (ascii_xscale(0.0)>0)):
      for j in range(maxrow_ascii):
         point[j][shift_ascii-1+ascii_xscale(0.00)] = "." 

   ### set x-axis ###
   for i in range(shift_ascii,maxcol_ascii+shift_ascii):
      point[ascii_yscale(0.0)][i] = "."


   ### set ylabels ###
   nstru = "%10.3e" % ymax
   nstrd = "%10.3e" % ymin
   for i in range(10):
      point[0][shift1_ascii+i] = nstru[i]
      point[maxrow_ascii-1][shift1_ascii+i] = nstrd[i]
   if ((ascii_yscale(0.0)<(maxrow_ascii-1)) and (ascii_yscale(0.0)>0)):
      point[ascii_yscale(0.00)][shift1_ascii+0]  = " "
      point[ascii_yscale(0.00)][shift1_ascii+1]  = "0"
      point[ascii_yscale(0.00)][shift1_ascii+2]  = "."
      point[ascii_yscale(0.00)][shift1_ascii+3]  = "0"
      point[ascii_yscale(0.00)][shift1_ascii+4]  = "0"
      point[ascii_yscale(0.00)][shift1_ascii+5]  = "0"
      point[ascii_yscale(0.00)][shift1_ascii+6]  = "e"
      point[ascii_yscale(0.00)][shift1_ascii+7]  = "+"
      point[ascii_yscale(0.00)][shift1_ascii+8]  = "0"
      point[ascii_yscale(0.00)][shift1_ascii+9] = "0"

   ### set ylabel ###
   jj = (maxrow_ascii-len(ylabel))//2
   for j in range(len(ylabel)):
       point[jj+j][0] = ylabel[j]

   ### plot points ###
   n = len(x)
   if (plotzero):
      for j in range(len(y)):
         s = symbols[j]
         for i in range(n):
            u = ascii_xscale(x[i])
            v = ascii_yscale(y[j][i])
            point[v][shift_ascii+u] = s
   else:
      yzero = ascii_yscale(0.0)
      for j in range(len(y)):
         s  = symbols[j]
         u  = ascii_xscale(x[0])
         v  = ascii_yscale(y[j][0])
         va = ascii_yscale(y[j][1])
         if ((v!=yzero) and (va!=yzero)): point[v][shift_ascii+u] = s
         for i in range(1,n-1):
            u  = ascii_xscale(x[i])
            vb = ascii_yscale(y[j][i-1])
            v  = ascii_yscale(y[j][i])
            va = ascii_yscale(y[j][i+1])
            if ((v!=yzero) and (vb!=yzero) and (va!=yzero)):
               point[v][shift_ascii+u] = s
         u  = ascii_xscale(x[n-1])
         vb = ascii_yscale(y[j][n-2])
         v  = ascii_yscale(y[j][n-1])
         if ((v!=yzero) and (vb!=yzero)): point[v][shift_ascii+u] = s
         


   msg = "\n"
   for i in range(shift_ascii+(maxcol_ascii-len(title))//2): msg += " " 
   msg += title+ "\n\n"
   for row in point:
      for col in row:
         msg += col
      msg += "\n"


   ### set xlabels ###
   for i in range(shift_ascii-1): msg += " "
   msg += "|"
   for i in range(shift_ascii+1,shift_ascii+(maxcol_ascii)//2): msg += "-"
   msg += "|"
   for i in range(shift_ascii+(maxcol_ascii)//2+1,(maxcol_ascii+shift_ascii)): msg += "-"
   msg += "|\n"
   msg += "      %10.3e                           %10.3e                            %10.3e\n" % (xmin_ascii,0.5*(xmin_ascii+xmax_ascii),xmax_ascii)
   msg += "\n"
   for i in range(shift_ascii+(maxcol_ascii-len(xlabel))//2): msg += " "
   msg += xlabel +"\n"
      #write(lunit,900) ,XL,(XL+XR)/2.0d0,XR
      #write(lunit,MyformatX) Xlabel
  #900 format(5x,E10.3,27x,E10.3,27x,E10.3)


   return msg






#############################################
#                                           #
#             clean_smiles                  #
#                                           #
#############################################

def clean_smiles(smiles):
   smiles2 = smiles[:]
   tags = ['^','mult','theory','xc','solvation_type','basis','theory_base','xc_base','basis_base','geometry_generation','calculation_type','rbond','rgroup']
   for tt in tags:
      if tt in smiles2:
         tag1 = tt+"{"
         tag2 = "}"
         msg2 = smiles2.split(tag1)
         msg3 = msg2[1].split(tag2)[0]
         smiles2 = smiles2.replace(tag1+msg3+tag2,"")
   return smiles2

#############################################
#                                           #
#             addspaces_reaction            #
#                                           #
#############################################
def addspaces_reaction(reaction):
   tags = ['^','mult','theory','xc','solvation_type','basis','calculation_type','property','priority','geometry_generation','SHE','rbond','rgroup']
   reaction2 = reaction[:]
   if (reaction2.find(">")!=-1):
      reaction2 = reaction2.replace(">","")
   if (reaction2.find("-->")==-1):
      reaction2 = reaction2.replace("--","-->")


   ### add spaces in front of tags ###
   for tag1 in tags: reaction2 = reaction2.replace(tag1," " + tag1)

   ### replace [ SHE] with [SHE] ###
   reaction2 = re.sub("\[\s*SHE\s*\]","[SHE]",reaction2)

   ### look for xc{mp2} and xc{ccsd(t)} ###
   reaction2 = reaction2.replace("xc{mp2}","theory{mp2}")
   reaction2 = reaction2.replace("xc{ccsd(t)}","theory{ccsd(t)}")
   reaction2 = reaction2.replace("xc{ccsd}","theory{ccsd}")
   reaction2 = reaction2.replace("xc{qsharp_chem}","theory{qsharp_chem}")
   

   return reaction2

#############################################
#                                           #
#             expand_reaction               #
#                                           #
#############################################
def expand_reaction(reaction):
   reaction2 = reaction
   if '~' in reaction:
      optiontag = reaction2.split('~')[1].strip()
      rr = reaction2.split('~')[0].strip()
      rr = rr.replace("\t"," ")
      rr = rr.replace("\n"," ")
      rr = rr.replace('\xc2', ' ')
      rr = rr.replace('\xa0', ' ')
      rr = rr.replace(" + "," " + optiontag + " + ")
      if (rr.strip().split("-->")[0] != ''):
         rr = rr.replace("-->"," " + optiontag + " --> ")
      rr = rr + " " + optiontag
      reaction2 = rr
   return reaction2


#############################################
#                                           #
#             fetch_esmiles_full            #
#                                           #
#############################################
def fetch_esmiles_full(hup,dbfile,table,esmiles):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   esmiles1=esmiles.strip()
   ss = esmiles1.split()

   smiles  = clean_smiles(ss[0])
   csmiles = cannonicalsmiles(smiles)

   inchi    = smiles2InChI(smiles)    #used because it includes charge in inchi
   inchikey = smiles2InChIKey(smiles) #used because it includes charge in inchikey

   xyzfile = wrkdir + "/" + tmpxyz1
   xxx = ""
   if ("xyzdata{" in esmiles1):
      xxx = " xyzdata{" + esmiles1.split("xyzdata{")[1].split("}")[0] + "}"
   smiles2xyz(smiles+xxx,xyzfile)
   inchi2    = xyz2InChI(xyzfile)     #inchi does not include charge
   inchikey2 = xyz2InChIKey(xyzfile)  #inchikey does not include charge
   mformula = xyz_molecular_formula(xyzfile)

   checklist = []
   checklist.append(inchi)
   checklist.append(inchi2)
   checklist.append(inchi)
   checklist.append(inchi2)
   checklist.append(inchikey)
   checklist.append(inchikey2)
   checklist.append(inchikey)
   checklist.append(inchikey2)
   checklist.append(mformula)
   wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?) and mformula=?"

   if 'theory{' in esmiles: 
      theory = esmiles.split('theory{')[1].split('}')[0]
      checklist.append(theory)
      wherestr += " and theory=?"

   if 'xc{' in esmiles:
      xc  = esmiles.split('xc{')[1].split('}')[0]
      checklist.append(xc)
      wherestr += " and xc=?"

   if 'basis{' in esmiles:
      basis  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      checklist.append(basis)
      wherestr += " and basis=?"

   if 'basisHZ{' in esmiles:
      basisHZ  = removespace_basis(esmiles.split('basisHZ{')[1].split('}')[0])
      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      checklist.append(basisHZ)
      wherestr += " and basisHZ=?"

   if '^{' in esmiles:
      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      checklist.append(charge)
      wherestr += " and charge=?"

   if 'mult{' in esmiles:
      mult = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      checklist.append(mult)
      wherestr += " and mult=?"

   if 'solvation_type' in esmiles:
      solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      checklist.append(solvation_type)
      wherestr += " and solvation_type=?"

   if 'calculation_type' in esmiles:
      calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]
      if solvation_type.lower()=='none':
         calculation_type = calculation_type.replace('c','')
      checklist.append(calculation_type)
      wherestr += " and calculation_type=?"

   wherestr2 = " where id=? ;"

   if (issqlite3):
      sqlcheck  = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      sqlcheck  = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])

   return rows2
 except:
   return []


def quote_comma_name(name):
   if ',' in name:
      cc = "\"" + name + "\""
   else:
      cc = name
   return cc

def fetch_csv_esmiles_full(hup,dbfile,table,columns_list,esmiles_list):
   eoln = "\n"
   csv_msg = "csv data block:" + eoln + eoln
   for c in columns_list:
      csv_msg += quote_comma_name(c) + ","
   csv_msg = csv_msg.rstrip(",")
   csv_msg += eoln

   for esmiles in esmiles_list:
      rows = fetch_esmiles_full(hup,dbfile,table,esmiles)
      for molecule in rows:
         msg = ""
         for column in columns_list:
            if (column.lower()=='id'):                msg += "%d," % molecule[0]
            if (column.lower()=='iupac'):             msg += "%s," % quote_comma_name(molecule[1])
            if (column.lower()=='mformula'):          msg += "%s," % molecule[2]
            if (column.lower()=='inchi'):             msg += "%s," % quote_comma_name(molecule[3])
            if (column.lower()=='smiles'):            msg += "%s," % molecule[4]
            if (column.lower()=='csmiles'):           msg += "%s," % molecule[5]
            if (column.lower()=='esmiles'):           msg += "%s," % quote_comma_name(molecule[6])
            if (column.lower()=='program'):           msg += "%s," % molecule[7]
            if (column.lower()=='calculation_type'):  msg += "%s," % molecule[8]
            if (column.lower()=='theory'):            msg += "%s," % molecule[9]
            if (column.lower()=='xc'):                msg += "%s," % molecule[10]
            if (column.lower()=='basis'):             msg += "%s," % quote_comma_name(molecule[11])
            if (column.lower()=='charge'):            msg += "%d," % molecule[12]
            if (column.lower()=='mult'):              msg += "%d," % molecule[13]
            if (column.lower()=='energy'):            msg += "%.6f," % molecule[14]
            if (column.lower()=='enthalpy'):          msg += "%.6f," % molecule[15]
            if (column.lower()=='entropy'):           msg += "%.3f," % molecule[16]
            if (column.lower()=='solvation_type'):    msg += "%s,"   % molecule[17]
            if (column.lower()=='solvation_energy'):  msg += "%.3f," % molecule[18]
            if (column.lower()=='sitkoff'):           msg += "%.3f," % molecule[19]
            if (column.lower()=='honig'):             msg += "%.3f," % molecule[20]
            if (column.lower()=='asa'):               msg += "%.3f," % molecule[21]
            if (column.lower()=='sav'):               msg += "%.3f," % molecule[22]
            if (column.lower()=='xyz_blob'):          msg += "%s,"   % molecule[23]
            if (column.lower()=='frequencies_blob'):  msg += "%s,"   % molecule[24]
            if (column.lower()=='eigenvalues_blob'):  msg += "%s,"   % molecule[25]
            if (column.lower()=='radial_distribution_blob'): msg += "%s," % molecule[26]
            if (column.lower()=='power_spectrum_blob'):      msg += "%s," % molecule[27]
            if (column.lower()=='filename'):                 msg += "%s," % quote_comma_name(molecule[28])
         msg = msg.rstrip(",")
         csv_msg += msg + eoln

   csv_msg += eoln + ":csv data block" + eoln

   return csv_msg


#############################################
#                                           #
#             fetch_jobinfo                 #
#                                           #
#############################################
def fetch_jobinfo(hup,dbfile,table,id):
 try:
   eoln = "\n"
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False


   checklist = []
   checklist.append(id)

   wherestr =  " where Id=?"

   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()


   ### id found? ###
   if (len(rows)>0):
      molecule = rows[0]
      msg  = "jobinfo: Id=%d, iupac=%s, filename=%s\n\n" % (id,molecule[1],molecule[28])
      cmd1 = "scp " + molecule[28] + " " + wrkdir +"/nwout.txt"
      if (":/" not in molecule[28]): cmd1 = cmd1.replace("scp","cp")
      print("cmd1=",cmd1)
      pexpect_command(cmd1,archivepassword)
      offile = open(wrkdir+"/nwout.txt","r")
      ttt = offile.read()
      offile.close()
      uuu = ttt.split("Job information")[1].split("Memory information")[0]
      uuu = uuu.rstrip()
      msg += "           Job information" + eoln
      msg += uuu + eoln
      msg += "    program version = %s\n\n" % molecule[7]
      msg += ":jobinfo Id=%d, iupac=%s, filename=%s\n" % (id,molecule[1],molecule[28])

   else:
      msg = "jobinfo:\n no nwout file for Id=%d\n:jobinfo\n" % id

   return msg

 except:
   return "fetch_jobinfo failed\n"





#############################################
#                                           #
#             fetch_nwout                   #
#                                           #
#############################################
def fetch_nwout(hup,dbfile,table,id):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   checklist = []
   checklist.append(id)

   wherestr =  " where Id=?"

   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()

   ### id found? ###
   if (len(rows)>0):
      molecule = rows[0]
      msg = "##################### start nwoutput #######################\n"
      msg += "nwout file for Id=%d\n\n" % id
      msg += molecule[28]
      msg += "\n\n"
      cmd1 = "scp " + molecule[28] + " " + wrkdir +"/nwout.txt"
      if (":/" not in molecule[28]): cmd1 = cmd1.replace("scp","cp")
      print("cmd1=",cmd1)
      pexpect_command(cmd1,archivepassword)
      cmd2 = "cat " + wrkdir +"/nwout.txt"
      print("cmd2=",cmd2)
      result = subprocess.check_output(cmd2,shell=True).decode("utf-8")
      msg += result
      msg += "##################### end nwoutput  #######################\n"
      #msg += "Datafile access is currently turned off.  This should be fixed by March 1st\nWe are very sorry for the inconvenience."
   else:
      msg = "no nwout file for Id=%d\n\n" % id

   return msg

 except:
   return "fetch_nwout failed\n"





#############################################
#                                           #
#              cmd_nwdatafile               #
#                                           #
#############################################
def cmd_nwdatafile(hup,dbfile,table,nwcmd):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   ### parse id, mycmd, and datafilename ###
   id = eval(nwcmd.lower().split("id=")[1].split()[0])
   mycmd = nwcmd.strip().lower().split()[0]
   if ("fetch"!=mycmd) and ("delete"!=mycmd):
      mycmd="fetch"
   datafilename = nwcmd.strip().split()[-1]

   checklist = []
   checklist.append(id)

   wherestr =  " where Id=?"
   setstr = " set data_filenames=? "

   if (issqlite3):
      sqlcheck  = "select id,data_filenames from " + table + wherestr
      sqlupdate = "update " + table + setstr + wherestr
   else:
      sqlcheck  = "select id,data_filenames from " + table + wherestr.replace('?','%s')
      sqlupdate = "update " + table + setstr.replace('?','%s') + wherestr.replace('?','%s')


   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()

      ### id found? ###
      if (len(rows)>0):
         molecule = rows[0]
         msg = "nwdatafile: %s Id=%d datafilename=%s\n\n" % (mycmd,id,datafilename)
         dnames = molecule[1]
         if (dnames is not None):
            gname = ''
            for nn in dnames.split():
               if datafilename in nn: gname = nn
            if (gname!=''):
               msg += "\n\n"
               ## retrieve gname datafile ##
               if mycmd=="fetch":
                  cmd1 = "scp " + gname + " " + wrkdir +"/nwout.txt"
                  if (":/" not in gname): cmd1 = cmd1.replace("scp","cp")
                  print("cmd1=",cmd1)
                  if (".cube" not in gname):
                     pexpect_command(cmd1,archivepassword)
                     cmd2 = "cat " + wrkdir +"/nwout.txt"
                     print("cmd2=",cmd2)
                     result = subprocess.check_output(cmd2,shell=True).decode("utf-8")
                  else:
                     result = "Datafile access to cube files is temporarilly not available. This should be fixed by March 1st.\nWe're very sorry for the inconvenience."
               ## remove gname datafile from list ##
               if mycmd=="delete":
                  dnames1 = dnames.replace(gname,"")
                  print("old datafilenames=",dnames)
                  print("new datafilenames=",dnames1)
                  updatelist = []
                  updatelist.append(dnames1.strip())
                  updatelist.append(id)
                  cur.execute(sqlupdate,updatelist)
                  result  = "old datafilenames="+dnames +"\n"
                  result += "new datafilenames="+dnames1+"\n"
            else:
               result = "nwdatafile does not exist\n\n"
         else:
            result = "no nwdatafiles\n\n"
         msg += result
      else:
         msg = "no nwdatafile file for Id=%d\n\n" % id


   return msg

 except:
   return "cmd_nwdatafile failed\n"




#############################################
#                                           #
#             fetch_xyz                     #
#                                           #
#############################################

def fetch_xyz(hup,dbfile,table,id):
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   checklist = []
   checklist.append(id)
   wherestr =  " where Id=?"
   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()

   ### id found? ###
   if (len(rows)>0):
      #molecule = rows[0]
      molecule023 = rows[0][23]
      if isinstance(molecule023,bytes): molecule023 = molecule023.decode("utf-8")
      msg = "xyz data for Id=%d\n\n" % id
      msg += "====== start xyzfile ======\n"
      msg += molecule023
      msg += "====== end xyzfile ======\n"
   else:
      msg = "no xyz data for Id=%d\n\n" % id

   return msg


#############################################
#                                           #
#             fetch_mol                     #
#                                           #
#############################################

def fetch_mol(hup,dbfile,table,id):
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   checklist = []
   checklist.append(id)
   wherestr =  " where Id=?"
   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()

   ### id found? ###
   if (len(rows)>0):
      #molecule = rows[0]
      molecule023 = rows[0][23]
      if isinstance(molecule023,bytes): molecule023=molecule023.decode("utf-8")
      msg = "mol data for Id=%d\n\n" % id
      msg += "====== start molfile ======\n"
      msg += xyzdat2mol(molecule023)
      msg += "====== end molfile ======\n"
   else:
      msg = "no mol data for Id=%d\n\n" % id

   return msg


#######################################  fetch_freq functions ##################################


#############################################
#                                           #
#           fetch_frequency_data            #
#                                           #
#############################################
def fetch_all_frequency_data(hup,dbfile,table,id):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   wherestr =  " where id=?"

   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')
   checklist = []
   checklist.append(id)

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      row = cur.fetchone()

   return row

 except:
   return ("","","","","","","","","")


#############################################
#                                           #
#             get_frequency_geometry        #
#                                           #
#############################################

# returns the geometry

def get_frequency_geometry(frequency_data):

   all_lines1 = frequency_data[23].split("\n")
   ### get the geometry ###
   nion = eval(all_lines1[0])
   name = []
   rxyz = []
   for ii in range(nion):
      ss = all_lines1[2+ii].split()
      name.append(ss[0])
      rxyz.append(eval(ss[1]))
      rxyz.append(eval(ss[2]))
      rxyz.append(eval(ss[3]))

   return (nion,name,rxyz)


#############################################
#                                           #
#             get_frequency                 #
#                                           #
#############################################

# returns the freqency and eigvector for a given frequency number, fnum.

def get_frequency(frequency_data,fnum):

   all_lines2 = frequency_data[24].split("\n")
   pcount_num = (fnum-1)/6
   shift      = (fnum-1)%6
   freqs = []
   freqdat = []
   count  = 0
   pcount = -1
   done = False
   for line in all_lines2:
     if (not done):
        if (pcount==pcount_num):
           count += 1
           if (count>1):
              if (len(line)<=5):
                 done = True
              else:
                 freqdat.append(line)
        if (not done):
           if (line.find("P.Frequency") != -1):
              count = 0
              pcount += 1
              if (pcount==pcount_num):
                 freqs.append(line)

   splt = freqs[0].split()
   w = eval(splt[shift+1])

   freq = []
   n = len(freqdat)
   for i in range(n):
      split = freqdat[i].split()
      #print(split[0],"  ",split[shift+1])
      freq.append(eval(split[shift+1]))

   return (w,freq)

def simpson(h,f):
   n = len(f)
   ss = f[0] + f[n-1]
   for i in range(1,n-1,2): ss += (4.0*f[i])
   for i in range(2,n-2,2): ss += (2.0*f[i])
   return ss*h/3.0



def get_hindered_energy_entropy(freqdata0):
   freqdata = freqdata0
   if isinstance(freqdata,bytes): freqdata = freqdata.decode("utf-8")
   AUKCAL=627.509469
   hindered_energy  = 0.0
   hindered_entropy = 0.0
   imhindered = False
   if (freqdata!=None):
      for hh in freqdata.split('Ucorrect =')[1:]: hindered_energy  += evalnum(hh.split('\n')[0].split()[0])/AUKCAL
      for hh in freqdata.split('Scorrect =')[1:]: hindered_entropy += evalnum(hh.split('\n')[0].split()[0])
      imhindered = True
   return (imhindered,hindered_energy,hindered_entropy)



#############################################
#                                           #
#           dos_frequencies                 #
#                                           #
#############################################

def dos_frequencies(plotdos,frequency_data):
   eoln = '\n'
   ngrid   = 501
   maxfreq = 4500.0
   minfreq = 0.1
   threshfreq = 500.0
   sigmas  = [10.0,50.0,100.0]
   pi      = 4.0*atan(1.0)

   ### extract frequencies ###
   #all_lines2 = frequency_data[24].split("\n")

   bfreq = frequency_data[24]
   if isinstance(bfreq,bytes): bfreq = bfreq.decode("utf-8")
   all_lines2 = bfreq.split("\n")

   freqs = []
   for line in all_lines2:
      if (line.find("P.Frequency") != -1):
         freqs += [ eval(s) for s in line.split()[1:]]

   nfreqs  = 0
   nlowest = 0
   for f in freqs:
      if (f<(-0.01)): nfreqs += 1
      if ((f>minfreq) and (f<threshfreq)): nlowest += 1

   ### extract IR weights ###
   foundir = False
   irweights = []
   ircount   = 0
   for line in all_lines2:
      if (foundir):
         ircount += 1
         if (line.find("----------------------------------------------------------------------------")!=-1):
            foundir = False
         elif (ircount>=3):
            ss = line.split()
            irweights.append(evalnum(ss[6]))
      if (line.find("Projected Infra Red Intensities") != -1):
         foundir = True
         irweights = []
         ircount   = 0
   if ((len(irweights)>0) and (len(irweights)==len(freqs)) and (len(freqs)>3)): foundir = True

   exact_dos_norm = len(freqs)-6.0
   msg0 =  "Total number of frequencies = %d" % len(freqs) + eoln
   msg0 += "Total number of negative frequencies = %d" % nfreqs + eoln
   for i in range(nfreqs):
      msg0 += "  - w_negative = %.1f cm-1" % freqs[i] + eoln
   msg0 += "Number of lowest frequencies = %d" % nlowest 
   msg0 +=  " (frequency threshold = %d " % threshfreq + ")" + eoln
   msg0 += "Exact dos norm = %.3f" % exact_dos_norm + eoln + eoln
   
   dw  = ((maxfreq-minfreq)/float(ngrid-1))
   ww  = []

   msg0 += "Generating vibrational DOS" + eoln
   doss  = []
   doss_lowest   = []
   for sigma in sigmas:
      scale  = 1.0/(sigma*sqrt(2.0*pi))
      omega2 = 1.0/(2.0*sigma*sigma)
      dos = []
      dos_lowest = []
      for i in range(ngrid):
         w = minfreq + i*dw
         ww.append(w)
         pp = 0.0
         pplow = 0.0
         low = 0
         for f in freqs:
            if (f>minfreq):
               x2 = (w-f)**2
               tt = scale*exp(-omega2*x2)
               pp += tt
               if (low<nlowest):
                  pplow += tt
                  low += 1
         dos.append(pp)
         dos_lowest.append(pplow)
      doss.append(dos)
      doss_lowest.append(dos_lowest)

   msg0 +=  "Generating model vibrational DOS to have a proper norm" + eoln
   doss_fixed =[]
   for k in range(len(doss)):
      dos = doss[k]
      dos_lowest = doss_lowest[k]
      dos_fixed = []
      dos_norm = simpson(dw,dos)
      dos_lowest_norm = simpson(dw,dos_lowest)
      if (dos_lowest_norm > 1.0e-8):
         fac = (exact_dos_norm-dos_norm)/dos_lowest_norm
      else:
         fac = 0.0
      for i in range(ngrid):
         pp = dos[i] + fac*dos_lowest[i]
         dos_fixed.append(pp)

      dos_fixed_norm = simpson(dw,dos_fixed)
      doss_fixed.append(dos_fixed)
      msg0 += "%.2f %.2f %.2f %.2f\n\n\n" % (sigmas[k],dos_norm,dos_lowest_norm,dos_fixed_norm)

   if (foundir):
      msg0 += "Generating IR Spectra" + eoln
      irdoss  = []
      irdoss_lowest   = []
      for sigma in sigmas:
         scale  = 1.0/(sigma*sqrt(2.0*pi))
         omega2 = 1.0/(2.0*sigma*sigma)
         irdos = []
         irdos_lowest = []
         for i in range(ngrid):
            w = minfreq + i*dw
            ww.append(w)
            pp = 0.0
            pplow = 0.0
            low = 0
            for j in range(len(freqs)):
               f   = freqs[j]
               irw0 = irweights[j]
               if (f>minfreq):
                  x2 = (w-f)**2
                  tt = irw0*scale*exp(-omega2*x2)
                  pp += tt
                  if (low<nlowest):
                     pplow += tt
                     low += 1
            irdos.append(pp)
            irdos_lowest.append(pplow)
         irdoss.append(irdos)
         irdoss_lowest.append(irdos_lowest)


   ## set up temporary gnuplot files
   dumbfilename       = wrkdir + "/dosplot-%d.dumb"    % ddrand
   gnufilename        = wrkdir + "/dosplot-%d.gnuplot" % ddrand
   vdosfilename       = wrkdir + "/vdos-%d.dat"        % ddrand
   vdos_modelfilename = wrkdir + "/vdos_model-%d.dat"  % ddrand
   freqfilename       = wrkdir + "/freq_data-%d.dat"   % ddrand
   irdosfilename      = wrkdir + "/irdos-%d.dat"        % ddrand
   irfreqfilename     = wrkdir + "/irfreq_data-%d.dat"   % ddrand


   #if plotdos:
   #   msg0 += "Writing vibrational density of states (DOS) to vdos.dat" + eoln
   #   #ofile = open("vdos.dat",'w')
   #   ofile = open(vdosfilename,'w')
   #   for i in range(ngrid):
   #      ofile.write("%f" % ww[i])
   #      for k in range(len(doss)):
   #         ofile.write(" %f" % doss[k][i])
   #      ofile.write("\n")
   #   ofile.close()
   #   msg0 += "Writing model vibrational density of states (DOS_FIXED) to vdos-model.dat" + eoln + eoln
   #   ofile = open("vdos-model.dat",'w')
   #   for i in range(ngrid):
   #      ofile.write("%f" % ww[i])
   #      for k in range(len(doss_fixed)):
   #         ofile.write(" %f" % doss_fixed[k][i])
   #      ofile.write("\n")
   #   ofile.close()
   #   if (foundir):
   #      msg0 += "Writing IR spectra to irdos.dat" + eoln
   #      #ofile = open("irdos.dat",'w')
   #      ofile = open(irdosfilename,'w')
   #      for i in range(ngrid):
   #         ofile.write("%f" % ww[i])
   #         for k in range(len(irdoss)):
   #            ofile.write(" %f" % irdoss[k][i])
   #         ofile.write("\n")
   #      ofile.close()

   # write tempory data files for gnuplot
   ofile = open(vdosfilename,'w')
   for i in range(ngrid):
      ofile.write("%f" % ww[i])
      for k in range(len(doss)):
         ofile.write(" %f" % doss[k][i])
      ofile.write("\n")
   ofile.close()
   ofile = open(vdos_modelfilename,'w')
   for i in range(ngrid):
      ofile.write("%f" % ww[i])
      for k in range(len(doss_fixed)):
         ofile.write(" %f" % doss_fixed[k][i])
      ofile.write("\n")
   ofile.close()
   if (foundir):
      ofile = open(irdosfilename,'w')
      for i in range(ngrid):
         ofile.write("%f" % ww[i])
         for k in range(len(irdoss)):
            ofile.write(" %f" % irdoss[k][i])
         ofile.write("\n")
      ofile.close()


   ### get database energies ###
   energy           = frequency_data[14]
   enthalpy         = frequency_data[15]
   entropy          = frequency_data[16]
   solvation_type   = frequency_data[17]
   solvation_energy = frequency_data[18]
   sitkoff          = frequency_data[19]
   (imhindered,hindered_energy,hindered_entropy) = get_hindered_energy_entropy(frequency_data[65])
     
   henthalpy = enthalpy + hindered_energy
   hentropy  = entropy  + hindered_entropy

   if solvation_type=='COSMO': solvation_energy = -solvation_energy + sitkoff

   temp = 298.15
   AUKCAL=627.509469
   c=2.998e10
   h=6.626e-27
   kgas=1.3807e-16
   Rgas = 1.98630/1000.00/AUKCAL

   msg0 += "Temperature=%7.2f " % (temp) + eoln + eoln
   ezero     = 0.0
   ethermal0 = 0.0
   Svib0     = 0.0
   for w in freqs:
      if (w>0.1):
         thetav = w*(h*c/kgas)
         if (temp>0.0):
            xdum   = exp(-thetav/temp)
         else:
            xdum = 0.0
         xdum   = xdum/(1.00-xdum)
         ethermal0 +=  (thetav*(0.50 + xdum)*Rgas)
         ezero += 0.5*thetav*Rgas
         xdum   = thetav/temp
         if (xdum>0.0):
            Svib0 += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)

   #ethermal0 += Rgas*temp*2.5 #translaton+(pv=RT) - atom
   #ethermal0 += Rgas*temp*3.5 #translaton+rotation+(pv=RT) - linear
   #ethermal0 += Rgas*temp*4.0 #translaton+rotation+(pv=RT) - not linear
   msg0 += "zero-point correction to energy                 = %8.3f kcal/mol (%10.6f)"%(ezero*AUKCAL,ezero) + eoln
   msg0 += "vibrational contribution to enthalpy correction = %8.3f kcal/mol (%10.6f)"%(ethermal0*AUKCAL,ethermal0) + eoln
   msg0 += "vibrational contribution to Entropy             = %8.3f cal/mol-k"%(Svib0*AUKCAL*1000.0) + eoln + eoln

   msg0 += "hindered rotor enthalpy correction              = %8.3f kcal/mol (%10.6f)"%(hindered_energy*AUKCAL,hindered_energy) + eoln
   msg0 += "hindered rotor entropy correction               = %8.3f cal/mol-k"%(hindered_entropy) + eoln + eoln

   jmagelist = []
   pmsg1 = ''
   hmsg1 = ''
   msg2 = ''
   for k in range(len(doss)):

      ## thermo for original DOS ##
      dos      = doss[k]
      ethermal = 0.0
      Svib     = 0.0
      for i in range(ngrid):
         w = ww[i]
         thetav = w*(h*c/kgas)
         xdum   = exp(-thetav/temp)
         xdum   = xdum/(1.00-xdum)
         ethermal +=  (thetav*(0.50 + xdum)*Rgas)*dos[i]*dw
         xdum   = thetav/temp
         if (xdum>0.0):
            Svib += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)*dos[i]*dw

      ## thermo for model DOS ##
      dos_fixed = doss_fixed[k]
      ethermal_fixed = 0.0
      Svib_fixed     = 0.0
      for i in range(ngrid):
         w = ww[i]
         thetav = w*(h*c/kgas)
         xdum   = exp(-thetav/temp)
         xdum   = xdum/(1.00-xdum)
         ethermal_fixed +=  (thetav*(0.50 + xdum)*Rgas)*dos_fixed[i]*dw
         xdum   = thetav/temp
         if (xdum>0.0):
            Svib_fixed += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)*dos_fixed[i]*dw

      ## plot DOS and model DOS ##
      if (k==1):

         #### ASCII PLOT ####
         dosplot = 'set output \"%s\"; set term dumb; set grid; set title \"Original and Model Vibrational Density of States (sigma=%.1f cm-1)\"; set ylabel \"VDOS\"; set xlabel \"w (cm-1)\";  plot \"%s\" using 1:%d with l title \"Original VDOS\",\"%s\" using 1:%d with l title \"Model VDOS\" ' % (dumbfilename,sigmas[k],vdosfilename,k+2,vdos_modelfilename,k+2)
         with open(gnufilename,'w') as f: 
            f.write(dosplot)
         try:
            os.system(gnuplot + gnufilename)
         except:
            print("failed system cmd=",gnuplot+gnufilename)
         with open(dumbfilename,'r') as f:
            msg = f.read()
            pmsg1 += msg + eoln

         #### PNG PLOT ####
         ddrand2     = random.randint(0,999999)
         pngfilename = wrkdir + "/dosplot-%d-%d.png" % (ddrand,ddrand2)
         pngname     = "dosplot-image-%d-%d"         % (ddrand,ddrand2)
         dosplot     = 'set output \"%s\"; set term png; set grid; set title \"Original and Model Vibrational Density of States (sigma=%.1f cm-1)\"; set ylabel \"VDOS\"; set xlabel \"w (cm-1)\";  plot \"%s\" using 1:%d with l title \"Original VDOS\",\"%s\" using 1:%d with l title \"Model VDOS\", \"%s\" using 1:2 with impulses title \"states\" ' % (pngfilename,sigmas[k],vdosfilename,k+2,vdos_modelfilename,k+2,freqfilename)
         jmagelist += [(pngfilename,pngname)]
         hmsg1 +='</pre><br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
         hmsg1 +="<pre style=\"font-size:1.0em;color:black\">\n"
         scale0 = 1.0/(sigmas[k]*sqrt(2.0*pi))
         with open(freqfilename,"w") as ff:
            for f0 in freqs:
               ff.write("%e %e\n" % (f0,scale0))
         with open(gnufilename,'w') as f: f.write(dosplot)
         try:
            os.system(gnuplot + gnufilename)
         except:
            print("failed system cmd=",gnuplot+gnufilename)


      ## plot IR Spectra ##
      if ((foundir) and (k==1)):

         #### ASCII PLOT ####
         dosplot = 'set output \"%s\"; set term dumb; set grid; set title \"IR Spectra (sigma=%.1f cm-1)\"; set ylabel \"absorption\"; set xlabel \"w (cm-1)\";  plot \"%s\" using 1:%d with l title \"IR Spectra\" ' % (dumbfilename,sigmas[k],irdosfilename,k+2)
         with open(gnufilename,'w') as f:
            f.write(dosplot)
         try:
            os.system(gnuplot + gnufilename)
         except:
            print("failed system cmd=",gnuplot+gnufilename)
         with open(dumbfilename,'r') as f:
            msg = f.read()
            pmsg1 += msg + eoln

         #### PNG PLOT ####
         ddrand2     = random.randint(0,999999)
         pngfilename = wrkdir + "/irdosplot-%d-%d.png" % (ddrand,ddrand2)
         pngname     = "irdosplot-image-%d-%d"         % (ddrand,ddrand2)
         dosplot     = 'set output \"%s\"; set term png; set grid; set title \"IR Spectra (sigma=%.1f cm-1)\"; set ylabel \"absorption\"; set xlabel \"w (cm-1)\";  plot \"%s\" using 1:%d with l title \"IR Spectra\", \"%s\" using 1:2 with impulses title \"states\" ' % (pngfilename,sigmas[k],irdosfilename,k+2,irfreqfilename)
         jmagelist += [(pngfilename,pngname)]
         hmsg1 +='</pre><br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
         hmsg1 +="<pre style=\"font-size:1.0em;color:black\">\n"
         scale0 = 1.0/(sigmas[k]*sqrt(2.0*pi))
         with open(irfreqfilename,"w") as ff:
            for j in range(len(freqs)):
               f0 = freqs[j]
               irw = irweights[j]
               ff.write("%e %e\n" % (f0,irw*scale0))
         with open(gnufilename,'w') as f: f.write(dosplot)
         try:
            os.system(gnuplot + gnufilename)
         except:
            print("failed system cmd=",gnuplot+gnufilename)

      
      gas_enthalpy0      = energy + enthalpy
      gas_enthalpy       = energy + enthalpy - ethermal0 + ethermal
      gas_enthalpy_fixed = energy + enthalpy - ethermal0 + ethermal_fixed

      gas_entropy0       = entropy/(AUKCAL*1000.0)
      gas_entropy        = entropy/(AUKCAL*1000.0)  + (Svib - Svib0)
      gas_entropy_fixed  = entropy/(AUKCAL*1000.0)  + (Svib_fixed - Svib0)

      gas_free_energy0      = gas_enthalpy0      - temp*gas_entropy0
      gas_free_energy       = gas_enthalpy       - temp*gas_entropy
      gas_free_energy_fixed = gas_enthalpy_fixed - temp*gas_entropy_fixed

      sol_free_energy0      = gas_free_energy0      + solvation_energy/AUKCAL
      sol_free_energy       = gas_free_energy       + solvation_energy/AUKCAL
      sol_free_energy_fixed = gas_free_energy_fixed + solvation_energy/AUKCAL

      msg2 += "DOS sigma = %f\n" % sigmas[k]
      msg2 += "  -       vibrational DOS enthalpy correction = %10.6f kcal/mol (%8.3f kcal/mol)\n" %  (ethermal,ethermal*AUKCAL)
      msg2 += "  - model vibrational DOS enthalpy correction = %10.6f kcal/mol (%8.3f kcal/mol)\n" %  (ethermal_fixed,ethermal_fixed*AUKCAL)
      msg2 += "  -       vibrational DOS Entropy             = %10.6f (%8.3f cal/mol-k)\n"  %  (Svib,Svib*AUKCAL*1000.0)
      msg2 += "  - model vibrational DOS Entropy             = %10.6f (%8.3f cal/mol-k)\n\n"  %  (Svib_fixed,Svib_fixed*AUKCAL*1000.0)
      msg2 += "  - original      gas Energy       = %12.6f (%8.3f kcal/mol)\n\n"  % (energy,                  energy*AUKCAL)
      msg2 += "  - original      gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_enthalpy0,     gas_enthalpy0*AUKCAL,(gas_enthalpy0-gas_enthalpy0)*AUKCAL)
      msg2 += "  - unajusted DOS gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_enthalpy,      gas_enthalpy*AUKCAL,(gas_enthalpy-gas_enthalpy0)*AUKCAL)
      msg2 += "  - model     DOS gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n\n"  % (gas_enthalpy_fixed,gas_enthalpy_fixed*AUKCAL,(gas_enthalpy_fixed-gas_enthalpy0)*AUKCAL)
      msg2 += "  - original      gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n" % (gas_entropy0,     gas_entropy0*AUKCAL*1000.0,(gas_entropy0-gas_entropy0)*AUKCAL*1000.0)
      msg2 += "  - unajusted DOS gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n" % (gas_entropy,      gas_entropy*AUKCAL*1000.0,(gas_entropy-gas_entropy0)*AUKCAL*1000.0)
      msg2 += "  - model     DOS gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n\n" % (gas_entropy_fixed,gas_entropy_fixed*AUKCAL*1000.0,(gas_entropy_fixed-gas_entropy0)*AUKCAL*1000.0)
      msg2 += "  - original       gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_free_energy0,     gas_free_energy0*AUKCAL,(gas_free_energy0-gas_free_energy0)*AUKCAL)
      msg2 += "  - unadjusted DOS gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_free_energy,      gas_free_energy*AUKCAL,(gas_free_energy-gas_free_energy0)*AUKCAL)
      msg2 += "  - model      DOS gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n\n"  % (gas_free_energy_fixed,gas_free_energy_fixed*AUKCAL,(gas_free_energy_fixed-gas_free_energy0)*AUKCAL)
      msg2 += "  - original       sol Free Energy = %12.6f (%8.3f kcal/mol)\n"  % (sol_free_energy0,     sol_free_energy0*AUKCAL)
      msg2 += "  - unadjusted DOS sol Free Energy = %12.6f (%8.3f kcal/mol)\n"  % (sol_free_energy,      sol_free_energy*AUKCAL)
      msg2 += "  - model      DOS sol Free Energy = %12.6f (%8.3f kcal/mol)\n\n"  % (sol_free_energy_fixed,sol_free_energy_fixed*AUKCAL)

      if imhindered:

         gas_enthalpy0      = energy + henthalpy
         gas_enthalpy       = energy + henthalpy - ethermal0 + ethermal
         gas_enthalpy_fixed = energy + henthalpy - ethermal0 + ethermal_fixed

         gas_entropy0       = hentropy/(AUKCAL*1000.0)
         gas_entropy        = hentropy/(AUKCAL*1000.0)  + (Svib - Svib0)
         gas_entropy_fixed  = hentropy/(AUKCAL*1000.0)  + (Svib_fixed - Svib0)

         gas_free_energy0      = gas_enthalpy0      - temp*gas_entropy0
         gas_free_energy       = gas_enthalpy       - temp*gas_entropy
         gas_free_energy_fixed = gas_enthalpy_fixed - temp*gas_entropy_fixed

         sol_free_energy0      = gas_free_energy0      + solvation_energy/AUKCAL
         sol_free_energy       = gas_free_energy       + solvation_energy/AUKCAL
         sol_free_energy_fixed = gas_free_energy_fixed + solvation_energy/AUKCAL

         msg2 += "DOS sigma = %f - Estimates including Hindered Rotor Corrections\n" % sigmas[k]
         msg2 += "  -       vibrational DOS enthalpy correction = %10.6f kcal/mol (%8.3f kcal/mol)\n" %  (ethermal,ethermal*AUKCAL)
         msg2 += "  - model vibrational DOS enthalpy correction = %10.6f kcal/mol (%8.3f kcal/mol)\n" %  (ethermal_fixed,ethermal_fixed*AUKCAL)
         msg2 += "  -       vibrational DOS Entropy             = %10.6f (%8.3f cal/mol-k)\n"  %  (Svib,Svib*AUKCAL*1000.0)
         msg2 += "  - model vibrational DOS Entropy             = %10.6f (%8.3f cal/mol-k)\n\n"  %  (Svib_fixed,Svib_fixed*AUKCAL*1000.0)
         msg2 += "  - original      gas Energy       = %12.6f (%8.3f kcal/mol)\n\n"  % (energy,                  energy*AUKCAL)
         msg2 += "  - original      gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_enthalpy0,     gas_enthalpy0*AUKCAL,(gas_enthalpy0-gas_enthalpy0)*AUKCAL)
         msg2 += "  - unajusted DOS gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_enthalpy,      gas_enthalpy*AUKCAL,(gas_enthalpy-gas_enthalpy0)*AUKCAL)
         msg2 += "  - model     DOS gas Enthalpy     = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n\n"  % (gas_enthalpy_fixed,gas_enthalpy_fixed*AUKCAL,(gas_enthalpy_fixed-gas_enthalpy0)*AUKCAL)
         msg2 += "  - original      gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n" % (gas_entropy0,     gas_entropy0*AUKCAL*1000.0,(gas_entropy0-gas_entropy0)*AUKCAL*1000.0)
         msg2 += "  - unajusted DOS gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n" % (gas_entropy,      gas_entropy*AUKCAL*1000.0,(gas_entropy-gas_entropy0)*AUKCAL*1000.0)
         msg2 += "  - model     DOS gas Entropy      = %12.6f (%8.3f cal/mol-k,delta=%8.3f)\n\n" % (gas_entropy_fixed,gas_entropy_fixed*AUKCAL*1000.0,(gas_entropy_fixed-gas_entropy0)*AUKCAL*1000.0)
         msg2 += "  - original       gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_free_energy0,     gas_free_energy0*AUKCAL,(gas_free_energy0-gas_free_energy0)*AUKCAL)
         msg2 += "  - unadjusted DOS gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n"  % (gas_free_energy,      gas_free_energy*AUKCAL,(gas_free_energy-gas_free_energy0)*AUKCAL)
         msg2 += "  - model      DOS gas Free Energy = %12.6f (%8.3f kcal/mol, delta=%8.3f)\n\n"  % (gas_free_energy_fixed,gas_free_energy_fixed*AUKCAL,(gas_free_energy_fixed-gas_free_energy0)*AUKCAL)
         msg2 += "  - original       sol Free Energy = %12.6f (%8.3f kcal/mol)\n"  % (sol_free_energy0,     sol_free_energy0*AUKCAL)
         msg2 += "  - unadjusted DOS sol Free Energy = %12.6f (%8.3f kcal/mol)\n"  % (sol_free_energy,      sol_free_energy*AUKCAL)
         msg2 += "  - model      DOS sol Free Energy = %12.6f (%8.3f kcal/mol)\n\n"  % (sol_free_energy_fixed,sol_free_energy_fixed*AUKCAL)


   if (not foundir): irweights = [0.0]*len(freqs)
   tid = frequency_data[0]
   space = ' '
   msg2 += "\n\n"
   msg2 += "Normal Mode    Frequency (cm-1)     IR Intensity (arbitrary)\n"
   msg2 += "-----------    ----------------     ------------------------\n"
   for j in range(len(freqs)):
      #link = "https://arrows.emsl.pnnl.gov/api/frequency/%22"
      link = ARROWS_API_HOME + "frequency/%22"
      link += " %d %d " % (tid,j+1)
      link += "%22"
      f0 = freqs[j]
      irw = irweights[j]
      num1 = "%d" % (j+1)
      num2 = "%.3f" % (f0)
      msg2 += space * (11-len(num1)) + "<a target=\"_blank\" href=\"" + link + "\">" + num1 + "</a>"
      msg2 += space * (20-len(num2)) + "<a target=\"_blank\" href=\"" + link + "\">" + num2 + "</a>"
      msg2 += "%29.3f\n" % (irw)
      #msg2 += "%11d %19.3f %28.3f\n" % (j+1,f0,irw)
   msg2 += "\n\n"

   try:
      os.unlink(dumbfilename)
      os.unlink(gnufilename)
      os.unlink(vdosfilename)
      os.unlink(vdos_modelfilename)
      os.unlink(freqfilename)
      if (foundir):
         os.unlink(irdosfilename)
         os.unlink(irfreqfilename)
   except:
      print("chemdb_freq: Failed to delete temporary gnuplot files")

   pmsg = msg0 + pmsg1 + msg2
   hmsg = msg0 + hmsg1 + msg2
   return (pmsg,hmsg,jmagelist)

# Thermal correction to Enthalpy   =  217.652 kcal/mol  (  0.346851 au)
#- Vibrational                  =  107.470 cal/mol-K


#############################################
#                                           #
#             plot_frequency                #
#                                           #
#############################################

def plot_frequency(frequency_data,fnum):
 try:
   
   ### get the geometry ###
   (nion,name,rxyz) =  get_frequency_geometry(frequency_data)

   ### get the frequency ###
   (w,freq) = get_frequency(frequency_data,fnum)

   xyzfile = wrkdir + "/" + "tmpxyz1-%d.xyz" % ddrand
   print("\n\nTrajectory for freq id=",id," fnum=",fnum,"  w(cm-1)=",w," - Generating xyzfile = ",xyzfile)
   xfile = open(xyzfile,'w')
   for k in range(-20,21):
      xfile.write("%d\n\n" % nion)
      for i in range(nion):
         x = rxyz[3*i]   + 0.11*k*freq[3*i]
         y = rxyz[3*i+1] + 0.11*k*freq[3*i+1]
         z = rxyz[3*i+2] + 0.11*k*freq[3*i+2]
         xfile.write("%s   %f %f %f\n" % (name[i],x,y,z))
   xfile.close()

   #cmd6 = "/Applications/\"VMD 1.8.6.app\"/Contents/Resources/VMD.app/Contents/MacOS/VMD " + xyzfile
   cmd6 = "/Applications/iMol.app/Contents/MacOS/iMol " + xyzfile
   #cmd6 = "/home/bylaska/bin/vmd " + xyzfile
   os.system(cmd6)

   ### remove temporary xyzfile ###
   try:
      os.unlink(xyzfile)
   except:
      print("chemdb_freq: Failed to remove " + xyzfile)


 except:
   print("frequency %d in id=%d not found" % (fnum,id))

#############################################
#                                           #
#             analyze_frequency             #
#                                           #
#############################################
def analyze_frequency(fnum,w):
   temp = 298.15
   AUKCAL=627.509469
   c=2.998e10
   h=6.626e-27
   kgas=1.3807e-16
   Rgas = 1.98630/1000.00/AUKCAL

   msg = "Temperature=%7.2f  freq(%d)= %8.3f cm-1\n" % (temp,fnum,w)

   if (w>1.0e-8):
      thetav = w*(h*c/kgas)
      xdum   = exp(-thetav/temp)
      xdum   = xdum/(1.00-xdum)
      ethermal =  thetav*(0.50 + xdum)*Rgas
      xdum   = thetav/temp
      if (xdum>0.0):
         Svib   =  (xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas
      else:
         Svib = 0.0
      msg += "  - contribution to thermal correction to enthalpy= %8.3f kcal/mol (%10.6f)\n" %  (ethermal*AUKCAL,ethermal)
      msg += "  - contribution to Entropy                       = %8.3f cal/mol-k\n"       %  (Svib*AUKCAL*1000.0)

   return msg





#############################################
#                                           #
#             write_hrotors                 #
#                                           #
#############################################
def write_hrotors(tid,hrotors_blob):

   jmagelist = []
   pmsg = ''
   hmsg = ''
   eoln = '\n'
   bstr =  '#@@@@@@@@@@@@@@@@@@@@@@@@ START ROTOR @@@@@@@@@@@@@@@@@@@@@@@@@@' + eoln
   estr =  '#@@@@@@@@@@@@@@@@@@@@@@@@ END ROTOR   @@@@@@@@@@@@@@@@@@@@@@@@@@' + eoln

   ## set up temporary gnuplot files
   dumbfilename       = wrkdir + "/hrotorplot-%d.dumb"    % ddrand
   gnufilename        = wrkdir + "/hrotorplot-%d.gnuplot" % ddrand
   hrotorfilename     = wrkdir + "/hrotorplot-%d.dat"     % ddrand

   #for aaa in hrotors_blob.split(bstr)[1:]:
   hhrot = hrotors_blob
   if isinstance(hhrot,bytes): hhrot=hhrot.decode("utf-8")
   for aaa in hhrot.split(bstr)[1:]:
      bbb = aaa.split(estr)[0]
      hrotor_blob =  bbb + estr

      pmsg += bstr.replace("#@@","") 
      hmsg += bstr.replace("#@@","")

      bondgroup  = "rbond="    + hrotor_blob.split("rbond    =")[1].split("\n")[0].strip() + "; "
      bondgroup += "rgroup="   + hrotor_blob.split("rgroup   =")[1].split("\n")[0].strip() + "; "
      bondgroup += "rsym_num=" + hrotor_blob.split("rsym_num =")[1].split("\n")[0].strip() 

      rbond  = " rbond:"  + hrotor_blob.split("rbond    =")[1].split("\n")[0].strip() + ":rbond"
      rgroup = " rgroup:" + hrotor_blob.split("rgroup   =")[1].split("\n")[0].strip() + ":rgroup"

      #link = "https://arrows.emsl.pnnl.gov/api/frequency/%22"
      link = ARROWS_API_HOME + "frequency/%22"
      link += " %d %d " % (tid,-1) + rbond + rgroup
      link += "%22"
      rmsg = " <a target=\"_blank\" href=\"" + link + "\">rotation xyz movie</a>\n"

      ### generate potential file ###
      potential =  [evalnum(p)  for p in hrotor_blob.split('hindered potential =')[1].split('\n')[0].strip().split()]
      p0 = potential[0]
      nn = len(potential)
      #dphi = 2*math.pi/float(nn)
      dphi = 360.0/float(nn)
      with open(hrotorfilename,"w") as ff:
         ii = 0
         for p in potential:
            ff.write("%e %e\n" % (ii*dphi,(p-p0)*27.2116*23.06))
            ii += 1

      #### ASCII PLOT ####
      hrotorplot = 'set output \"%s\"; set term dumb; set grid; set xrange [0:360]; set title \"Hindered Rotor Potential (%s)\"; set ylabel \"Erotate (kcal/mol)\"; set xlabel \"theta (degrees)\";  plot \"%s\" using 1:2 with l title \"hindered potential\" ' % (dumbfilename,bondgroup,hrotorfilename)
      with open(gnufilename,'w') as f:
            f.write(hrotorplot)
      try:
         os.system(gnuplot + gnufilename)
      except:
         print("failed system cmd=",gnuplot+gnufilename)
      with open(dumbfilename,'r') as f:
         msg = f.read()
         pmsg += msg + eoln

      #### PNG PLOT ####
      ddrand2     = random.randint(0,999999)
      pngfilename = wrkdir + "/hrotorplot-%d-%d.png" % (ddrand,ddrand2)
      pngname     = "hrotorplot-image-%d-%d"         % (ddrand,ddrand2)
      dosplot     = 'set output \"%s\"; set term png; set grid; set xrange [0:360]; set title \"Hindered Rotor Potential (%s)\"; set ylabel \"Energy (kcal/mol)\"; set xlabel \"theta (degrees)\";  plot \"%s\" using 1:2 with l title \"hindered potential\" ' % (pngfilename,bondgroup,hrotorfilename)
      jmagelist += [(pngfilename,pngname)]
      hmsg +='</pre><br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
      hmsg +="<pre style=\"font-size:1.0em;color:black\">"

      with open(gnufilename,'w') as f: f.write(dosplot)
      try:
         os.system(gnuplot + gnufilename)
      except:
         print("failed system cmd=",gnuplot+gnufilename)


      pmsg += rmsg + hrotor_blob.replace("#@@","") + eoln
      hmsg += rmsg + hrotor_blob.replace("#@@","") + eoln

   ### remove tmp datafiles"
   try:
      os.unlink(dumbfilename)
      os.unlink(gnufilename)
      os.unlink(hrotorfilename)
   except:
      print("hrotor_print: Failed to delete temporary gnuplot files")

   return (pmsg,hmsg,jmagelist)


#############################################
#                                           #
#          write_reactions_data             #
#                                           #
#############################################
def write_reactions_data(freqdata):
 
   result9 = "\n\n"
   result9 += "+-------------------------------------+\n"
   result9 += "| Reactions Contained in the Database |\n"
   result9 += "+-------------------------------------+\n"

   if freqdata[29] is not None:
      if (len(freqdata[29])>0):
         cmd9 = chemdb_balance_reaction + "-k " + freqdata[29]
         result9 += subprocess.check_output(cmd9,shell=True).decode("utf-8")

   return result9


#############################################
#                                           #
#          write_energetic_data             #
#                                           #
#############################################
def write_energetic_data(freqdata):

   eoln = "\n"
   msg0 =  "+----------------+" + eoln
   msg0 += "| Energetic Data |" + eoln
   msg0 += "+----------------+" + eoln + eoln
   msg0 += "Id       = %d " % id + eoln

   iupac    = freqdata[1]
   mformula = freqdata[2]
   inchi    = freqdata[3]
   inchikey = freqdata[29]
   esmiles  = freqdata[6]
   asciiart = freqdata[34]
   calculation_type = freqdata[8]
   theory           = freqdata[9]
   xc               = freqdata[10]
   basis            = freqdata[11]
   charge           = freqdata[12]
   mult             = freqdata[13]
   energy           = freqdata[14]
   enthalpy         = freqdata[15]
   entropy          = freqdata[16]
   solvation_type   = freqdata[17]
   solvation_energy = freqdata[18]
   sitkoff          = freqdata[19]
   honig            = freqdata[20]
   area             = freqdata[21]
   volume           = freqdata[22]
   if solvation_type=='COSMO': solvation_energy = -solvation_energy + sitkoff
   msg0 += "iupac    = " + iupac + eoln
   msg0 += "mformula = " + mformula + eoln
   msg0 += "inchi    = " + inchi + eoln
   msg0 += "inchikey = " + inchikey + eoln
   msg0 += "esmiles  = " + esmiles + eoln

   msg0 += "calculation_type = " + calculation_type + eoln
   msg0 += "theory           = " + theory + eoln
   msg0 += "xc               = " + xc + eoln
   msg0 += "basis            = " + basis + eoln
   msg0 += "charge,mult      = %d %d" % (charge,mult) + eoln
   msg0 += "energy           = %14.6f Hartrees"  % energy + eoln
   msg0 += "enthalpy correct.= %14.6f Hartrees"  % enthalpy + eoln
   msg0 += "entropy          = %14.3f cal/mol-K" % entropy + eoln
   msg0 += "solvation energy = %14.3f kcal/mol  solvation_type = %s" % (solvation_energy,solvation_type) + eoln
   msg0 += "Sitkoff cavity dispersion          = %14.3f kcal/mol" % sitkoff + eoln
   msg0 += "Honig cavity dispersion            = %14.3f kcal/mol" %  honig + eoln
   msg0 += "ASA solvent accesible surface area = %14.3f Angstrom2" % area + eoln
   msg0 += "ASA solvent accesible volume       = %14.3f Angstrom3" % volume + eoln
   msg0 += eoln + eoln + eoln

   return msg0


#############################################
#                                           #
#             fetch_freq                    #
#                                           #
#############################################
def fetch_freq(hup,dbfile,table,id):

   imgagelist = []
   pmsg = ''
   hmsg = ''

   eoln = "\n"
   #msg0 =  "+----------------+" + eoln
   #msg0 += "| Energetic Data |" + eoln
   #msg0 += "+----------------+" + eoln + eoln

   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False
   #msg0 += "table name      =" + table + eoln
   #msg0 += "arrows id       = %d " % id + eoln

   freqdata = fetch_all_frequency_data(hup,dbfile,table,id)

   #iupac    = freqdata[1]
   #mformula = freqdata[2]
   #inchi    = freqdata[3]
   #inchikey = freqdata[29]
   #esmiles  = freqdata[6]
   asciiart = freqdata[34]
   #calculation_type = freqdata[8]
   #theory           = freqdata[9]
   #xc               = freqdata[10]
   #basis            = freqdata[11]
   #charge           = freqdata[12]
   #mult             = freqdata[13]
   #energy           = freqdata[14]
   #enthalpy         = freqdata[15]
   #entropy          = freqdata[16]
   #solvation_type   = freqdata[17]
   #solvation_energy = freqdata[18]
   #sitkoff          = freqdata[19]
   #honig            = freqdata[20]
   #area             = freqdata[21]
   #volume           = freqdata[22]
   #if solvation_type=='COSMO': solvation_energy = -solvation_energy + sitkoff
   #msg0 += "iupac    = " + iupac + eoln
   #msg0 += "mformula = " + mformula + eoln
   #msg0 += "inchi    = " + inchi + eoln
   #msg0 += "inchikey = " + inchikey + eoln
   #msg0 += "esmiles  = " + esmiles + eoln
#
   #msg0 += "calculation_type = " + calculation_type + eoln
   #msg0 += "theory           = " + theory + eoln
   #msg0 += "xc               = " + xc + eoln
   #msg0 += "basis            = " + basis + eoln
   #msg0 += "charge,mult      = %d %d" % (charge,mult) + eoln
   #msg0 += "energy           = %14.6f Hartrees"  % energy + eoln
   #msg0 += "enthalpy correct.= %14.6f Hartrees"  % enthalpy + eoln
   #msg0 += "entropy          = %14.3f cal/mol-K" % entropy + eoln
   #msg0 += "solvation energy = %14.3f kcal/mol  solvation_type = %s" % (solvation_energy,solvation_type) + eoln
   #msg0 += "Sitkoff cavity dispersion          = %14.3f kcal/mol" % sitkoff + eoln
   #msg0 += "Honig cavity dispersion            = %14.3f kcal/mol" %  honig + eoln
   #msg0 += "ASA solvent accesible surface area = %14.3f Angstrom2" % area + eoln
   #msg0 += "ASA solvent accesible volume       = %14.3f Angstrom3" % volume + eoln
   #msg0 += eoln + eoln + eoln
   msg0  = "+----------------------------------------+" + eoln
   msg0 += "| Vibrational Density of States Analysis |" + eoln
   msg0 += "+----------------------------------------+" + eoln + eoln

   msg1  = "chemical_structure_asciiart  = " +eoln
   msg1 += asciiart +eoln


   (pmsg2,hmsg2,jmagelist) = dos_frequencies(True,freqdata)

   if (freqdata[65]==None):
      pmsg4 = "No Hindered Rotor Data" + eoln
      hmsg4 = "No Hindered Rotor Data" + eoln
   else:
      (pmsg4,hmsg4,jmagelist4) = write_hrotors(freqdata[0],freqdata[65])
      jmagelist += jmagelist4

   #msg4 =  "+---------------------------+"
   #msg4 += "| Analyzing Low Frequencies |"
   #msg4 += "+---------------------------+\n"
   #for f in range(len(freqdata)):
   #   (w,freq) = get_frequency(freqdata,f)
   #   if (w<250.0):
   #      msg4 += analyze_frequency(f,w)

   pmsg = msg0 + msg1 + pmsg2 + pmsg4
   hmsg = msg0        + hmsg2 + hmsg4

   return (pmsg,hmsg,jmagelist)



#############################################
#                                           #
#           model_energies_frequencies      #
#                                           #
#############################################

def model_correct_frequencies(frequency_data,sigma=50.0,threshfreq=500.0,minfreq=0.1,maxfreq=4500.0):
   #maxfreq = 4500.0
   #minfreq = 0.1
   #threshfreq = 500.0
   ngrid   = 501
   pi      = 4.0*atan(1.0)

   #all_lines2 = frequency_data[24].split("\n")
   fdat = frequency_data[24]
   if isinstance(fdat,bytes): fdat = fdat.decode("utf-8")
   all_lines2 = fdat.split("\n")
   freqs = []
   for line in all_lines2:
      if (line.find("P.Frequency") != -1):
         freqs += [ eval(s) for s in line.split()[1:]]

   nfreqs  = 0
   nlowest = 0
   for f in freqs:
      if (f<(-0.01)): nfreqs += 1
      if ((f>minfreq) and (f<threshfreq)): nlowest += 1

   exact_dos_norm = len(freqs)-6.0

   dw  = ((maxfreq-minfreq)/float(ngrid-1))
   ww  = []
   
   scale  = 1.0/(sigma*sqrt(2.0*pi))
   omega2 = 1.0/(2.0*sigma*sigma)
   dos = []
   dos_lowest = []
   for i in range(ngrid):
      w = minfreq + i*dw
      ww.append(w)
      pp = 0.0
      pplow = 0.0
      low = 0
      for f in freqs:
         if (f>minfreq):
            x2 = (w-f)**2
            tt = scale*exp(-omega2*x2)
            pp += tt
            if (low<nlowest):
               pplow += tt
               low += 1
      dos.append(pp)
      dos_lowest.append(pplow)

   dos_fixed = []
   dos_norm = simpson(dw,dos)
   dos_lowest_norm = simpson(dw,dos_lowest)
   if (dos_lowest_norm > 1.0e-8):
      fac = (exact_dos_norm-dos_norm)/dos_lowest_norm
   else:
      fac = 0.0
   for i in range(ngrid):
      pp = dos[i] + fac*dos_lowest[i]
      dos_fixed.append(pp)

   dos_fixed_norm = simpson(dw,dos_fixed)

   ### get database energies ###
   energy           = frequency_data[14]
   enthalpy         = frequency_data[15]
   entropy          = frequency_data[16]
   solvation_type   = frequency_data[17]
   solvation_energy = frequency_data[18]
   sitkoff          = frequency_data[19]
   if solvation_type=='COSMO': solvation_energy = -solvation_energy + sitkoff

   temp = 298.15
   AUKCAL=627.509469
   c=2.998e10
   h=6.626e-27
   kgas=1.3807e-16
   Rgas = 1.98630/1000.00/AUKCAL

   
   ethermal0 = 0.0
   Svib0     = 0.0
   for w in freqs:
      if (w>0.1):
         thetav = w*(h*c/kgas)
         if (temp>0.0):
            xdum   = exp(-thetav/temp)
         else:
            xdum = 0.0
         xdum   = xdum/(1.00-xdum)
         ethermal0 +=  (thetav*(0.50 + xdum)*Rgas)
         xdum   = thetav/temp
         if (xdum>0.0):
            Svib0 += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)


   ### thermo for original DOS ###
   ethermal = 0.0
   Svib     = 0.0
   for i in range(ngrid):
      w = ww[i]
      thetav = w*(h*c/kgas)
      xdum   = exp(-thetav/temp)
      xdum   = xdum/(1.00-xdum)
      ethermal +=  (thetav*(0.50 + xdum)*Rgas)*dos[i]*dw
      xdum   = thetav/temp
      if (xdum>0.0):
         Svib += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)*dos[i]*dw

   ### thermo for model DOS ###
   ethermal_fixed = 0.0
   Svib_fixed     = 0.0
   for i in range(ngrid):
      w = ww[i]
      thetav = w*(h*c/kgas)
      xdum   = exp(-thetav/temp)
      xdum   = xdum/(1.00-xdum)
      ethermal_fixed +=  (thetav*(0.50 + xdum)*Rgas)*dos_fixed[i]*dw
      xdum   = thetav/temp
      if (xdum>0.0):
         Svib_fixed += ((xdum/(exp(xdum)-1.00) - log(1.00-exp(-xdum)))*Rgas)*dos_fixed[i]*dw

   gas_enthalpy0      = enthalpy
   gas_enthalpy       = enthalpy - ethermal0 + ethermal
   gas_enthalpy_fixed = enthalpy - ethermal0 + ethermal_fixed

   gas_entropy0       = entropy
   gas_entropy        = entropy  + (Svib - Svib0)*(AUKCAL*1000.0)
   gas_entropy_fixed  = entropy  + (Svib_fixed - Svib0)*(AUKCAL*1000.0)

   #gas_free_energy0      = gas_enthalpy0      - temp*gas_entropy0
   #gas_free_energy       = gas_enthalpy       - temp*gas_entropy
   #gas_free_energy_fixed = gas_enthalpy_fixed - temp*gas_entropy_fixed

   #sol_free_energy0      = gas_free_energy0      + solvation_energy/AUKCAL
   #sol_free_energy       = gas_free_energy       + solvation_energy/AUKCAL
   #sol_free_energy_fixed = gas_free_energy_fixed + solvation_energy/AUKCAL

   return (gas_enthalpy_fixed,gas_entropy_fixed)






#######################################  fetch_freq functions ##################################




#######################################  fetch_eig functions ##################################
MAX_EIGENVALUE = 2.5

###########################################
#                                         #
#         ascii_eig_level                 #
#                                         #
###########################################
def ascii_eig_level(p,n):
   level  = "          "
   if ((p==1) and (n==0)): level = "++++++++++"
   if ((p==2) and (n==0)): level = "++++  ++++"
   if ((p==3) and (n==0)): level = "+++ ++ +++"
   if ((p==4) and (n==0)): level = "++ ++ ++ +"
   if ((p==5) and (n==0)): level = "+ + + + ++"
   if ((p>5)  and (n==0)):
      num = "%d" % p
      if   (len(num)==1):
         level = num + "  + + + +"
      elif (len(num)==2):
         level = num + " + + + +"
      elif (len(num)==3):
         level = num + "+ + + +"
      elif (len(num)==4):
         level = num + " + + +"
      elif (len(num)==5):
         level = num + "+ + +"
      elif (len(num)==6):
         level = num + " + +"
      else:
         level = ">>>+ + + +"

   if ((p==0) and (n==1)): level = "----------"
   if ((p==0) and (n==2)): level = "----  ----"
   if ((p==0) and (n==3)): level = "--- -- ---"
   if ((p==0) and (n==4)): level = "-- -- -- -"
   if ((p==0) and (n==5)): level = "- - - - --"
   if ((p==0) and (n>5) ):
      num = "%d" % n
      if   (len(num)==1):
         level = num + "  - - - -"
      elif (len(num)==2):
         level = num + " - - - -"
      elif (len(num)==3):
         level = num + "- - - -"
      elif (len(num)==4):
         level = num + " - - -"
      elif (len(num)==5):
         level = num + "- - -"
      elif (len(num)==6):
         level = num + " - -"
      else:
         level = ">>>- - - -"

   if ((p>0) and (n>0)):
      np = n + p
      if (np==1): level = "**********"
      if (np==2): level = "****  ****"
      if (np==3): level = "*** ** ***"
      if (np==4): level = "** ** ** *"
      if (np==5): level = "* * * * **"
      if (np>5 ):
         num = "%d" % np
         if   (len(num)==1):
            level = num + "  * * * *"
         elif (len(num)==2):
            level = num + " * * * *"
         elif (len(num)==3):
            level = num + "* * * *"
         elif (len(num)==4):
            level = num + " * * *"
         elif (len(num)==5):
            level = num + "* * *"
         elif (len(num)==6):
            level = num + " * *"
         else:
            level = ">>>* * * *"

   return level

###########################################
#                                         #
#      ascii_unrestricted_eig_plot        #
#                                         #
###########################################
def ascii_unrestricted_eig_plot(eigup,occup,eigdn,occdn):
   maxrow = 50
   maxcol = 80
   point = []
   for k in range(maxrow):
      row = [' ']*maxcol
      point.append(row)

   emin0 = min(eigup+eigdn)*27.2114
   emax0 = max(eigup+eigdn)*27.2114

   emin = min(eigup)
   emax = max(eigup)
   elumo = +9.0e6
   ehomo = -9.0e6
   for k in range(len(eigup)):
      e = eigup[k]
      o = occup[k]
      if (o>1.0e-3):
         if (e>ehomo): ehomo = e
      else:
         if (e<elumo): elumo = e

   emin  *= 27.2114
   emax  *= 27.2114
   ehomo *= 27.2114
   elumo *= 27.2114

   yscale = int(round((emin-emax0)*(maxrow-1)/(emin0-emax0)))
   tt = '%7.2f eV' % emin
   for k in range(10): point[yscale][k+5] = tt[k]

   yscale = int(round((ehomo-emax0)*(maxrow-1)/(emin0-emax0)))
   tt = 'HOMO=%7.2f eV' % ehomo
   for k in range(15): point[yscale][k+0] = tt[k]

   if (elumo<8.0e6):
      yscale = int(round((elumo-emax0)*(maxrow-1)/(emin0-emax0)))
      tt = 'LUMO=%7.2f eV' % elumo 
      for k in range(15): point[yscale][k+25] = tt[k]

      yscale = int(round((emax-emax0)*(maxrow-1)/(emin0-emax0)))
      tt = '%7.2f eV' % emax 
      for k in range(10): point[yscale][k+26] = tt[k]

   ## count eigs based on yscale location
   nstates = [0]*maxrow
   pstates = [0]*maxrow
   for k in range(len(eigup)):
      e = eigup[k]*27.2114
      o = occup[k]
      yscale = int(round((e-emax0)*(maxrow-1)/(emin0-emax0)))
      if (o > 1.0e-3):
         pstates[yscale] += 1
      else:
         nstates[yscale] += 1
         
   for k in range(maxrow):
      level = ascii_eig_level(pstates[k],nstates[k])
      if (level != "          "):
         for j in range(10):
            point[k][j+15]  = level[j]

   #for k in range(len(eigup)):
   #   e = eigup[k]*27.2114
   #   o = occup[k]
   #   yscale = int(round((e-emax0)*(maxrow-1)/(emin0-emax0)))
   #   if (o > 1.0e-3): 
   #      cch = '+'
   #   else:
   #      cch = '-'
   #   for j in range(15,23):
   #      point[yscale][j]  = cch


   emin = min(eigdn)
   emax = max(eigdn)
   elumo = +9.0e6
   ehomo = -9.0e6
   for k in range(len(eigdn)):
      e = eigdn[k]
      o = occdn[k]
      if (o>1.0e-3):
         if (e>ehomo): ehomo = e
      else:
         if (e<elumo): elumo = e

   emin  *= 27.2114
   emax  *= 27.2114
   ehomo *= 27.2114
   elumo *= 27.2114

   yscale = int(round((emin-emax0)*(maxrow-1)/(emin0-emax0)))
   tt = '%7.2f eV' % emin
   for k in range(10): point[yscale][k+42] = tt[k]

   if (ehomo>-8.0e6):
      yscale = int(round((ehomo-emax0)*(maxrow-1)/(emin0-emax0)))
      tt = 'HOMO=%7.2f eV' % ehomo
      for k in range(15): point[yscale][k+37] = tt[k]

   if (elumo<8.0e6):
      yscale = int(round((elumo-emax0)*(maxrow-1)/(emin0-emax0)))
      tt = 'LUMO=%7.2f eV' % elumo
      for k in range(15): point[yscale][k+62] = tt[k]

      yscale = int(round((emax-emax0)*(maxrow-1)/(emin0-emax0)))
      tt = '%7.2f eV' % emax
      for k in range(10): point[yscale][k+63] = tt[k]

   ## count eigs based on yscale location
   nstates = [0]*maxrow
   pstates = [0]*maxrow
   for k in range(len(eigdn)):
      e = eigdn[k]*27.2114
      o = occdn[k]
      yscale = int(round((e-emax0)*(maxrow-1)/(emin0-emax0)))
      if (o > 1.0e-3):
         pstates[yscale] += 1
      else:
         nstates[yscale] += 1

   for k in range(maxrow):
      level = ascii_eig_level(pstates[k],nstates[k])
      if (level != "          "):
         for j in range(10):
            point[k][j+52]  = level[j]


   #for k in range(len(eigdn)):
   #   e = eigdn[k]*27.2114
   #   o = occdn[k]
   #   yscale = int(round((e-emax0)*(maxrow-1)/(emin0-emax0)))
   #   if (o > 1.0e-3):
   #      cch = '+'
   #   else:
   #      cch = '-'
   #   for j in range(50,58):
   #      point[yscale][j]  = cch


   msg  = '                      Unrestricted Eigevalue Spectra\n\n'
   msg += '                alpha                               beta\n'
   for row in point:
      for col in row:
         msg += col
      msg += "\n"

   html = msg

   ### plot the density of states  ###
   emin0 -= 2.0
   emax0 += 2.0
   sigma  = 0.25
   ngrid  = 1501
   pi     = 4.0*atan(1.0)
   dw     = (emax0-emin0)/float(ngrid-1)
   scale  = 1.0/(sigma*sqrt(2.0*pi))
   omega2 = 1.0/(2.0*sigma*sigma)
   ww = []
   up_filled  = []
   up_virtual = []
   dn_filled  = []
   dn_virtual = []
   for i in range(ngrid):
      w = emin0 + i*dw
      ww.append(w)
      pp = 0.0
      qq = 0.0
      for k in range(len(eigup)):
         e = eigup[k]*27.2114
         o = occup[k]
         x2 = (w-e)**2
         tt = scale*exp(-omega2*x2)
         if (o>1.0e-6):
            pp += tt
         else:
            qq += tt
      up_filled.append(pp)
      up_virtual.append(qq)

      pp = 0.0
      qq = 0.0
      for k in range(len(eigdn)):
         e = eigdn[k]*27.2114
         o = occdn[k]
         x2 = (w-e)**2
         tt = scale*exp(-omega2*x2)
         if (o>1.0e-6):
            pp -= tt
         else:
            qq -= tt
      dn_filled.append(pp)
      dn_virtual.append(qq)

   y = (up_filled,up_virtual,dn_filled,dn_virtual)
   symbols = ('*','#','o','@')
   title = 'Density of States (sigma=%.2f eV)' % sigma
   xlabel = 'Energy (eV)'
   ylabel = 'DOS'
   xmin = emin0
   xmax = emax0
   ymin = min(up_filled+up_virtual+dn_filled+dn_virtual)
   ymax = max(up_filled+up_virtual+dn_filled+dn_virtual)
   msg += "\n"
   msg += ascii_plotter(ww,y,symbols,title,xlabel,ylabel,xmin,xmax,ymin,ymax,False)

   pdrand     = random.randint(0,999999)
   pdrand2    = random.randint(0,999999)
   dosgnuplot = wrkdir + "/udos-%d-%d.gnuplot" % (pdrand,pdrand2)
   dospng     = wrkdir + "/udos-%d-%d.png" % (pdrand,pdrand2)
   dosdatafile  = wrkdir+"/"+ tmperxn
   dosdatafile2 = wrkdir+"/"+ tmperxn2
   dosdatafile3 = wrkdir+"/"+ tmperxn3
   scale0 = 1.0/(sigma*sqrt(2.0*pi))
   with open(dosdatafile,'w') as ff:
      for i in range(ngrid):
        ff.write("%e %e %e %e %e\n" % (ww[i],up_filled[i],up_virtual[i],dn_filled[i],dn_virtual[i]))
   with open(dosdatafile2,'w') as ff:
      for k in range(len(eigup)):
         e = eigup[k]*27.2114
         o = occup[k]
         if (o>1.0e-6):
            ff.write("%e %e\n" % (e,o*scale0))
         else:
            ff.write("%e %e\n" % (e,scale0))
   with open(dosdatafile3,'w') as ff:
      for k in range(len(eigdn)):
         e = eigdn[k]*27.2114
         o = occdn[k]
         if (o>1.0e-6):
            ff.write("%e %e\n" % (e,-o*scale0))
         else:
            ff.write("%e %e\n" % (e,-scale0))

   dos = 'set output \"%s\"; set term png; set grid; set title \"%s\"; set xlabel \"energy (eV)\"; set ylabel \"DOS\";  plot \"%s\" using 1:2 with l lw 2 title \"filled alpha DOS\", \"%s\" using 1:3 with l lw 2 title \"virtual alpha DOS\",\"%s\" using 1:4 with l lw 2 title \"filled beta DOS\", \"%s\" using 1:5 with l lw 2 title \"virtual beta DOS\", \"%s\" using 1:2 with impulses title \"alpha states\", \"%s\" using 1:2 with impulses title \"beta states\" ' % (dospng,title,dosdatafile,dosdatafile,dosdatafile,dosdatafile,dosdatafile2,dosdatafile3)

   with open(dosgnuplot,'w')  as f: f.write(dos+eoln)
   os.system(gnuplot + dosgnuplot)
   try:
      os.unlink(dosgnuplot)
      os.unlink(dosdatafile)
      os.unlink(dosdatafile2)
      os.unlink(dosdatafile3)
   except:
      print("Failed to delete temporary gnuplot files")

   pngname     = "image-%d-%d" % (pdrand,pdrand2)
   imagelist = [(dospng,pngname)]
   html += "</pre>\n"
   html += '<br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
   html += "<pre style=\"font-size:1.0em;color:black\">\n"

   return (msg,html,imagelist)




#########################################
#                                       #
#      ascii_restricted_eig_plot        #
#                                       #
#########################################

def ascii_restricted_eig_plot(eig,occ):
   maxrow = 50
   maxcol = 75
   point = []
   for k in range(maxrow):
      row = [' ']*maxcol
      point.append(row)

   emin = min(eig)
   emax = max(eig)
   elumo = +9.0e6
   ehomo = -9.0e6
   for k in range(len(eig)):
      e = eig[k]
      o = occ[k]
      if (o>1.0e-3):
         if (e>ehomo): ehomo = e
      else:
         if (e<elumo): elumo = e

   e = 0.0
   emin  *= 27.2114
   emax  *= 27.2114
   ehomo *= 27.2114
   elumo *= 27.2114

   yscale = int(round((emin-emax)*(maxrow-1)/(emin-emax)))
   tt = '%7.2f eV' % emin
   for k in range(10): point[yscale][k+5] = tt[k]

   if (ehomo>-8.0e6):
      yscale = int(round((ehomo-emax)*(maxrow-1)/(emin-emax)))
      tt = 'HOMO=%7.2f eV' % ehomo
      for k in range(15): point[yscale][k+0] = tt[k]

   if (elumo<8.0e6):
      yscale = int(round((elumo-emax)*(maxrow-1)/(emin-emax)))
      tt = 'LUMO=%7.2f eV' % elumo 
      for k in range(15): point[yscale][k+27] = tt[k]
      yscale = int(round((emax-emax)*(maxrow-1)/(emin-emax)))
      tt = '%7.2f eV' % emax 
      for k in range(10): point[yscale][k+27] = tt[k]

   ## count eigs based on yscale location
   nstates = [0]*maxrow
   pstates = [0]*maxrow
   for k in range(len(eig)):
      e = eig[k]*27.2114
      o = occ[k]
      yscale = int(round((e-emax)*(maxrow-1)/(emin-emax)))
      if (o > 1.0e-3): 
         pstates[yscale] += 1
      else:
         nstates[yscale] += 1

   for k in range(maxrow):
      level = ascii_eig_level(pstates[k],nstates[k])
      if (level != "          "):
         for j in range(10):
            point[k][j+16]  = level[j]

   #for k in range(len(eig)):
   #   e = eig[k]*27.2114
   #   o = occ[k]
   #   yscale = int(round((e-emax)*(maxrow-1)/(emin-emax)))
   #   if (o > 1.0e-3): 
   #      cch = '+'
   #   else:
   #      cch = '-'
   #   for j in range(16,26):
   #      point[yscale][j]  = cch

   msg = '          Eigevalue Spectra\n'
   for row in point:
      for col in row:
         msg += col
      msg += "\n"

   html = msg


   ### plot the density of states  ###
   emin -= 2.0
   emax += 2.0
   sigma  = 0.25
   ngrid  = 1501
   pi     = 4.0*atan(1.0)
   dw     = (emax-emin)/float(ngrid-1)
   scale  = 2.0/(sigma*sqrt(2.0*pi))
   omega2 = 1.0/(2.0*sigma*sigma)
   ww = []
   rs_filled  = []
   rs_virtual = []
   for i in range(ngrid):
      w = emin + i*dw
      ww.append(w)
      pp = 0.0
      qq = 0.0
      for k in range(len(eig)):
         e = eig[k]*27.2114
         o = occ[k]
         x2 = (w-e)**2
         tt = scale*exp(-omega2*x2)
         if (o>1.0e-6):
            pp += tt*o
         else:
            qq += tt*2
      rs_filled.append(pp)
      rs_virtual.append(qq)

   y = (rs_filled,rs_virtual)
   symbols = ('*','#')
   title = 'Density of States (sigma=%.2f eV)' % sigma
   xlabel = 'Energy (eV)'
   ylabel = 'DOS'
   xmin = emin
   xmax = emax
   ymin = min(rs_filled+rs_virtual)
   ymax = max(rs_filled+rs_virtual)
   msg += "\n"
   msg += ascii_plotter(ww,y,symbols,title,xlabel,ylabel,xmin,xmax,ymin,ymax,False)

   pdrand     = random.randint(0,999999)
   pdrand2    = random.randint(0,999999)
   dosgnuplot = wrkdir + "/rdos-%d-%d.gnuplot" % (pdrand,pdrand2)
   dospng     = wrkdir + "/rdos-%d-%d.png" % (pdrand,pdrand2)
   dosdatafile  = wrkdir+"/"+ tmperxn
   dosdatafile2 = wrkdir+"/"+ tmperxn2
   scale0 = 1.0/(sigma*sqrt(2.0*pi))
   with open(dosdatafile,'w') as ff:
      for i in range(ngrid):
        ff.write("%e %e %e\n" % (ww[i],rs_filled[i],rs_virtual[i]))
   with open(dosdatafile2,'w') as ff:
      for k in range(len(eig)):
         e = eig[k]*27.2114
         o = occ[k]
         if (o>1.0e-6):
            ff.write("%e %e\n" % (e,o*scale0))
         else:
            ff.write("%e %e\n" % (e,2.0*scale0))


   dos = 'set output \"%s\"; set term png; set grid; set title \"%s\"; set xlabel \"energy (eV)\"; set ylabel \"DOS\";  plot \"%s\" using 1:2 with l lw 2 title \"filled DOS\", \"%s\" using 1:3 with l lw 2 title \"virtual DOS\", \"%s\" using 1:2 with impulses title \"states\" ' % (dospng,title,dosdatafile,dosdatafile,dosdatafile2)

   with open(dosgnuplot,'w')  as f: f.write(dos+eoln)
   os.system(gnuplot + dosgnuplot)
   try:
      os.unlink(dosgnuplot)
      os.unlink(dosdatafile)
      os.unlink(dosdatafile2)
   except:
      print("Failed to delete temporary gnuplot files")

   pngname     = "image-%d-%d" % (pdrand,pdrand2)
   imagelist = [(dospng,pngname)]
   html += "</pre>\n"
   html += '<br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
   html += "<pre style=\"font-size:1.0em;color:black\">\n"


   return (msg,html,imagelist)

def mymedian(x):
    if len(x)%2 != 0:
        return sorted(x)[len(x)//2]
    else:
        midavg = (sorted(x)[len(x)//2] + sorted(x)[len(x)//2-1])/2.0
        return midavg

#############################################
#                                           #
#             fetch_eig                     #
#                                           #
#############################################
def fetch_eig(hup,dbfile,table,id):
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   checklist = []
   checklist.append(id)
   wherestr =  " where Id=?"
   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()

   msg0 = ''
   msg1 = ''
   msg2 = ''
   msg3 = ''
   msg4 = ''
   html = ''
   imagelist = []
   ### id found? ###
   if (len(rows)>0):
      msg0 = "</pre> <pre style=\"font-size:1.0em;color:black\"> \n"
      msg0 += "+-----------------+\n"
      msg0 += "| Eigenvalue Data |\n"
      msg0 += "+-----------------+\n\n"
      msg0 += "Id       = %d\n" % (rows[0][0])
      msg0 += "iupac    = %s\n" % (rows[0][1])
      msg0 += "mformula = %s\n" % (rows[0][2])
      msg0 += "InChI    = %s\n" % (rows[0][3])
      msg0 += "smiles   = %s\n" % (rows[0][4])
      msg0 += "esmiles  = %s\n" % (rows[0][6])
      msg0 += "theory   = %s\n" % (rows[0][9])
      msg0 += "xc       = %s\n" % (rows[0][10])
      msg0 += "basis    = %s\n" % (rows[0][11])
      msg0 += "charge   = %d\n" % (rows[0][12])
      msg0 += "mult     = %d\n" % (rows[0][13])
      msg0 += "solvation_type = %s\n\n" % (rows[0][17])
      msg0 += "twirl webpage  = %s\n" % (smiles2twirl(rows[0][4]))
      msg0 += "image webpage  = %s\n\n" % (smiles2image(rows[0][4]))
      msg1 = "chemical_structure_asciiart  = </pre> <pre style=\"font-size:0.5em;color:magenta\"> \n"
      rows034 = rows[0][34]
      if isinstance(rows034,bytes): rows034 = rows034.decode("utf-8")
      msg1 += stripWARNINGS(rows034)
      msg1 += "</pre> <pre style=\"font-size:1.0em;color:black\"> \n"

      theory = rows[0][9]
      if (theory=="pspw" or theory=="pspw4" or theory=="dft" or theory=="hf" or theory=="uhf" or theory=="paw" or theory=="paw4"):
         cmd99 = chemdb_homolumo + "%d" % rows[0][0]
         try:
            ##result99 = subprocess.check_output(cmd99,shell=True).decode("utf-8")
            result99 = "\n\nchemdb_homolumo is currently turned off.  This should be fixed by March 1st.\n\n"
         except:
            result99 = "\n\nchemdb_homolumo failed and job was not submitted\n\n"

         if "HOMOLUMOImageFilename:" in result99:
            homolumopng = result99.split("HOMOLUMOImageFilename:")[1].split(":HOMOLUMOImageFilename")[0].strip()
            pngname     = "homolumo-%d" % (rows[0][0])
            imagelist += [(homolumopng,pngname)]
            html += "</pre>\n"
            html += '<br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
            html += "<pre style=\"font-size:1.0em;color:black\">\n"
      

      eigall = rows[0][25]
      #restricted = eigall.split("\n")[0].strip() == "restricted"
      if isinstance(eigall,bytes): eigall = eigall.decode("utf-8")
      eigtype = eigall.split("\n")[0].strip()

      ### rdft calculation ###
      if (eigtype=="restricted"):
         eig = []
         occ = []
         for line in eigall.strip().split("\n")[1:]:
            e = line.split("E=")[1].replace("D","E")
            o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
            if (abs(evalnum(e))<MAX_EIGENVALUE):
               eig.append(evalnum(e))
               occ.append(evalnum(o))
         emid = mymedian(eig)
         peig = []
         pocc = []
         for k in range(len(eig)):
            if (eig[k]>(emid-2.0)):
               peig.append(eig[k])
               pocc.append(occ[k])
         (msg2,html1,imagelist1) = ascii_restricted_eig_plot(peig,pocc)
         html += html1
         imagelist += imagelist1
         msg3  = "\n"
         msg3 += "spin            eig      occ\n"
         msg3 += "----------------------------\n"
         for k in range(len(eig)):
           msg3 += "restricted  %7.2f  %7.2f\n" % (eig[k]*27.2114,occ[k])
         msg3 += "\n"

      ### udft calculation ###
      elif (eigtype=="alpha"):
         eigup = []
         occup = []
         for line in  eigall.split('beta')[0].strip().split("\n")[1:]:
            e = line.split("E=")[1].replace("D","E")
            o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
            if (abs(evalnum(e))<MAX_EIGENVALUE):
               eigup.append(evalnum(e))
               occup.append(evalnum(o))
         emidup = mymedian(eigup)
         peigup = []
         poccup = []
         for k in range(len(eigup)):
            if (eigup[k]>(emidup-2.0)):
               peigup.append(eigup[k])
               poccup.append(occup[k])

         eigdn = []
         occdn = []
         for line in  eigall.split('beta')[1].strip().split("\n"):
            try:
               e = line.split("E=")[1].replace("D","E")
               o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
            except:
               e = 0.0
               o = 0.0
            if (abs(evalnum(e))<MAX_EIGENVALUE):
               eigdn.append(evalnum(e))
               occdn.append(evalnum(o))
         emiddn = mymedian(eigdn)
         peigdn = []
         poccdn = []
         for k in range(len(eigdn)):
            if (eigdn[k]>(emiddn-2.0)):
               peigdn.append(eigdn[k])
               poccdn.append(occdn[k])

         (msg2,html1,imagelist1) = ascii_unrestricted_eig_plot(peigup,poccup,peigdn,poccdn)
         html += html1
         imagelist += imagelist1
         msg3  = "\n"
         msg3 += "spin            eig      occ\n"
         msg3 += "----------------------------\n"
         for k in range(len(eigup)):
            msg3 += "alpha       %7.2f  %7.2f\n" % (eigup[k]*27.2114,occup[k])
         msg3 += "\n"
         for k in range(len(eigdn)):
            msg3 += "beta        %7.2f  %7.2f\n" % (eigdn[k]*27.2114,occdn[k])
         msg3 += "\n"

      ### pspw calculation ###
      elif (eigtype=="orbital energies:"):
         eigup = []
         occup = []
         eigdn = []
         occdn = []
         ff    = 1.0
         for line in eigall.strip().split("\n")[1:]:
            if "virtual" in line:
               ff = 0.0
            else:
               ss = line.split()
               e = ss[0]
               eigup.append(evalnum(e))
               occup.append(ff)
               if (len(ss)>3):
                  e2 = ss[3]
                  eigdn.append(evalnum(e2))
                  occdn.append(ff)

         ## restricted calculation ###
         if (len(eigdn)==0):
            for k in range(len(occup)):
               occup[k] *= 2.0
            (msg2,html1,imagelist1)  = ascii_restricted_eig_plot(eigup,occup)
            html += html1
            imagelist += imagelist1
            msg3  = "\n"
            msg3 += "spin            eig      occ\n"
            msg3 += "----------------------------\n"
            for k in range(len(eigup)):
               msg3 += "restricted  %7.2f  %7.2f\n" % (eigup[k]*27.2114,occup[k])
         else:
            (msg2,html1,imagelist1) = ascii_unrestricted_eig_plot(eigup,occup,eigdn,occdn)
            html += html1
            imagelist += imagelist1
            msg3  = "\n"
            msg3 += "spin            eig      occ\n"
            msg3 += "----------------------------\n"
            for k in range(len(eigup)):
               msg3 += "alpha       %7.2f  %7.2f\n" % (eigup[k]*27.2114,occup[k])
            msg3 += "\n"
            for k in range(len(eigdn)):
               msg3 += "beta        %7.2f  %7.2f\n" % (eigdn[k]*27.2114,occdn[k])
            msg3 += "\n"

  

      msg4 += "</pre> <pre style=\"font-size:1.0em;color:black\"> \n"
   else:
      msg4 = "no eigenvalue data for Id=%d\n\n" % id

   return (msg0+msg1+msg2+msg3+msg4,msg0+html+msg3+msg4,imagelist)

#######################################  fetch_eig functions ##################################

################################################
#                                              #
#           lowest_energy_esmiles              #
#                                              #
################################################

#returns only the lowest energy row

def lowest_energy_esmiles(rows):
   if (len(rows)>1):
      newrows = []
      emin = 99.99e99

      ### search for lowest energy with no negative frequencies ###
      negative_freq = True
      for molecule in rows:
         if (molecule[14]<emin) and (molecule[35]==0):
            negative_freq = False
            emin = molecule[14]
            molecule_min = molecule

      ### if there are always negative frequencies then just search for lowest energy entry ###
      if (negative_freq):
         for molecule in rows:
            if (molecule[14]<emin):
               emin = molecule[14]
               molecule_min = molecule

      newrows.append(molecule_min)
   else:
      newrows = rows

   return newrows






#############################################
#                                           #
#         fetch_esmiles_base_datafile       #
#                                           #
#############################################

def fetch_esmiles_base_datafile(hup,dbfile,table,esmiles):

 datafile = ''
 if ('ccsd(t)' not in esmiles) and ('mp2' not in esmiles) and ('qsharp_chem' not in esmiles) and ('ccsd' not in esmiles): return datafile

 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'

   #esmiles1=esmiles.strip()
   esmiles1=esmileswithname_to_esmiles(esmiles.strip())

   ss = esmiles1.split()

   smiles  = clean_smiles(ss[0])
   if "id=" in smiles.lower():
      try:
         smiles = smiles.replace(")","")
         smiles = smiles.replace("]","")
         smiles = smiles.replace("(","")
         smiles = smiles.replace("[","")
         id = evalnum(smiles.split("=")[1].strip())
      except:
         id = 1001
      wherestr =  " where Id=? "
      checklist = []
      checklist.append(id)

   else:
      csmiles = cannonicalsmiles(smiles)
      inchi    = smiles2InChI(smiles)    #used because it includes charge in inchi
      inchikey = smiles2InChIKey(smiles) #used because it includes charge in inchikey

      xyzfile = wrkdir + "/" + tmpxyz1
      xxx = ""
      if ("xyzdata{" in esmiles):
         xxx = " xyzdata{" + esmiles.split("xyzdata{")[1].split("}")[0] + "}"
      smiles2xyz(smiles+xxx,xyzfile)
      inchi2    = xyz2InChI(xyzfile)    #inchi2 does not include charge
      inchikey2 = xyz2InChIKey(xyzfile) #inchikey2 does not include charge
      mformula = xyz_molecular_formula(xyzfile)

      if 'theory_base{' in esmiles: theory_base = esmiles.split('theory_base{')[1].split('}')[0]
      if 'xc_base{' in esmiles:     xc_base     = esmiles.split('xc_base{')[1].split('}')[0]
      if 'basis{' in esmiles:       basis_base  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
      if 'basis_base{' in esmiles:  basis_base  = removespace_basis(esmiles.split('basis_base{')[1].split('}')[0])
      charge = smiles2charge(smiles)
      if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      mult = esmiles2mult_set(smiles,charge,esmiles)
      #mult = smiles2mult(smiles,charge)
      #if 'mult{' in esmiles:   mult   = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      if 'calculation_type' in esmiles: calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]
      if solvation_type.lower()=='none':
         calculation_type = calculation_type.replace('c','')
      if 'ry' in  basis_base.lower():      basis_base = '%.1f Ry' % (evalnum(basis_base.strip().split()[0]))
      if 'hartree' in  basis_base.lower(): basis_base = '%.1f Ry' % (2*evalnum(basis_base.strip().split()[0]))

      print()
      print("fetch_esmiles_base_datafile table  =",table)
      print("fetch_esmiles_base_datafile inchi  =",inchi)
      print("fetch_esmiles_base_datafile inchi2 =",inchi2)
      print("fetch_esmiles_base_datafile inchikey  =",inchikey)
      print("fetch_esmiles_base_datafile inchikey2 =",inchikey2)
      print("fetch_esmiles_base_datafile mformula =",mformula)
      print("fetch_esmiles_base_datafile theory=",theory_base)
      print("fetch_esmiles_base_datafile xc    =",xc_base)
      print("fetch_esmiles_base_datafile basis =",basis_base)
      print("fetch_esmiles_base_datafile charge=",charge)
      print("fetch_esmiles_base_datafile mult  =",mult)
      print("fetch_esmiles_base_datafile solvation_type=",solvation_type)
      print("fetch_esmiles_base_datafile calculation_type=",calculation_type)

      checklist = []
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(mformula)
      checklist.append(theory_base)
      checklist.append(xc_base)
      checklist.append(basis_base)
      checklist.append(charge)
      checklist.append(mult)
      checklist.append(solvation_type)
      checklist.append(calculation_type)

      wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?)"
      wherestr += " and mformula=?"
      wherestr += " and theory=?"
      wherestr += " and xc=?"
      wherestr += " and basis=?"
      wherestr += " and charge=?"
      wherestr += " and mult=?"
      wherestr += " and solvation_type=?"
      wherestr += " and calculation_type=?"

   wherestr2 = " where id=? ;"

   if (issqlite3):
      sqlcheck = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      sqlcheck = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])


   rows = lowest_energy_esmiles(rows2)

   ### fetch nwout file from archive ###
   datafile = wrkdir + "/" + tmpnwout
   molecule = rows[0]
   cmd1 = "scp " + molecule[28] + " " + datafile
   if (":/" not in molecule[28]): cmd1 = cmd1.replace("scp","cp")
   print("cmd1=",cmd1)
   pexpect_command(cmd1,archivepassword)
   #with open(datafile,"r") as offile:
   #   datafile = offile.read()

 except:
   datafile = ''

 return datafile



#############################################
#                                           #
#         fetch_reactionpathesmiles         #
#                                           #
#############################################

def fetch_reactionpathesmiles(hup,dbfile,table,esmiles):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   theory_base = ''
   xc_base     = ''
   basis_base  = ''
   basisHZ_base  = ''
   reaction_hash = ''
   reaction_gamma = ''
   reaction_kappa = ''
   if 'qsharp_chem' in esmiles:
      theory='qsharp_nwchem';xc='unknown';basis='sto-3g';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'sto-3g'
      qsharp_norbs  = 2
      qsharp_nalpha = 1
      qsharp_nbeta  = 1
      qsharp_nroots = 0
   elif 'ccsd(t)' in esmiles:
      theory='ccsd(t)';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   elif 'ccsd' in esmiles:
      theory='ccsd';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   elif 'mp2' in esmiles:
      theory='mp2';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   elif 'pspw4' in esmiles:
      theory='pspw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ovc'
   elif 'pspw' in esmiles:
      theory='pspw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw4' in esmiles:
      theory='paw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw' in esmiles:
      theory='paw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'am1' in esmiles:
      theory='am1';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'pm3' in esmiles:
      theory='pm3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mndo' in esmiles:
      theory='mndo';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mindo3' in esmiles:
      theory='mindo3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'dft' in esmiles:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   elif 'uhf' in esmiles:
      theory='uhf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   elif 'hf' in esmiles:
      theory='hf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'
   else:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b= 'stuttgart'

   #esmiles1=esmiles.strip()
   esmiles1=esmileswithname_to_esmiles(esmiles.strip())
   ss = esmiles1.split()
   #print("ESMILES,ESMILES1=",esmiles,esmiles1)

   smiles  = clean_smiles(ss[0])
   if "id=" in smiles.lower():
      searchingid = True
      try:
         smiles = smiles.replace(")","")
         smiles = smiles.replace("]","")
         smiles = smiles.replace("(","")
         smiles = smiles.replace("[","")
         id = evalnum(smiles.split("=")[1].strip())
      except:
         id = 1001
      wherestr =  " where Id=?"
      wherestr2 = " where Id=? ;"
      checklist = []
      checklist.append(id)
   else:
      searchingid = False
      csmiles  = cannonicalsmiles(smiles)
      inchi    = smiles2InChI(smiles)    #used because it includes charge in inchi
      inchikey = smiles2InChIKey(smiles) #used because it includes charge in inchikey

      xyzfile = wrkdir + "/" + tmpxyz1
      xxx = ""
      if ("xyzdata{" in esmiles):
         xxx = " xyzdata{" + esmiles.split("xyzdata{")[1].split("}")[0] + "}"
      smiles2xyz(smiles+xxx,xyzfile)
      inchi2    = xyz2InChI(xyzfile)    #inchi2 does not include charge
      inchikey2 = xyz2InChIKey(xyzfile) #inchikey2 does not include charge
      mformula = xyz_molecular_formula(xyzfile)

      if 'theory{' in esmiles: theory = esmiles.split('theory{')[1].split('}')[0]
      if 'xc{' in esmiles:     xc     = esmiles.split('xc{')[1].split('}')[0]
      if 'basis{' in esmiles:  
         basis  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
         if ((theory=="ccsd(t)") or (theory=="mp2") or (theory=="qsharp_chem") or (theory=="ccsd")):
            basis_base = basis
      if 'basisHZ{' in esmiles:
         basisHZ  = removespace_basis(esmiles.split('basisHZ{')[1].split('}')[0])
         basisHZ1 = basisHZ
         basisHZ2 = basisHZ
         basisHZ3 = basisHZ
         basisHZ3b= basisHZ
         if ((theory=="ccsd(t)") or (theory=="mp2") or (theory=="qsharp_chem") or (theory=="ccsd")):
            basisHZ_base  = basisHZ
      if 'theory_base{' in esmiles: theory_base = esmiles.split('theory_base{')[1].split('}')[0]
      if 'xc_base{' in esmiles:     xc_base     = esmiles.split('xc_base{')[1].split('}')[0]
      if 'basis_base{' in esmiles:  basis_base  = esmiles.split('basis_base{')[1].split('}')[0]
      if 'basisHZ_base{' in esmiles:  basisHZ_base  = esmiles.split('basisHZ_base{')[1].split('}')[0]
      charge = smiles2charge(smiles)
      if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      mult = esmiles2mult_set(smiles,charge,esmiles)
      #mult   = smiles2mult(smiles,charge)
      #if 'mult{' in esmiles:   mult   = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      if 'calculation_type' in esmiles: calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]
      if solvation_type.lower()=='none':
         calculation_type = calculation_type.replace('c','')
      calculation_type2 = calculation_type + 'n'

      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      if 'ry' in  basis_base.lower():      basis_base = '%.1f Ry' % (evalnum(basis_base.strip().split()[0]))
      if 'hartree' in  basis_base.lower(): basis_base = '%.1f Ry' % (2*evalnum(basis_base.strip().split()[0]))

      if 'qsharp_chem_filling{' in esmiles:
         qsharp_norbs  = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[0])
         qsharp_nalpha = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[1])
         qsharp_nbeta  = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[2])
      if 'qsharp_chem_nroots{' in esmiles: qsharp_nroots  = evalnum(esmiles.split('qsharp_chem_nroots{')[1].split('}')[0].strip())
      if 'qsharp_chem_norbs{' in esmiles:  qsharp_norbs   = evalnum(esmiles.split('qsharp_chem_norbs{')[1].split('}')[0].strip())
      if 'qsharp_chem_nalpha{' in esmiles: qsharp_nalpha  = evalnum(esmiles.split('qsharp_chem_nalpha{')[1].split('}')[0].strip())
      if 'qsharp_chem_nbeta{'  in esmiles: qsharp_nbeta   = evalnum(esmiles.split('qsharp_chem_nbeta{')[1].split('}')[0].strip())

      if 'reaction_hash' in esmiles:  reaction_hash = esmiles.split('reaction_hash{')[1].split('}')[0].strip()
      if 'reaction_gamma' in esmiles: reaction_gamma = evalnum(esmiles.split('reaction_gamma{')[1].split('}')[0].strip())
      if 'reaction_kappa' in esmiles: reaction_kappa = evalnum(esmiles.split('reaction_kappa{')[1].split('}')[0].strip())
      if (reaction_hash=='') and ('reaction_genhash{' in esmiles):
         #reaction_genhash = esmiles.split('reaction_genhash{')[1].split('}')[0].strip()
         #reaction_genhash = esmiles.split('reaction_genhash{')[1].strip().rstrip('}')
         reaction_genhash = ''
         jjj = esmiles.split('reaction_genhash{')[1]
         nj = len(jjj)
         i = 0
         pc = 0
         done = False
         while (not done):
            cc = jjj[i]
            if ((cc == '}') and (pc<1)) or (i>(nj-2)):
               done = True
            else:
               if (cc == '{'): pc += 1
               if (cc == '}'): pc -= 1
               reaction_genhash += cc
               i += 1
         cmd9 = chemdb_balance_reaction + "-x \"0 0 0 0 0 " + reaction_genhash + "\""
         result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
         if "bstringsall =" in result9:
            bstringsall = eval(result9.split("bstringsall = ")[1].split('\n')[0].strip())
            reaction_hash = bstringsall[0][3]

      hasHZ = inchihasHZ(inchi2) and (basis!="semiempirical") and (theory!='pspw') and (theory!='pspw4') and (theory!='paw')
      notonlyHZ = (not inchionlyHZ(inchi2)) or (basis=="semiempirical") or (theory=='pspw') or (theory=='pspw4') or (theory=='paw')
      print()
      print("fetch_reactionpathesmiles table  =",table)
      print("fetch_reactionpathesmiles inchi  =",inchi)
      print("fetch_reactionpathesmiles inchi2 =",inchi2)
      print("fetch_reactionpathesmiles inchikey  =",inchikey)
      print("fetch_reactionpathesmiles inchikey2 =",inchikey2)
      print("fetch_reactionpathesmiles mformula=",mformula)
      print("fetch_reactionpathesmiles theory=",theory)
      print("fetch_reactionpathesmiles xc    =",xc)
      if (notonlyHZ): print("fetch_reactionpathesmiles basis =",basis)
      if (hasHZ):     print("fetch_reactionpathesmiles basisHZ =",basisHZ)
      if (hasHZ):     print("fetch_reactionpathesmiles basisHZ1 =",basisHZ1)
      if (hasHZ):     print("fetch_reactionpathesmiles basisHZ2 =",basisHZ2)
      if (hasHZ):     print("fetch_reactionpathesmiles basisHZ3 =",basisHZ3)
      if (hasHZ):     print("fetch_reactionpathesmiles basisHZ3b=",basisHZ3b)
      if (theory_base!=''): print("fetch_reactionpathesmiles theory_base=",theory_base)
      if (xc_base!=''):     print("fetch_reactionpathesmiles xc_base    =",xc_base)
      if (basis_base!=''):  print("fetch_reactionpathesmiles basis_base =",basis_base)
      if (basisHZ_base!=''):  print("fetch_reactionpathesmiles basisHZ_base =",basisHZ_base)
      print("fetch_reactionpathesmiles charge=",charge)
      print("fetch_reactionpathesmiles mult  =",mult)
      print("fetch_reactionpathesmiles solvation_type=",solvation_type)
      if (reaction_hash!=''):  
         print("fetch_reactionpathesmiles reaction_hash =" + reaction_hash)
         calculation_type  = "l"+calculation_type
         calculation_type2 = "l"+calculation_type2
         if reaction_gamma=='':
            reaction_gamma = 0.0
      if (reaction_gamma!=''):  
         print("fetch_reactionpathesmiles reaction_gamma =",reaction_gamma)
         if reaction_kappa=='':
            reaction_kappa = 1.0
      if (reaction_kappa!=''):  print("fetch_reactionpathesmiles reaction_kappa =",reaction_kappa)
      print("fetch_reactionpathesmiles calculation_type=",calculation_type,calculation_type2)

      eps = 1.0e-6
      checklist = []
      #checklist.append(inchi)
      #checklist.append(inchi2)
      #checklist.append(inchi)
      #checklist.append(inchi2)
      #checklist.append(inchikey)
      #checklist.append(inchikey2)
      #checklist.append(inchikey)
      #checklist.append(inchikey2)
      checklist.append(mformula)
      checklist.append(theory)
      checklist.append(xc)
      if (notonlyHZ): checklist.append(basis)
      if (hasHZ):     
         checklist.append(basisHZ)
         checklist.append(basisHZ1)
         checklist.append(basisHZ2)
         checklist.append(basisHZ3)
         checklist.append(basisHZ3b)
      if (theory_base!=''): checklist.append(theory_base)
      if (xc_base!=''):     checklist.append(xc_base)
      if (basis_base!=''):  checklist.append(basis_base)
      if (basisHZ_base!=''):  checklist.append(basisHZ_base)
      if (reaction_hash!=''):  checklist.append(reaction_hash)
      #if (reaction_gamma!=''):
      #   checklist.append(reaction_gamma-eps)
      #   checklist.append(reaction_gamma+eps)
      if (reaction_kappa!=''):
         checklist.append(reaction_kappa-eps)
         checklist.append(reaction_kappa+eps)
      if (theory=='qsharp_chem'):
         checklist.append(qsharp_norbs)
         checklist.append(qsharp_nalpha)
         checklist.append(qsharp_nbeta)
         checklist.append(qsharp_nroots)
      checklist.append(charge)
      checklist.append(mult)
      checklist.append(solvation_type)
      checklist.append(calculation_type)
      checklist.append(calculation_type2)

      #wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?)"
      #wherestr += " and mformula=?"
      wherestr = " where mformula=?"
      wherestr += " and theory=?"
      wherestr += " and xc=?"
      if (notonlyHZ): wherestr += " and basis=?"
      if (hasHZ):     wherestr += " and (basisHZ=? or basisHZ=? or basisHZ=? or basisHZ=? or basisHZ=?)"
      if (theory_base!=''): wherestr += " and theory_base=?"
      if (xc_base!=''):     wherestr += " and xc_base=?"
      if (basis_base!=''):  wherestr += " and basis_base=?"
      if (basisHZ_base!=''):  wherestr += " and basisHZ_base=?"
      if (reaction_hash!=''):  wherestr += " and constraint_string=?"
      #if (reaction_gamma!=''): wherestr += " and constraint_value>=? and constraint_value<=?"
      if (reaction_kappa!=''): wherestr += " and constraint_spring>=? and constraint_spring<=?"
      if (theory=='qsharp_chem'): wherestr += " and qsharp_norbs=? and qsharp_nalpha=? and qsharp_nbeta=? and qsharp_nroots=?"

      wherestr += " and charge=?"
      wherestr += " and mult=?"
      wherestr += " and solvation_type=?"
      wherestr += " and (calculation_type=? or calculation_type=?)"

   wherestr2 = " where id=? ;"


   if (issqlite3):
      sqlcheck = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      sqlcheck = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   #print("sqlcheck=",sqlcheck)
   #print("checklist=",checklist)
   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])


   return rows2

 except:
   return []


def proton_data():
   proton = ['']*100
   proton[0] = 0
   proton[1] = "hydron cation"
   proton[2] = "H1"
   proton[3] = "InChI=1S/p+1"
   proton[4] = "[H+]"
   proton[5] = "[H+]"
   proton[6] =  "[H+]"
   proton[7] =  "Arrows"
   proton[8] =  "ovc"
   proton[9] =  "Experiment"
   proton[10] =  "none"
   proton[11] =  "none"
   proton[12] = 1
   proton[13] = 1
   proton[14] = 0.0
   proton[15] = 0.002359
   proton[16] = 26.003

   proton[17] = "COSMO"
   #proton[18] = 262.1
   #proton[18] = 245.86
   #-263.86 = 0 +     0.02359*27.2116*23.06 - 298.15*26.003/1000 +  Gsolv
   proton[18] = 257.71


   proton[19] = 0.0
   proton[20] = 0.0

   proton[21] = 84.949
   proton[22] = 73.622
   proton[23] = ''' 1

H          0.00000        0.00000        0.00000
'''

   proton[24] = ''' 
  triangle hessian written to ./dft-b3lyp-H1-81317.hess

 Deleting state for dft with suffix hess
        ./dft-b3lyp-H1-81317.movecs



  Vibrational analysis via the FX method 

  See chapter 2 in "Molecular Vibrations" by Wilson, Decius and Cross

  Vib: Default input used 

  Nuclear Hessian passed symmetry test 



 ---------------------------- Atom information ----------------------------
     atom    #        X              Y              Z            mass
 --------------------------------------------------------------------------
    H        1  0.0000000D+00  0.0000000D+00  0.0000000D+00  1.0078250D+00
 --------------------------------------------------------------------------




          ----------------------------------------------------
          MASS-WEIGHTED NUCLEAR HESSIAN (Hartree/Bohr/Bohr/Kamu)
          ----------------------------------------------------


               1            2            3
   ----- ----- ----- ----- -----
    1    0.00000D+00
    2    0.00000D+00  0.00000D+00
    3    0.00000D+00  0.00000D+00  0.00000D+00



          -------------------------------------------------
          NORMAL MODE EIGENVECTORS IN CARTESIAN COORDINATES
          -------------------------------------------------
                 (Frequencies expressed in cm-1)

                    1           2           3
 
 Frequency          0.00        0.00        0.00
 
           1     0.00000     0.00000     0.00000
           2     0.00000     0.00000     0.00000
           3     0.00000     0.00000     0.00000


        Vibrational analysis via the FX method 
  --- with translations and rotations projected out ---
  --- via the Eckart algorithm                      ---
 Dependent rotation vector no.                    1
  found in ECKART; assuming linear geometry
 Dependent rotation vector no.                    2
  found in ECKART; assuming linear geometry
 Dependent rotation vector no.                    3
  found in ECKART; assuming linear geometry
 Projected Nuclear Hessian trans-rot subspace norm:0.0000D+00
                         (should be close to zero!) 

          --------------------------------------------------------
          MASS-WEIGHTED PROJECTED HESSIAN (Hartree/Bohr/Bohr/Kamu)
          --------------------------------------------------------


               1            2            3
   ----- ----- ----- ----- -----
    1    0.00000D+00
    2    0.00000D+00  0.00000D+00
    3    0.00000D+00  0.00000D+00  0.00000D+00

 center of mass
 --------------
 x =   0.00000000 y =   0.00000000 z =   0.00000000

 moments of inertia (a.u.)
 ------------------
           0.000000000000           0.000000000000           0.000000000000
           0.000000000000           0.000000000000           0.000000000000
           0.000000000000           0.000000000000           0.000000000000

 Rotational Constants
 --------------------
 A=   0.000000 cm-1  (  0.000000 K)
 B=   0.000000 cm-1  (  0.000000 K)
 C=   0.000000 cm-1  (  0.000000 K)


 Temperature                      =   298.15K
 frequency scaling parameter      =   1.0000


 Atom                              

 Zero-Point correction to Energy  =    0.000 kcal/mol  (  0.000000 au)
 Thermal correction to Energy     =    0.888 kcal/mol  (  0.001416 au)
 Thermal correction to Enthalpy   =    1.481 kcal/mol  (  0.002359 au)

 Total Entropy                    =   26.003 cal/mol-K
   - Translational                =   26.003 cal/mol-K (mol. weight =   1.0078)
   - Rotational                   =    0.000 cal/mol-K (symmetry #  =        1)
   - Vibrational                  =    0.000 cal/mol-K

 Cv (constant volume heat capacity) =    2.979 cal/mol-K
   - Translational                  =    2.979 cal/mol-K
   - Rotational                     =    0.000 cal/mol-K
   - Vibrational                    =    0.000 cal/mol-K



          -------------------------------------------------
          NORMAL MODE EIGENVECTORS IN CARTESIAN COORDINATES
          -------------------------------------------------
             (Projected Frequencies expressed in cm-1)

                    1           2           3
 
 P.Frequency        0.00        0.00        0.00
 
           1     0.00000     0.00000     0.00000
           2     0.00000     0.00000     0.00000
           3     0.00000     0.00000     0.00000
 vib:animation  F

 Task  times  cpu:        0.9s     wall:        1.0s
'''
   proton[25] = "NO DATA"
   proton[26] = "NO DATA"
   proton[27] = "NO DATA"
   proton[28] = "NO DATA"

   proton[35] = 0
   proton[41] = "(Experiment) Tissandier MD, Cowen KA, Feng WY, Gundlach E, Cohen MH, Earhart AD, Coe JV, Tuttle TR. The proton's absolute aqueous enthalpy and Gibbs free energy of solvation from cluster-ion solvation data. The Journal of Physical Chemistry A. 1998 Oct 1;102(40):7787-94.  https://doi.org/10.1021/jp982638r"
   proton[42] = 0
   proton[43] = None
   proton[53] = None
   proton[60] = "NO DATA"
   proton[64] = None
   proton[65] = None
   
   return proton



#############################################
#                                           #
#             fetch_esmiles                 #
#                                           #
#############################################

def fetch_esmiles(hup,dbfile,table,esmiles,submitrequest=True):
 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   theory_base = ''
   xc_base     = ''
   basis_base  = ''
   basisHZ_base  = ''
   reaction_type = ''
   reaction_indexes = ''
   reaction_hash = ''
   reaction_gamma = ''
   reaction_kappa = ''
   if 'qsharp_chem' in esmiles:
      theory='qsharp_chem';xc='unknown';basis='sto-3g';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'sto-3g'
      basisHZ1 = 'sto-3g'
      qsharp_norbs  = 2
      qsharp_nalpha = 1
      qsharp_nbeta  = 1
      qsharp_nroots = 0
   elif 'ccsd(t)' in esmiles:
      theory='ccsd(t)';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   elif 'ccsd' in esmiles:
      theory='ccsd';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   elif 'mp2' in esmiles:
      theory='mp2';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      theory_base='dft';xc_base='b3lyp';basis_base='6-311++G(2d,2p)'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   elif 'pspw4' in esmiles:
      theory='pspw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ovc'
   elif 'pspw' in esmiles:
      theory='pspw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw4' in esmiles:
      theory='paw4';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'paw' in esmiles:
      theory='paw';xc='pbe';basis='100.0 Ry';solvation_type='None';calculation_type='ov'
   elif 'am1' in esmiles:
      theory='am1';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'pm3' in esmiles:
      theory='pm3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mndo' in esmiles:
      theory='mndo';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'mindo3' in esmiles:
      theory='mindo3';xc='unknown';basis='semiempirical';solvation_type='COSMO';calculation_type='ovc'
   elif 'dft' in esmiles:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   elif 'uhf' in esmiles:
      theory='uhf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   elif 'hf' in esmiles:
      theory='hf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'
   else:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO';calculation_type='ovc'
      basisHZ  = 'aug-cc-pVTZ'
      basisHZ1 = 'crenbl_ecp'
      basisHZ2 = 'Def2-TZVP'
      basisHZ3 = 'stuttgart_rsc_1997'
      basisHZ3b = 'stuttgart'

   #esmiles1=esmiles.strip()
   esmiles1=esmileswithname_to_esmiles(esmiles.strip())
   ss = esmiles1.split()
   print("ESMILES,ESMILES1=",esmiles,esmiles1)

   #### check for a proton ###
   sesmiles  = esmiles.split()[0]
   sesmiles1 = esmiles1.split()[0]
   if (("[H+]" == sesmiles) or ("[H+]" == sesmiles1) or ("proton" == sesmiles.lower()) or ("proton" == sesmiles1.lower()) ) :
      return [proton_data()]

   if (("[1H+]" == sesmiles) or ("[1H+]" == sesmiles1)):
      return [proton_data()]

   if (("[H]" == sesmiles) or ("[H]" == sesmiles1)):
      charge = 0
      if '^{' in esmiles:   charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      if '^{' in esmiles1:  charge = evalnum(esmiles1.split('^{')[1].split('}')[0].strip())
      if charge==1:
         return [proton_data()]


   smiles  = clean_smiles(ss[0])
   if "id=" in smiles.lower():
      searchingid = True
      try:
         smiles = smiles.replace(")","")
         smiles = smiles.replace("]","")
         smiles = smiles.replace("(","")
         smiles = smiles.replace("[","")
         id = evalnum(smiles.split("=")[1].strip())
      except:
         id = 1001
      wherestr =  " where Id=?"
      wherestr2 = " where Id=? ;"
      checklist = []
      checklist.append(id)
   else:
      searchingid = False
      csmiles  = cannonicalsmiles(smiles)
      inchi    = smiles2InChI(smiles)    #used because it includes charge in inchi
      inchikey = smiles2InChIKey(smiles) #used because it includes charge in inchikey

      xyzfile = wrkdir + "/" + tmpxyz1
      xxx = ""
      if ("xyzdata{" in esmiles):
         xxx = " xyzdata{" + esmiles.split("xyzdata{")[1].split("}")[0] + "}"
      smiles2xyz(smiles+xxx,xyzfile)
      inchi2    = xyz2InChI(xyzfile)    #inchi2 does not include charge
      inchikey2 = xyz2InChIKey(xyzfile) #inchikey2 does not include charge
      mformula = xyz_molecular_formula(xyzfile)

      if 'theory{' in esmiles: theory = esmiles.split('theory{')[1].split('}')[0]
      if 'xc{' in esmiles:     xc     = esmiles.split('xc{')[1].split('}')[0]
      if 'basis{' in esmiles:  
         basis  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
         if ((theory=="ccsd(t)") or (theory=="mp2") or (theory=="qsharp_chem") or (theory=="ccsd")):
            basis_base = basis
      if 'basisHZ{' in esmiles:  
         basisHZ  = removespace_basis(esmiles.split('basisHZ{')[1].split('}')[0])
         basisHZ1 = basisHZ
         basisHZ2 = basisHZ
         basisHZ3 = basisHZ
         basisHZ3b= basisHZ
         if ((theory=="ccsd(t)") or (theory=="mp2") or (theory=="qsharp_chem") or (theory=="ccsd")):
            basisHZ_base  = basisHZ
      if 'theory_base{' in esmiles: theory_base = esmiles.split('theory_base{')[1].split('}')[0]
      if 'xc_base{' in esmiles:     xc_base     = esmiles.split('xc_base{')[1].split('}')[0]
      if 'basis_base{' in esmiles:  basis_base  = esmiles.split('basis_base{')[1].split('}')[0]
      if 'basisHZ_base{' in esmiles:  basisHZ_base  = esmiles.split('basisHZ_base{')[1].split('}')[0]
      charge = smiles2charge(smiles)
      if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      mult = esmiles2mult_set(smiles,charge,esmiles)
      #mult = smiles2mult(smiles,charge)
      #if 'mult{' in esmiles: mult = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      if 'calculation_type' in esmiles: calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]
      if solvation_type.lower()=='none':
         calculation_type = calculation_type.replace('c','')
      calculation_type2 = calculation_type + 'n'

      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      if 'ry' in  basis_base.lower():      basis_base = '%.1f Ry' % (evalnum(basis_base.strip().split()[0]))
      if 'hartree' in  basis_base.lower(): basis_base = '%.1f Ry' % (2*evalnum(basis_base.strip().split()[0]))

      if 'qsharp_chem_filling{' in esmiles:
         qsharp_norbs  = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[0])
         qsharp_nalpha = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[1])
         qsharp_nbeta  = evalnum(esmiles.split('qsharp_chem_filling{')[1].split('}')[0].strip().split()[2])
      if 'qsharp_chem_nroots{' in esmiles: qsharp_nroots  = evalnum(esmiles.split('qsharp_chem_nroots{')[1].split('}')[0].strip())
      if 'qsharp_chem_norbs{' in esmiles:  qsharp_norbs   = evalnum(esmiles.split('qsharp_chem_norbs{')[1].split('}')[0].strip())
      if 'qsharp_chem_nalpha{' in esmiles: qsharp_nalpha  = evalnum(esmiles.split('qsharp_chem_nalpha{')[1].split('}')[0].strip())
      if 'qsharp_chem_nbeta{'  in esmiles: qsharp_nbeta   = evalnum(esmiles.split('qsharp_chem_nbeta{')[1].split('}')[0].strip())


      if 'reaction_type{' in    esmiles: reaction_type    = esmiles.split('reaction_type{')[1].split('}')[0].strip()
      if 'reaction_indexes{' in esmiles: reaction_indexes = esmiles.split('reaction_indexes{')[1].split('}')[0].strip()
      if 'reaction_gamma' in esmiles: reaction_gamma = evalnum(esmiles.split('reaction_gamma{')[1].split('}')[0].strip())
      if 'reaction_kappa' in esmiles: reaction_kappa = evalnum(esmiles.split('reaction_kappa{')[1].split('}')[0].strip())
      if 'reaction_hash' in esmiles:  reaction_hash = esmiles.split('reaction_hash{')[1].split('}')[0].strip()
      if (reaction_hash=='') and ('reaction_genhash{' in esmiles):
         #reaction_genhash = esmiles.split('reaction_genhash{')[1].split('}')[0].strip()
         #reaction_genhash = esmiles.split('reaction_genhash{')[1].strip().rstrip('}')
         reaction_genhash = ''
         jjj = esmiles.split('reaction_genhash{')[1]
         nj = len(jjj)
         i = 0
         pc = 0
         done = False
         while (not done):
            cc = jjj[i]
            if ((cc == '}') and (pc<1)) or (i>(nj-2)):
               done = True
            else:
               if (cc == '{'): pc += 1
               if (cc == '}'): pc -= 1
               reaction_genhash += cc
               i += 1
         cmd9 = chemdb_balance_reaction + "-x \"0 0 0 0 0 " + reaction_genhash + "\""
         result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
         if "bstringsall =" in result9:
            bstringsall = eval(result9.split("bstringsall = ")[1].split('\n')[0].strip())
            reaction_hash = bstringsall[0][3]

      if (reaction_hash=='') and (reaction_type!='') and (reaction_indexes!='') and ("xyzdata{" in esmiles):
         xyzlist = esmiles.split("xyzdata{")[1].split("}")[0].strip().split("|")
         xyzfile = wrkdir + "/" + tmpxyz1
         with open(xyzfile,'w') as ff:
            ff.write("%d\n\n" % len(xyzlist))
            for ll in xyzlist:
               ff.write(ll.strip()+"\n")
         cmd9 = chemdb_balance_reaction + "-r " + xyzfile + " \"" + reaction_indexes + "\" \"" + reaction_type + "\""
         result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
         reaction_hash = result9.split("rhash =")[1].split("\n")[0].strip()
      #elif (reaction_hash!='') and (reaction_type=='') and (reaction_indexes==''):
      #   reaction_type = reaction_hash.split(":")[1].strip()
      #   cmd9 = chemdb_balance_reaction + "-e " + job['xyzfile'] + " \"" + reaction_hash + "\""
      #   result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
      #   indexes = eval(result9.split("reaction indexes=")[1].split("\n")[0])
      #   #print("indexes=",indexes)
      #   if (len(indexes)>0):
      #      for ii in indexes[0][0]:
      #         reaction_indexes += "%d " % (ii+1)
      #   #print("result9=",result9)
      #   #print("reaction_type=",reaction_type)
      #   #print("reaction_indexes=",reaction_indexes)


      hasHZ = inchihasHZ(inchi2) and (basis!="semiempirical") and (theory!='pspw') and (theory!='pspw4') and (theory!='paw')
      notonlyHZ = (not inchionlyHZ(inchi2)) or (basis=="semiempirical") or (theory=='pspw') or (theory=='pspw4') or (theory=='paw')
      print()
      print("fetch_esmiles table  =",table)
      print("fetch_esmiles inchi  =",inchi)
      print("fetch_esmiles inchi2 =",inchi2)
      print("fetch_esmiles inchikey  =",inchikey)
      print("fetch_esmiles inchikey2 =",inchikey2)
      print("fetch_esmiles mformula=",mformula)
      print("fetch_esmiles theory=",theory)
      print("fetch_esmiles xc    =",xc)
      if (notonlyHZ): print("fetch_esmiles basis =",basis)
      print("HASHZ=",hasHZ)
      if (hasHZ):     print("fetch_esmiles basisHZ =",basisHZ)
      if (hasHZ):     print("fetch_esmiles basisHZ1 =",basisHZ1)
      if (hasHZ):     print("fetch_esmiles basisHZ2 =",basisHZ2)
      if (hasHZ):     print("fetch_esmiles basisHZ3 =",basisHZ3)
      if (hasHZ):     print("fetch_esmiles basisHZ3b=",basisHZ3b)
      if (theory_base!=''): print("fetch_esmiles theory_base=",theory_base)
      if (xc_base!=''):     print("fetch_esmiles xc_base    =",xc_base)
      if (basis_base!=''):  print("fetch_esmiles basis_base =",basis_base)
      if (basisHZ_base!=''):  print("fetch_esmiles basisHZ_base =",basisHZ_base)
      print("fetch_esmiles charge=",charge)
      print("fetch_esmiles mult  =",mult)
      print("fetch_esmiles solvation_type=",solvation_type)
      print("fetch_esmiles calculation_type=",calculation_type,calculation_type2)
      if (reaction_hash!=''):  
         print("fetch_esmiles reaction_hash =" + reaction_hash)
         calculation_type  = "l"+calculation_type
         calculation_type2 = "l"+calculation_type2
         if reaction_gamma=='':
            reaction_gamma = 0.0
      if (reaction_gamma!=''):  
         print("fetch_esmiles reaction_gamma =",reaction_gamma)
         if reaction_kappa=='':
            reaction_kappa = 1.0
      if (reaction_kappa!=''):  print("fetch_esmiles reaction_kappa =",reaction_kappa)
      if (theory=='qsharp_chem'):
         print("fetch_esmiles qsharp_norbs  =",qsharp_norbs)
         print("fetch_esmiles qsharp_nalpha =",qsharp_nalpha)
         print("fetch_esmiles qsharp_nbeta  =",qsharp_nbeta)
         print("fetch_esmiles qsharp_nroots =",qsharp_nroots)

      eps = 1.0e-6
      checklist = []
      if (reaction_hash!=''):  
         checklist.append(reaction_hash)
      else:
         checklist.append(inchi)
         checklist.append(inchi2)
         checklist.append(inchi)
         checklist.append(inchi2)
         checklist.append(inchikey)
         checklist.append(inchikey2)
         checklist.append(inchikey)
         checklist.append(inchikey2)
      checklist.append(mformula)
      checklist.append(theory)
      checklist.append(xc)
      if (notonlyHZ): checklist.append(basis)
      if (hasHZ):     
         checklist.append(basisHZ)
         checklist.append(basisHZ1)
         checklist.append(basisHZ2)
         checklist.append(basisHZ3)
         checklist.append(basisHZ3b)
      if (theory_base!=''): checklist.append(theory_base)
      if (xc_base!=''):     checklist.append(xc_base)
      if (basis_base!=''):  checklist.append(basis_base)
      if (basisHZ_base!=''):  checklist.append(basisHZ_base)
      if (reaction_gamma!=''):
         checklist.append(reaction_gamma-eps)
         checklist.append(reaction_gamma+eps)
      if (reaction_kappa!=''):
         checklist.append(reaction_kappa-eps)
         checklist.append(reaction_kappa+eps)
      if (theory=='qsharp_chem'):
         checklist.append(qsharp_norbs)
         checklist.append(qsharp_nalpha)
         checklist.append(qsharp_nbeta)
         checklist.append(qsharp_nroots)
      checklist.append(charge)
      checklist.append(mult)
      checklist.append(solvation_type)
      checklist.append(calculation_type)
      checklist.append(calculation_type2)

      if (reaction_hash!=''):
         wherestr =  " where (constraint_string=?)"
      else:
         wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?)"
      wherestr += " and mformula=?"
      wherestr += " and theory=?"
      wherestr += " and xc=?"
      if (notonlyHZ): wherestr += " and basis=?"
      if (hasHZ):     wherestr += " and (basisHZ=? or basisHZ=? or basisHZ=? or basisHZ=? or basisHZ=?)"
      if (theory_base!=''): wherestr += " and theory_base=?"
      if (xc_base!=''):     wherestr += " and xc_base=?"
      if (basis_base!=''):  wherestr += " and basis_base=?"
      if (basisHZ_base!=''):  wherestr += " and basisHZ_base=?"
      #if (reaction_hash!=''):  wherestr += " and constraint_string=?"
      if (reaction_gamma!=''): wherestr += " and constraint_value>=? and constraint_value<=?"
      if (reaction_kappa!=''): wherestr += " and constraint_spring>=? and constraint_spring<=?"
      if (theory=='qsharp_chem'): wherestr += " and qsharp_norbs=? and qsharp_nalpha=? and qsharp_nbeta=? and qsharp_nroots=?"
      wherestr += " and charge=?"
      wherestr += " and mult=?"
      wherestr += " and solvation_type=?"
      wherestr += " and (calculation_type=? or calculation_type=?)"

   wherestr2 = " where id=? ;"



   if (issqlite3):
      sqlcheck = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      sqlcheck = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   print("sqlcheck=",sqlcheck)
   print("checklist=",checklist)
   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])
   
   print("fetch_esmiles OUT OF DB checklist=",checklist)

   ### esmiles1 not found call chemdb_add_request ###
   if ((len(rows2)<1) and (submitrequest) and (not searchingid)):
      cmd = chemdb_add_request + '\"' + esmiles1 + '\"'
      print("esmiles not found, running cmd:",cmd)
      result = subprocess.check_output(cmd,shell=True).decode("utf-8")
      print() 
      print(result)

   return rows2

 except:
   return []





#############################################
#                                           #
#             fetch_all_esmiles             #
#                                           #
#############################################

def fetch_all_esmiles(hup,dbfile,table,nrows=None):

 try:
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   sqlcheck = "select id,date_time,mformula,esmiles from " + table + " order by id desc"
   if (nrows is not None) and (nrows!=''):
      sqlcheck += " limit " + nrows

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   rows = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck)
      rows = cur.fetchall()

   return rows

 except:
   return []



#############################################
#                                           #
#             add_nmrexp                    #
#                                           #
#############################################

def add_nmrexp(hup,dbfile,table,xyznmr_data):
   xyzfile = wrkdir + "/" + tmpxyz1

   ### fetch xyznmr_blob and solvent ###
   xyznmr_blob = xyznmr_data.split('solvent:')[0].strip()
   if 'solvent:' in xyznmr_data:
      solvent = xyznmr_data.split('solvent:')[1].split(':solvent')[0].strip()
   else:
      solvent = 'None'

   ### create xyzfile ###
   xyzdata = []
   for line in xyznmr_blob.split('\n'):
      ss = line.split()
      sline = "%s  %s %s %s" % (ss[0],ss[1],ss[2],ss[3])
      xyzdata.append(sline)

   with open(xyzfile,'w') as f:
      f.write("%d\n\n" % len(xyzdata))
      for line in xyzdata:
         f.write(line + "\n")

   mformula = xyz_molecular_formula(xyzfile)
   smiles   = xyz2smiles(xyzfile)
   csmiles  = xyz2smiles(xyzfile)
   InChI    = smiles2InChI(smiles)
   InChIKey = smiles2InChIKey(smiles)
   iupac    = pubchem_smiles2iupac(smiles)
   cid      = pubchem_smiles2cid(smiles)
   cas      = pubchem_smiles2cas(smiles)
   kegg     = pubchem_smiles2kegg(smiles)
   synonyms = pubchem_smiles2synonyms(smiles)

   eoln = '\n'
   msg = eoln
   msg += "+-----------------------+" + eoln
   msg += "| Adding NMR Experiment |" + eoln
   msg += "+-----------------------+" + eoln+eoln
   msg += "iupac             ="+iupac + eoln
   msg += "mformula          ="+mformula + eoln
   msg += "InChI             ="+InChI + eoln
   msg += "InChIKey          ="+InChIKey + eoln
   msg += "cid               ="+cid + eoln
   msg += "cas               ="+cas + eoln
   msg += "kegg              ="+kegg + eoln
   msg += "synonyms          ="+synonyms + eoln
   msg += "smiles            ="+smiles + eoln
   msg += "cannonical smiles ="+csmiles + eoln+eoln
   msg += "solvent           ="+solvent+eoln+eoln
   msg += "xyznmr_blob       =" + eoln
   msg += xyznmr_blob + eoln + eoln
   print(msg)


   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   sqlinsert = "insert into " + table
   sqlinsert += " (iupac,mformula,InChI,InChIKey,smiles,csmiles,"
   sqlinsert += "synonyms,cid,cas,kegg,solvent,"
   sqlinsert += "xyznmr_blob) "
   sqlinsert += " values (?,?,?,?,?,?,?,?,?,?,?,?);"

   if (not issqlite3): sqlinsert = sqlinsert.replace('?','%s')

   insertlist = []
   insertlist.append(iupac)
   insertlist.append(mformula)
   insertlist.append(InChI)
   insertlist.append(InChIKey)
   insertlist.append(smiles)
   insertlist.append(csmiles)
   insertlist.append(synonyms)
   insertlist.append(cid)
   insertlist.append(cas)
   insertlist.append(kegg)
   insertlist.append(solvent)
   if (issqlite3):
      insertlist.append(sqlite3.Binary(xyznmr_blob))
   else:
      insertlist.append(xyznmr_blob)

   print("hup=",hup)
   print("dbfile=",dbfile)
   print("table=",table)

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss  = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlinsert,insertlist)
   

   tmsg = "Hi. I just added the nmr data for the " + iupac + " molecule to the " + table + " table in the " + dbfile  + " database."
   msg += tmsg + eoln
   text2speech(tmsg)

   return msg


#############################################
#                                           #
#             nmr_blob_to_isotropic         #
#                                           #
#############################################

def nmr_blob_to_isotropic(nmr_blob):
   isotropic = []
   for line in nmr_blob.split('\n'):
      if 'Atom:' in line:
         number = evalnum(line.split()[1])
         atom   = line.split()[2]
      if 'isotropic =' in line:
         iso = evalnum(line.split()[2])
         isotropic.append([number,atom,iso])
   return isotropic

#############################################
#                                           #
#             fetch_nmr_scaling             #
#                                           #
#############################################
def fetch_nmr_scaling(hup,dbfile,table,atom,theory,xc,basis,theory_property,xc_property,basis_property,solvation_type,solvation_dielectric):

   checklist = []
   checklist.append(atom)
   checklist.append(theory)
   checklist.append(xc)
   checklist.append(basis)
   checklist.append(theory_property)
   checklist.append(xc_property)
   checklist.append(basis_property)
   checklist.append(solvation_type)
   #checklist.append(solvation_dielectric)

   wherestr =  " where atom=?"
   wherestr += " and theory=?"
   wherestr += " and xc=?"
   wherestr += " and basis=?"
   wherestr += " and theory_property=?"
   wherestr += " and xc_property=?"
   wherestr += " and basis_property=?"
   wherestr += " and solvation_type=?;"
   #wherestr += " and solvation_dielectric=?"
   

   if (issqlite3):
      sqlcheck = "select * from " + table + wherestr
   else:
      sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
   


   return rows



#############################################
#                                           #
#             print_nmr_row                 #
#                                           #
#############################################
def print_nmr_row(usehtml5,hup,dbfile,table,row):

   imagelist = []
   eoln = "\n"
   msg0 = "</pre> <pre style=\"font-size:1.0em;color:black\"> \n"
   msg0 += "+---------------------------------------+\n"
   msg0 += "| NMR Shielding and Chemical Shift Data |\n"
   msg0 += "+---------------------------------------+\n\n"
   msg0 += "Id              = %d\n" % (row[0])
   msg0 += "iupac           = %s\n" % (row[1])
   msg0 += "mformula        = %s\n" % (row[2])
   msg0 += "InChI           = %s\n" % (row[3])
   msg0 += "smiles          = %s\n" % (row[4])
   msg0 += "esmiles         = %s\n" % (row[6])
   msg0 += "theory          = %s\n" % (row[9])
   msg0 += "xc              = %s\n" % (row[10])
   msg0 += "basis           = %s\n" % (row[11])
   msg0 += "theory_property = %s\n" % (row[38])
   msg0 += "xc_property     = %s\n" % (row[39])
   msg0 += "basis_property  = %s\n" % (row[40])
   msg0 += "charge          = %d\n" % (row[12])
   msg0 += "mult            = %d\n" % (row[13])
   msg0 += "solvation_type  = %s\n" % (row[17])
   msg0 += smiles2nmrdb(row[4])
   #msg += "solvation_dielectric  = %f\n" % (row[37])
   html = msg0
   pmsg = msg0

   #### ascii molecular picture ####
   msg1  = "chemical_structure_asciiart  = </pre> <pre style=\"font-size:0.5em;color:magenta\"> \n"

   row34 = row[34]
   if isinstance(row34,bytes): row34 = row34.decode("utf-8")
   msg1 += stripWARNINGS(row34)

   msg1 += "</pre> <pre style=\"font-size:1.0em;color:black\"> \n"
   pmsg += msg1

   #### html molecular picture ####
   if (usehtml5):
      isotropic = nmr_blob_to_isotropic(row[36])
      isotxtscript = ''
      for iso in isotropic:
         isotxtscript += "select atomno=%d;"    % iso[0]
         isotxtscript += "label \ %4.1f ppm\ ;" % iso[2]
      msg2 = nmrdat2jsmol(row[23],isotxtscript)
      #msg2 = xyzdat2glmol(row[23])
   else:
      id = row[0]
      pdrand0 = random.randint(0,999999)
      pngfilename = wrkdir + "/%d-large.png" % (id)
      pngname     = "nmr_image-%d-large-%d" % (id,pdrand0)
      #imagelist += [(pngfilename,pngname)]
      cmd9  = chemdb_image0 + "-b %d" % id
      try:
          result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
          imagelist += [(pngfilename,pngname)]
          msg2  = "</pre>\n"
          msg2 += '<br><center><img src="cid:%s"></center><br>\n' % pngname
          msg2 += "<pre style=\"font-size:1.0em;color:black\">\n"
      except:
          msg2  = "\n\nchemdb_image0 failed for id=%d\n" % id
          msg2 += msg1
   html += msg2

   #### print shieldings ####
   msg3 = eoln
   msg3 +=  "NMR Isotropic chemical shieldings from %s: \n" % row[7] 
   msg3 +=  "-------------------------------------------------\n"
   isotropic = nmr_blob_to_isotropic(row[36])
   atoms = []
   for iso in isotropic:
      atoms.append(iso[1])
      msg3 += "   %5d %3s  isotropic ppm= %12.6f\n" % (iso[0],iso[1],iso[2])

   ### search for LFERS ###
   msg3 +=  eoln+ eoln + "Linear Relations between NMR Shieldings and Chemical Shifts:\n"
   msg3 +=  "------------------------------------------------------------\n"
   atoms = list(set(atoms))
   lfers = {}
   pmsg += msg3
   html += msg3
   for a in atoms:
      lfers[a] = fetch_nmr_scaling(hup,dbfile,table,a,row[9],row[10],row[11],row[38],row[39],row[40],row[17],row[37])
      for lfer in lfers[a]:
         msg9 = " %2s%d - slope = %f  intersept = %f  - RMSD=%f R2=%f\n" % (a,lfer[2],lfer[11],lfer[12],lfer[13],lfer[14])
         msg9 += "    - theory{%s} xc{%s} basis{%s}\n" % (lfer[3],lfer[4],lfer[5])
         msg9 += "    - theory_property{%s} xc_property{%s} basis_property{%s}\n" % (lfer[6],lfer[7],lfer[8])
         msg9 += "    - solvation_type{%s} solvation_dielectric{%f}\n" % (lfer[9],lfer[10])
         msg9 += "    - reference{%s} \n\n" % (lfer[15])

         msg9 +=  " %2s%d NMR chemical shifts:\n" % (a,lfer[2])
         emin = 9.999e99
         emax = -9.999e99
         for iso in isotropic:
            if (iso[1]==a):
               shft = -(lfer[12] - iso[2])/lfer[11]
               msg9 += "   %5d %3s ppm= %12.6f\n" % (iso[0],a,shft)
               if (shft>emax): emax = shft
               if (shft<emin): emin = shft
         msg9 += eoln
         pmsg += msg9
         html += msg9

         ### plot the chemical shift spectrum  ###
         emin -= 2.0
         emax += 2.0
         sigma  = (emax-emin)*0.0125
         ngrid  = 501
         pi     = 4.0*atan(1.0)
         dw     = (emax-emin)/float(ngrid-1)
         scale  = 1.0/(sigma*sqrt(2.0*pi))
         omega2 = 1.0/(2.0*sigma*sigma)
         sigma3  = (emax-emin)*0.00255
         scale3  = 1.0/(sigma3*sqrt(2.0*pi))
         omega3 = 1.0/(2.0*sigma3*sigma3)
         ww = []
         y  = []
         y3 = []
         for i in range(ngrid):
            w = emin + i*dw
            ww.append(w)
            pp  = 0.0
            pp3 = 0.0
            for iso in isotropic:
               if (iso[1]==a):
                  shft = -(lfer[12] - iso[2])/lfer[11]
                  x2   = (w-shft)**2
                  tt   = scale*exp(-omega2*x2)
                  tt3  = scale3*exp(-omega3*x2)
                  pp += tt
                  pp3 += tt3
            y.append(pp)
            y3.append(pp3)

         yy = [y]
         symbols = ('*')
         title = '%s%d NMR Isotropic Chemical Shift Spectrum (sigma=%.2f ppm)' % (a,lfer[2],sigma)
         xlabel = 'Chemical Shift (ppm)'
         ylabel = 'Magnitude'
         xmin = emin
         xmax = emax
         ymin = min(y)
         ymax = max(y)
         pmsg += "\n"
         pmsg += ascii_plotter(ww,yy,symbols,title,xlabel,ylabel,xmin,xmax,ymin,ymax,False)

         title3 = '%s%d NMR Isotropic Chemical Shift Spectrum (sigma=%.4f ppm)' % (a,lfer[2],sigma3)
         pdrand     = random.randint(0,999999)
         pdrand2    = random.randint(0,999999)
         nmrgnuplot = wrkdir + "/nmr-%d-%d.gnuplot" % (pdrand,pdrand2)
         nmrpng     = wrkdir + "/nmr-%d-%d.png" % (pdrand,pdrand2)
         nmrdatafile  = wrkdir+"/"+ tmperxn
         nmrdatafile2 = wrkdir+"/"+ tmperxn2
   
         ### define spectrum ###
         with open(nmrdatafile,'w') as ff:
            for i in range(ngrid):
              ff.write("%e %e\n" % (ww[i],y3[i]))

         ### define impulses ###
         ximp = []
         yimp = []
         for iso in isotropic:
            if (iso[1]==a):
               shft = -(lfer[12] - iso[2])/lfer[11]
               iisame = -1
               for ii in range(len(ximp)):
                  if (abs(shft-ximp[ii])<1.0e-3): iisame = ii
               if (iisame!=-1):
                  yimp[iisame] += 1.0
               else:
                  ximp.append(shft)
                  yimp.append(1.0)
         with open(nmrdatafile2,'w') as ff:
            for i in range(len(ximp)):
               ff.write("%e %e\n" % (ximp[i],scale3*yimp[i]))
    
         #nmr = 'set output \"%s\"; set term png; set grid; set title \"%s\"; set xlabel \"Chemical Shift (ppm)\"; set ylabel \"Magnitude\";  plot \"%s\" using 1:2 with l lt 3 lw 1 title \"spectrum\", \"%s\" using 1:2 with impulses lt -1  title \"states\" ' % (nmrpng,title3,nmrdatafile,nmrdatafile2)

         nmr = 'set output \"%s\";  set xrange [] reverse; set term png; set grid; set title \"%s\"; set xlabel \"Chemical Shift (ppm)\"; set ylabel \"Magnitude\";  plot \"%s\" using 1:2 with l lt 3 lw 1 title \"spectrum\" ' % (nmrpng,title3,nmrdatafile)

         with open(nmrgnuplot,'w')  as f: f.write(nmr+eoln)
         os.system(gnuplot + nmrgnuplot)
         try:
            os.unlink(nmrgnuplot)
            os.unlink(nmrdatafile)
            os.unlink(nmrdatafile2)
         except:
            print("Failed to delete temporary gnuplot files")

         pngname     = "image-%d-%d" % (pdrand,pdrand2)
         imagelist += [(nmrpng,pngname)]
         html += "</pre>\n"
         html += '<br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname
         html += "<pre style=\"font-size:1.0em;color:black\">\n"

   return (pmsg,html,imagelist)
   #return msg


#############################################
#                                           #
#             fetch_nmr                     #
#                                           #
#############################################

def fetch_nmr(hup,dbfile,table,esmiles,submitrequest=True):
   if (hup=='sqlite3'):
      issqlite3 = True
   else:
      issqlite3 = False

   calculation_type = ''
   theory_property = ''
   xc_property     = ''
   basis_property  = ''
   if 'pspw4' in esmiles:
      theory='pspw4';xc='pbe';basis='100.0 Ry';solvation_type='None'
   elif 'pspw' in esmiles:
      theory='pspw';xc='pbe';basis='100.0 Ry';solvation_type='None'
   elif 'paw4' in esmiles:
      theory='paw4';xc='pbe';basis='100.0 Ry';solvation_type='None'
   elif 'paw' in esmiles:
      theory='paw';xc='pbe';basis='100.0 Ry';solvation_type='None'
   elif 'dft' in esmiles:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO'
   elif 'uhf' in esmiles:
      theory='uhf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO'
   elif 'hf' in esmiles:
      theory='hf';xc='unknown';basis='6-311++G(2d,2p)';solvation_type='COSMO'
   else:
      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO'

   #esmiles1=esmiles.strip()
   esmiles1=esmileswithname_to_esmiles(esmiles.strip())
   print("ESMILES,ESMILES1=",esmiles,esmiles1)
   ss = esmiles1.split()
   smiles  = clean_smiles(ss[0])
   ss = esmiles1.split()

   smiles  = clean_smiles(ss[0])
   if "id=" in smiles.lower():
      searchingid = True
      try:
         smiles = smiles.replace(")","")
         smiles = smiles.replace("]","")
         smiles = smiles.replace("(","")
         smiles = smiles.replace("[","")
         id = evalnum(smiles.split("=")[1].strip())
      except:
         id = 1001
      wherestr =  " where Id=?"
      wherestr2 = " where Id=? ;"
      checklist = []
      checklist.append(id)
   else:
      searchingid = False
      csmiles = cannonicalsmiles(ss[0])
      inchi    = smiles2InChI(ss[0])
      inchikey = smiles2InChIKey(ss[0])
      xyzfile = wrkdir + "/" + tmpxyz1
      xxx = ""
      if ("xyzdata{" in esmiles):
         xxx = " xyzdata{" + esmiles.split("xyzdata{")[1].split("}")[0] + "}"
      smiles2xyz(smiles+xxx,xyzfile)
      inchi2    = xyz2InChI(xyzfile) #inchi2 does not include charge
      inchikey2 = xyz2InChIKey(xyzfile) #inchikey2 does not include charge

      #print("ss[0]=",ss[0])
      #print("inchi=",inchi)
      #for s in ss:
      #   if 'theory' in s: theory = s.split('{')[1].split('}')[0]
      #   if 'xc' in s:     xc     = s.split('{')[1].split('}')[0]
      #   if 'basis' in s:  basis  = s.split('{')[1].split('}')[0]
      #   if '^' in s:      charge = s.split('{')[1].split('}')[0]
      #   if 'mult' in s:   mult   = s.split('{')[1].split('}')[0]
      #   if 'solvation_type' in s: solvation_type = s.split('{')[1].split('}')[0]

      if 'theory{' in esmiles: theory = esmiles.split('theory{')[1].split('}')[0]
      if 'xc{' in esmiles:     xc     = esmiles.split('xc{')[1].split('}')[0]
      if 'basis{' in esmiles:  basis  = removespace_basis(esmiles.split('basis{')[1].split('}')[0])
      if 'theory_property{' in esmiles: theory_property = esmiles.split('theory_property{')[1].split('}')[0]
      if 'xc_property{' in esmiles:     xc_property     = esmiles.split('xc_property{')[1].split('}')[0]
      if 'basis_property{' in esmiles:  basis_property  = removespace_basis(esmiles.split('basis_property{')[1].split('}')[0])
      charge = smiles2charge(smiles)
      if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
      mult = esmiles2mult_set(smiles,charge,esmiles)
      #mult   = smiles2mult(smiles,charge)
      #if 'mult{' in esmiles:   mult   = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
      if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
      if 'calculation_type' in esmiles: calculation_type = esmiles.split('calculation_type{')[1].split('}')[0]
      if (solvation_type.lower()=='none') and ('c' in calculation_type):
         calculation_type = calculation_type.replace('c','')
      if 'ry' in  basis.lower():      basis = '%.1f Ry' % (evalnum(basis.strip().split()[0]))
      if 'hartree' in  basis.lower(): basis = '%.1f Ry' % (2*evalnum(basis.strip().split()[0]))
      if 'ry' in  basis_property.lower():      basis_property = '%.1f Ry' % (evalnum(basis_property.strip().split()[0]))
      if 'hartree' in  basis_property.lower(): basis_property = '%.1f Ry' % (2*evalnum(basis_property.strip().split()[0]))

      if (theory_property==''): theory_property = theory
      if (xc_property==''):     xc_property = xc
      if (basis_property==''):  basis_property = basis
      print("fetch_nmr inchi =",inchi)
      print("fetch_nmr inchi2=",inchi2)
      print("fetch_nmr inchikey =",inchikey)
      print("fetch_nmr inchikey2=",inchikey2)
      print("fetch_nmr theory=",theory)
      print("fetch_nmr xc    =",xc)
      print("fetch_nmr basis =",basis)
      print("fetch_nmr theory_property=",theory_property)
      print("fetch_nmr xc_property    =",xc_property)
      print("fetch_nmr basis_property =",basis_property)
      print("fetch_nmr charge=",charge)
      print("fetch_nmr mult  =",mult)
      print("fetch_nmr solvation_type=",solvation_type)

      checklist = []
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchi)
      checklist.append(inchi2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(inchikey)
      checklist.append(inchikey2)
      checklist.append(theory)
      checklist.append(xc)
      checklist.append(basis)
      checklist.append(theory_property)
      checklist.append(xc_property)
      checklist.append(basis_property)

      checklist.append(charge)
      checklist.append(mult)
      checklist.append(solvation_type)

      wherestr =  " where (InChI=? or InChI=? or oInChI=? or oInChI=? or InChIKey=? or InChIKey=? or oInChIKey=? or oInChIKey=?)"
      wherestr += " and theory=?"
      wherestr += " and xc=?"
      wherestr += " and basis=?"
      wherestr += " and theory_property=?"
      wherestr += " and xc_property=?"
      wherestr += " and basis_property=?"
      wherestr += " and charge=?"
      wherestr += " and mult=?"
      wherestr += " and solvation_type=?"
      wherestr += " and nmr_blob IS NOT NULL"

   wherestr2 = " where id=? ;"

   if (issqlite3):
      sqlcheck = "select id from " + table + wherestr
      sqlcheck2 = "select * from " + table + wherestr2
   else:
      sqlcheck = "select id from " + table + wherestr.replace('?','%s')
      sqlcheck2 = "select * from " + table + wherestr2.replace('?','%s')

   #if (issqlite3):
   #   sqlcheck = "select * from " + table + wherestr
   #else:
   #   sqlcheck = "select * from " + table + wherestr.replace('?','%s')

   print("nmr_table=",table)
   print("sqlcheck =",sqlcheck)


   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   rows2 = []
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlcheck,checklist)
      rows = cur.fetchall()
      if (len(rows)>0):
         for row in rows:
            checklist2 = [row[0]]
            cur.execute(sqlcheck2,checklist2)
            tmp = cur.fetchall()
            rows2.append(tmp[0])
   

   #with dbcon:
   #   cur = dbcon.cursor()
   #   cur.execute(sqlcheck,checklist)
   #   rows = cur.fetchall()

   ### esmiles not found call chemdb_add_request ###
   if ((len(rows2)<1) and (submitrequest) and (not searchingid)):
      cmd = chemdb_add_request + '\"' + esmiles1 + '\"'
      print("esmiles not found, running cmd:",cmd)
      result = subprocess.check_output(cmd,shell=True).decode("utf-8")
      print()
      print(result)

   return rows2





#############################################
#                                           #
#             molecule2esmiles              #
#                                           #
#############################################
def molecule2esmiles(molecule):
   try:
      tt = (molecule[4],molecule[9],molecule[11],molecule[10],molecule[17],molecule[12],molecule[13],molecule[35])
      esmiles = "%s theory{%s} basis{%s} xc{%s} solvation_type{%s} ^{%d} mult{%d} nf{%d}" % tt
   except:
      tt = (molecule[4],molecule[9],molecule[11],molecule[10],molecule[17],molecule[12],molecule[13])
      esmiles = "%s theory{%s} basis{%s} xc{%s} solvation_type{%s} ^{%d} mult{%d} nf{?}" % tt
   
   return esmiles

#############################################
#                                           #
#        esmileswithid_to_esmiles           #
#                                           #
#############################################

def esmileswithid_to_esmiles(hup,dbfile,table,esmiles0):
   esmiles1 = esmiles0
   try:
      if "id=" in esmiles0.lower():
         rows = fetch_esmiles(hup,dbfile,table,esmiles0,False)
         if (len(rows)>0):
            ss          = esmiles0.strip().split()
            tagsoptions = " ".join(ss[1:])
            molecule    = rows[0]
            smiles      = molecule[4]
            charge      = molecule[12]
            mult        = molecule[13]
            theory      = molecule[9]
            xc          = molecule[10]
            basis       = molecule[11]
            solvation_type = molecule[17]
            xyz         = molecule[23].strip()
            xyzdata     = "xyzdata{" + xyz.replace('\n',' | ') + "}"
            if ("^{" not in tagsoptions):    smiles += " ^{%d}"    % charge
            if ("mult{" not in tagsoptions): smiles += " mult{%d}" % mult
            if ("theory{" not in tagsoptions): smiles += " theory{%s}" % theory
            if ("xc{" not in tagsoptions): smiles += " xc{%s}" % xc
            if ("basis{" not in tagsoptions): smiles += " basis{%s}" % basis
            if ("solvation_type{" not in tagsoptions): smiles += " solvation_type{%s}" % solvation_type
            esmiles1 =  smiles + " " + xyzdata + " " + tagsoptions
         else:
            esmiles1 = "C"
   except:
      esmiles1 = "C"

   return esmiles1



#############################################
#                                           #
#             submit_esmiles                #
#                                           #
#############################################
def submit_esmiles(esmiles,includerotation,datafile,emailfrom=None,machine=None):
   result = "\nSubmitting the following esmiles: " + esmiles + "\n"
   ismp2ccsd = (("ccsd(t)" in esmiles) or ("mp2" in esmiles) or ("qsharp_chem" in esmiles) or ("ccsd" in esmiles))
   cmd0 = ''
   if (includerotation): cmd0 += ' -r ' 
   if (emailfrom!=None) and (emailfrom!=''):
      cmd0 += ' -e ' + emailfrom + ' '
   if (machine!=None):   cmd0 += ' -m ' + machine + ' '
   if (datafile!=''):    cmd0 += ' -a ' + datafile + ' '
 

   #add orginal smiles string to vtag
   vtag = '"osmiles:'+ esmiles.strip().split()[0].strip() + ':osmiles "'
   cmd0 += ' -v ' + vtag + ' '

   submit_type = "chemdb_queue"
   if (machine==None):
      ### Turned off Shirky for mp2 and ccsd(t) ###
      #if (not ismp2ccsd): submit_type = "tnt_queue"
      #submit_type = "tnt_queue"
      submit_type = "chemdb_queue"
   else:
      if (machine.lower()!="shirky"): submit_type = "tnt_queue"

   if (submit_type=="chemdb_queue"):
      tmp_esmiles = esmiles.strip()
      if (datafile!=''):    tmp_esmiles += ' appendfile{' + datafile + '} '
      if (includerotation): tmp_esmiles += ' rotamer{true} '
      if (ismp2ccsd):
         if "xyzdata{" in tmp_esmiles:
            msg = tmp_esmiles.split("xyzdata{")[1].split("}")[0]
            tmp_esmiles = tmp_esmiles.replace("xyzdata{"+msg+"}","")
         cmd1 = use_arrows_api(chemdb_queue) +  '-a \"' + tmp_esmiles + '\"'
      else:
         cmd1 = use_arrows_api(chemdb_queue) +  '-b \"' + tmp_esmiles + '\"'
      cmd1 += ' -v ' + vtag + ' '
   else:
      cmd1 = use_arrows_api(tnt_submit) + cmd0 + '"' + esmiles.strip() + '"'

   print("submit esmiles cmd1 = " + cmd1)
   result += "\n\nsubmit esmiles cmd1 = " + cmd1 +"\n"

   subprocess_Background(cmd1)
   #try:
   #   #cmd1p = cmd1 + " >> " + wrkdir + "/tntsubmit.out"
   #   #pp1 = subprocess.Popen(cmd1p, shell=True)
   #   #result += "\nJob Submit, pid=%d\n" % pp1.pid
   #   result += subprocess.check_output(cmd1,shell=True).decode("utf-8")
   #except:
   #   result += "\n\ntnt_submit failed and job was not submitted\n\n"

   print(result)
   return result



#############################################
#                                           #
#             submit_esmiles_base           #
#                                           #
#############################################

def submit_esmiles_base(esmiles,includerotation,datafile,emailfrom=None,machine=None):
   result = "\nSubmitting the following esmiles: " + esmiles + "\n"
   ismp2ccsd = (("ccsd(t)" in esmiles) or ("mp2" in esmiles) or ("qsharp_chem" in esmiles) or ("ccsd" in esmiles))
   cmd0 = ''
   if (includerotation): cmd0 += ' -r '
   if (emailfrom!=None) and (emailfrom!=''):
      cmd0 += ' -e ' + emailfrom + ' '
   if (machine!=None):   cmd0 += ' -m ' + machine + ' '
   if (datafile!=''):    cmd0 += ' -a ' + datafile + ' '

   #add orginal smiles string to vtag
   vtag = '"osmiles:'+ esmiles.strip().split()[0].strip() + ':osmiles  postsmiles:'+ esmiles.strip() + ':postsmiles "'
   cmd0 += ' -v ' + vtag + ' '

   esmiles1 = esmiles.split()[0]
   if ("theory_base{" in esmiles): 
      esmiles1 += " theory_base{" + esmiles.split("theory_base{")[1].split("}")[0] + "}"

   if ("xc_base{" in esmiles): 
      esmiles1 += " xc_base{" + esmiles.split("xc_base{")[1].split("}")[0] + "}"

   if ("basis_base{" in esmiles): 
      esmiles1 += " basis_base{" + esmiles.split("basis_base{")[1].split("}")[0] + "}"

   if ("basisHZ_base{" in esmiles): 
      esmiles1 += " basisHZ_base{" + esmiles.split("basisHZ_base{")[1].split("}")[0] + "}"

   if ("mult{" in esmiles): 
      esmiles1 += " mult{" + esmiles.split("mult{")[1].split("}")[0] + "}"

   if ("^{" in esmiles): 
      esmiles1 += " ^{" + esmiles.split("mult{")[1].split("}")[0] + "}"


   submit_type = "chemdb_queue"
   if (machine==None):
      ### Turned off Shirky for mp2 and ccsd(t) ###
      #if (not ismp2ccsd): submit_type = "tnt_queue"
      #submit_type = "tnt_queue"
      submit_type = "chemdb_queue"
   else:
      if (machine.lower()!="shirky"): submit_type = "tnt_queue"

   if (submit_type=="chemdb_queue"):
      tmp_esmiles = esmiles1
      tmp_esmiles = esmiles1.strip()
      if (includerotation): tmp_esmiles += ' rotamer{true} '
      if (ismp2ccsd):
         cmd1 = use_arrows_api(chemdb_queue) +  '-b \"' + tmp_esmiles + '\"'
      cmd1 += ' -v ' + vtag + ' '
   else:
      cmd1 = use_arrows_api(tnt_submit) + cmd0 + '"' + esmiles.strip() + '"'

   print("submit esmiles cmd1 = " + cmd1)
   result += "\n\nsubmit esmiles cmd1 = " + cmd1 +"\n"

   subprocess_Background(cmd1)
   #try:
   #   #cmd1p = cmd1 + " >> " + wrkdir + "/tntsubmit.out"
   #   #pp1 = subprocess.Popen(cmd1p, shell=True)
   #   #result += "\nJob Submit, pid=%d\n" % pp1.pid
   #   result += subprocess.check_output(cmd1,shell=True).decode("utf-8")
   #except:
   #   result += "\n\ntnt_submit failed and job was not submitted\n\n"

   print(result)
   return result



##############################################
##                                           #
##             submit_esmiles_xyz            #
##                                           #
##############################################
#def submit_esmiles_xyz(esmiles,includerotation,xyz,vtag=None,machine=None):
#   xyzfile = wrkdir + "/" + tmpxyz99
#   result = "\nSubmitting the following esmiles,xyz: " + esmiles + "\n"
#   result += "xyz=\n"
#   result += xyz + "\n"
#   cmd0 = ''
#
#   if (includerotation): cmd0 += ' -r ' 
#   if ((machine!=None) and (machine!='')): cmd0 += ' -m ' + machine
#
#   if 'pspw4' in esmiles:
#      theory='pspw4';xc='pbe';basis='50.0';solvation_type='None'
#   elif 'pspw' in esmiles:
#      theory='pspw';xc='pbe';basis='50.0';solvation_type='None'
#   elif 'paw4' in esmiles:
#      theory='paw4';xc='pbe';basis='50.0';solvation_type='None'
#   elif 'paw' in esmiles:
#      theory='paw';xc='pbe';basis='50.0';solvation_type='None'
#   elif 'am1' in esmiles:
#      theory='am1';xc='unknown';basis='semiempirical';solvation_type='COSMO'
#   elif 'pm3' in esmiles:
#      theory='pm3';xc='unknown';basis='semiempirical';solvation_type='COSMO'
#   elif 'mndo' in esmiles:
#      theory='mndo';xc='unknown';basis='semiempirical';solvation_type='COSMO'
#   elif 'mindo3' in esmiles:
#      theory='mindo3';xc='unknown';basis='semiempirical';solvation_type='COSMO'
#   elif 'dft' in esmiles:
#      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO'
#   elif 'uhf' in esmiles:
#      theory='uhf';xc='unknown'; basis='6-311++G(2d,2p)';solvation_type='COSMO'
#   elif 'hf' in esmiles:
#      theory='hf';xc='unknown'; basis='6-311++G(2d,2p)';solvation_type='COSMO'
#   else:
#      theory='dft';xc='b3lyp';basis='6-311++G(2d,2p)';solvation_type='COSMO'
#
#   smiles = clean_smiles(esmiles.strip().split()[0])
#
#   if 'theory{' in esmiles: theory = esmiles.split('theory{')[1].split('}')[0]
#   if 'xc{' in esmiles:     xc     = esmiles.split('xc{')[1].split('}')[0]
#   charge = smiles2charge(smiles)
#   if '^{' in esmiles:      charge = evalnum(esmiles.split('^{')[1].split('}')[0].strip())
#   mult   = smiles2mult(smiles,charge)
#   if 'mult{' in esmiles:   mult   = evalnum(esmiles.split('mult{')[1].split('}')[0].strip())
#   if 'solvation_type' in esmiles: solvation_type = esmiles.split('solvation_type{')[1].split('}')[0]
#   if 'basis{' in esmiles:  basis  = esmiles.split('basis{')[1].split('}')[0]
#   if 'ry' in basis.lower():
#      xb = evalnum(basis.strip().split()[0])*0.5
#      basis = '%f' % xb
#   if 'hartree' in basis.lower():
#      xb = evalnum(basis.strip().split()[0])*1.0
#      basis = '%f' % xb
#   charge = '%d' % charge
#   mult   = '%d' % mult
#
#   cmd0 += ' -t ' + theory + " -b '" + basis + "' -x " + xc + " -y " + solvation_type + " -s " + mult + " -q " + charge
#   if ((vtag!=None) and (vtag!='')):  cmd0 += " -v " + vtag
#
#   ofile = open(xyzfile,'w')
#   ofile.write(xyz)
#   ofile.close()
#   cmd1 = tnt_submit + cmd0 + " " + xyzfile
#   print("submit esmiles cmd1 = " + cmd1)
#
#   try:
#      result += subprocess.check_output(cmd1,shell=True).decode("utf-8")
#   except:
#      result += "\n\ntnt_submit failed and job was not submitted\n\n"
#   print(result)
#   return result


##############################################
#                                            #
#              fetch_myids                   #
#                                            #
##############################################
def fetch_myids(hup,dbfile,table,myids):
   try:
      if (hup=='sqlite3'):
         issqlite3 = True
      else:
         issqlite3 = False

      checklist = [myids[0]]
      wherestr2 = " where id=? "
      for id in myids[1:]:
         checklist.append(id)
         wherestr2 += " or id=? "
      wherestr2 += " "
      print("wherestr2=",wherestr2)
      print("checklist=",checklist)


      if (issqlite3):
         sqlcheck = "select * from " + table +  wherestr2  + " order by id desc;"
      else:
         sqlcheck = "select * from " + table + wherestr2.replace('?','%s') + " order by id desc;"

      if (issqlite3):
         dbcon = sqlite3.connect(dbfile)
      else:
         host = hup.split()[0]
         user = hup.split()[1]
         pss = hup.split()[2]
         dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

      with dbcon:
         cur = dbcon.cursor()
         cur.execute(sqlcheck,checklist)
         rows = cur.fetchall()


      return rows

   except:
      return []


def findhomolumo(eigall0):

   #eigtype = eigall.split("\n")[0].strip()
   eigall = eigall0
   if isinstance(eigall,bytes): eigall=eigall.decode("utf-8")
   eigtype = eigall.split("\n")[0].strip()

   ### rdft calculation ###
   if (eigtype=="restricted"):
      eigup = []
      occup = []
      eigdn = []
      occdn = []
      for line in eigall.strip().split("\n")[1:]:
         e = line.split("E=")[1].replace("D","E")
         o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
         if (abs(evalnum(e))<MAX_EIGENVALUE):
            eigup.append(evalnum(e))
            occup.append(evalnum(o))

   ### udft calculation ###
   elif (eigtype=="alpha"):
      eigup = []
      occup = []
      for line in  eigall.split('beta')[0].strip().split("\n")[1:]:
         e = line.split("E=")[1].replace("D","E")
         o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
         if (abs(evalnum(e))<MAX_EIGENVALUE):
            eigup.append(evalnum(e))
            occup.append(evalnum(o))
      eigdn = []
      occdn = []
      for line in  eigall.split('beta')[1].strip().split("\n"):
         e = line.split("E=")[1].replace("D","E")
         o = line.split("E=")[0].split("Occ=")[1].replace("D","E")
         if (abs(evalnum(e))<MAX_EIGENVALUE):
            eigdn.append(evalnum(e))
            occdn.append(evalnum(o))

   ### pspw calculation ###
   elif (eigtype=="orbital energies:"):
      eigup = []
      occup = []
      eigdn = []
      occdn = []
      ff    = 1.0
      for line in eigall.strip().split("\n")[1:]:
         if "virtual" in line:
            ff = 0.0
         else:
            ss = line.split()
            e = ss[0]
            eigup.append(evalnum(e))
            occup.append(ff)
            if (len(ss)>3):
               e2 = ss[3]
               eigdn.append(evalnum(e2))
               occdn.append(ff)

   homolumo = []
   homoup = -99999999.9999
   lumoup = 99999999.9999
   for i in range(len(eigup)): 
      if (eigup[i]>homoup) and (occup[i]>1.0e-3): 
         homoup = eigup[i]
   for i in range(len(eigup)): 
      if (eigup[i]<lumoup) and (occup[i]<1.0e-3): 
         lumoup = eigup[i]
   homolumo = [homoup,lumoup]

   if (len(eigdn)>0):
      homodn = -99999999.9999
      lumodn = 99999999.9999
      for i in range(len(eigdn)): 
         if (eigdn[i]>homodn) and (occdn[i]>1.0e-3): 
            homodn = eigdn[i]
      for i in range(len(eigdn)):
         if (eigdn[i]<lumodn) and (occdn[i]<1.0e-3):
            lumodn = eigdn[i]
      homolumo += [homodn,lumodn]

   
   return homolumo

def inertia_rotate(mass,xyz0):
   #import numpy
   #nion = len(mass)
   #mall = 0.0
   #Inertia = [0.0]*9
   #for ii in range(nion):
   #   m = mass[ii]
   #   mall += m
   #   x = xyz0[3*ii]
   #   y = xyz0[3*ii+1]
   #   z = xyz0[3*ii+2]
   #   Inertia[0] += (y*y + z*z)*m
   #   Inertia[1] -= (x*y)*m
   #   Inertia[2] -= (x*z)*m
   #   Inertia[3] -= (y*x)*m
   #   Inertia[4] += (z*z + x*x)*m
   #   Inertia[5] -= (y*z)*m
   #   Inertia[6] -= (z*x)*m
   #   Inertia[7] -= (z*y)*m
   #   Inertia[8] += (x*x + y*y )*m
   #for ii in range(9):
   #   Inertia[ii] = Inertia[ii]/mall

   #a = numpy.matrix([[Inertia[0], Inertia[1],Inertia[2]],[Inertia[3], Inertia[4], Inertia[5]],[Inertia[6], Inertia[7], Inertia[8]]])
   #eigs, vv = numpy.linalg.eig(a)
   #idx0 = eigs.argsort()[::+1]
   #idx = numpy.array([0]*3)
   #idx[0] = idx0[0]
   #idx[1] = idx0[1]
   #idx[2] = idx0[2]
   #eigs = eigs[idx]
   #vv = vv[:,idx]

   smallr = False
   nion = len(mass)
   v0 = [1.0,0.0,0.0]
   v1 = [0.0,1.0,0.0]
   v2 = [0.0,0.0,1.0]
   #### find v1 ####
   rmax = 0.0
   for ii in range(nion):
      x = xyz0[3*ii]
      y = xyz0[3*ii+1]
      z = xyz0[3*ii+2]
      r = sqrt(x*x + y*y + z*z)
      if (r>rmax):
         rmax = r
         v1   = [x,y,z]
   if (rmax>1.0e-2):
      v1[0] = v1[0]/rmax
      v1[1] = v1[1]/rmax
      v1[2] = v1[2]/rmax
   else:
      v1 = [0.0,1.0,0.0]
      smallr = True

   #### find v0 ####
   rmax = 0.0
   for ii in range(nion):
      x = xyz0[3*ii]
      y = xyz0[3*ii+1]
      z = xyz0[3*ii+2]
      proj = x*v1[0] + y*v1[1] + z*v1[2]
      r = sqrt(x*x + y*y + z*z) - abs(proj)
      if (r>rmax):
         rmax = r
         v0   = [x,y,z]
   proj  = v0[0]*v1[0] + v0[1]*v1[1] + v0[2]*v1[2]
   v0[0] = v0[0] - proj*v1[0]
   v0[1] = v0[1] - proj*v1[1]
   v0[2] = v0[2] - proj*v1[2]
   r = sqrt(v0[0]*v0[0] + v0[1]*v0[1] + v0[2]*v0[2])
   if (r>1.0e-2) and (not smallr):
      v0[0] = v0[0]/r
      v0[1] = v0[1]/r
      v0[2] = v0[2]/r
   else:
      v0 = [1.0,0.0,0.0]
      smallr = True

   ### find v2 = v0xv1 ###
   v2[0] = v0[1]*v1[2] - v0[2]*v1[1]
   v2[1] = v0[2]*v1[0] - v0[0]*v1[2]
   v2[2] = v0[0]*v1[1] - v0[1]*v1[0]
   r = sqrt(v2[0]*v2[0] + v2[1]*v2[1] + v2[2]*v2[2])
   if (r>1.0e-6): 
      v2[0] = v2[0]/r
      v2[1] = v2[1]/r
      v2[2] = v2[2]/r

      #print("v0v0=",v0[0]*v0[0]+v0[1]*v0[1]+v0[2]*v0[2])
      #print("v1v1=",v1[0]*v1[0]+v1[1]*v1[1]+v1[2]*v1[2])
      #print("v2v2=",v2[0]*v2[0]+v2[1]*v2[1]+v2[2]*v2[2])
      #print("v0v1=",v0[0]*v1[0] + v0[1]*v1[1] + v0[2]*v1[2])
      #print("v0v2=",v0[0]*v2[0]+v0[1]*v2[1]+v0[2]*v2[2])
      #print("v1v2=",v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2])

      xyz = [0.0]*3*nion
      for ii in range(nion):
         x = xyz0[3*ii]
         y = xyz0[3*ii+1]
         z = xyz0[3*ii+2]
         xyz[3*ii]   = v0[0]*x + v1[0]*y + v2[0]*z
         xyz[3*ii+1] = v0[1]*x + v1[1]*y + v2[1]*z
         xyz[3*ii+2] = v0[2]*x + v1[2]*y + v2[2]*z
   else:
      xyz = xyz0

   return xyz

def shift_to_center_mass(mass,xyz0):
   xyz = [0.0]*len(xyz0)
   nion = len(mass)
   mall = 0.0
   cm = [0.0]*3
   for ii in range(nion):
      m = mass[ii]
      mall += m
      x = xyz0[3*ii]
      y = xyz0[3*ii+1]
      z = xyz0[3*ii+2]
      cm[0] += m*x
      cm[1] += m*y
      cm[2] += m*z

   for ii in range(3):
      cm[ii] = cm[ii]/mall

   for ii in range(nion):
      xyz[3*ii]   = xyz0[3*ii]   - cm[0]
      xyz[3*ii+1] = xyz0[3*ii+1] - cm[1]
      xyz[3*ii+2] = xyz0[3*ii+2] - cm[2]

   return xyz

##############################################
#                                            #
#              alignxyzdat                   #
#                                            #
##############################################
def alignxyzdat(xyzdat):
   nion   = eval(xyzdat.split('\n')[0])
   xyz0   = []
   symbol = []
   mass = []
   for line in xyzdat.strip().split('\n')[2:]:
      ss = line.split()
      symbol.append(ss[0])
      xyz0.append(eval(ss[1]))
      xyz0.append(eval(ss[2]))
      xyz0.append(eval(ss[3]))
      if ss[0] in periodic_table_mass:
         mass.append(periodic_table_mass[ss[0]])
      else:
         mass.append(0.0)

   xyz1 = shift_to_center_mass(mass,xyz0)
   xyz2 = inertia_rotate(mass,xyz0)

   xyzdat2 = '%d\n\n' % nion
   for ii in range(nion):
      xyzdat2 += "%s %f %f %f\n" % (symbol[ii],xyz2[3*ii],xyz2[3*ii+1],xyz2[3*ii+2])

   return xyzdat2


##############################################
#                                            #
#              kekuletablehtml               #
#                                            #
##############################################

def kekuletablehtml(hup,dbfile,table,myids):

   html = "</pre>\n"
   html += '<script type=\"text/javascript\" src=\"{{url_for(\'static\', filename=\'kekule/kekule.min.js\')}}\"></script>\n\n'

   molecules = fetch_myids(hup,dbfile,table,myids)

   #### append geometries ####
   for molecule in molecules:
      moleculename = "kekule%d" % molecule[0]
      molecule23 = molecule[23]
      if isinstance(molecule23,bytes): molecule23=molecule23.decode("utf-8")
      html += "<script id=\"%s\" type=\"chemical/x-mdl-molfile\">\n" % moleculename
      html += xyzdat2mol(alignxyzdat(molecule23))
      html += "</script>\n\n"

   html += "Maximum of 100 rows printed fancy form - all row listed below"
   html += "<table border = \"1\"> \n"
   html += "     <tr> \n"
   html += "         <th  style=\"color:blue;\"> id </th> \n"
   html += "         <th  style=\"color:blue;\"> mformula </th> \n"
   html += "         <th> Structure </th> \n"
   html += "         <th  style=\"color:blue;\"> Energies </th> \n"
   html += "         <th  style=\"color:blue;\"> esmiles </th> \n"
   html += "     </tr> \n"

   autokcal= 627.509469
   autokj  = 2625.49962
   tempfac = 298.15/1000.0
   count = 0
   for molecule in molecules:
       id           = molecule[0]
       moleculename = "kekule%d" % molecule[0]
       mformula     = molecule[2]
       esmiles      = quote_comma_name(molecule[6])
       energy         = molecule[14]
       free_energy    = molecule[14]+molecule[15] -tempfac*molecule[16]/autokcal
       aq_free_energy = free_energy
       if (molecule[17]=='COSMO'):       aq_free_energy += -molecule[18] + molecule[19]
       if ('COSMO-SMD' in molecule[17]): aq_free_energy += molecule[18]
       homolumo = findhomolumo(molecule[25])
       if (len(homolumo)==4):
          homo = "HOMO = %.2f eV (alpha) %.2f eV (beta)" % (homolumo[0]*27.2116,homolumo[2]*27.2116)
          lumo = "LUMO = %.2f eV (alpha) %.2f eV (beta)" % (homolumo[1]*27.2116,homolumo[3]*27.2116)
       else:
          homo = "HOMO = %.2f eV" % (homolumo[0]*27.2116)
          lumo = "LUMO = %.2f eV" % (homolumo[1]*27.2116)
       ss0 = "%d" % id
       #link = "https://arrows.emsl.pnnl.gov/api/molecule/%22id=" + ss0 + "%22"
       link = ARROWS_API_HOME + "molecule/%22id=" + ss0 + "%22"
       ref = "<a target=\"_blank\" href=\"" + link + "\">%s</a>" % ss0

       count += 1
       if ((count%3)==0):
          html += "<tr bgcolor=\"#42E8F4\"> \n"
       elif ((count%3)==1):
          html += "     <tr> \n"
       else:
          html += "<tr bgcolor=\"#B2FBC6\"> \n"
          
       html += "        <td  style=\"color:blue;\" width=\"75\"> <center> %s </center> </td> \n" % ref
       html += "        <td  style=\"color:blue;\" width=\"150\"><center> %s </center> </td> \n" % mformula
       html += "        <td> <span style=\"display:block; width:250px;height:250px\" data-widget=\"Kekule.ChemWidget.Viewer2D\" \n"
       html += "           data-chem-obj=\"url(#%s)\" data-predefined-setting=\"static\" data-autofit=\"true\" > </span> \n" % moleculename
       html += "        </td> \n"
       html += "        <td valign=\"top\" width=\"300\" style=\"color:blue;\">  <table>  \n"
       html += "                <tr> <td> Energy = %.6f Hartrees </td> </tr>  \n" % energy
       html += "                <tr> <td> Free Energy = %.6f Hartrees </td> </tr>  \n" % free_energy
       html += "                <tr> <td> Aq. Free Energy = %.6f Hartrees  </td> </tr>  \n" % aq_free_energy
       html += "                <tr> <td> %s </td> </tr>  \n" % homo
       html += "                <tr> <td> %s </td> </tr>  \n" % lumo
       html += "              </table> \n"
       html += "        </td> \n"
       html += "        <td valign=\"top\"  style=\"color:blue;\" width=\"300\"> %s</td> \n" % esmiles
       html += "     </tr> \n"

   html += "</table>\n"
   html += "<pre style=\"font-size:1.0em;color:black\">\n"

   return html




##########################################################
#                                                        #
#        generate_reactions_from_reactionenumerate       #
#                                                        #
##########################################################
def generate_reactions_from_reactionenumerate(reactiontable):

   ### change to small case  ###
   rstring = ireplace("TABLEREACTIONS", "tablereactions", reactiontable)
   rstring = ireplace("TABLEMETHODS", "tablemethods", rstring)
   rstring = ireplace("REACTION", "reaction", rstring)
   rstring = ireplace("METHOD", "method", rstring)

   ### get the reactions ###
   reactions      = []
   msg2           = rstring.split("tablereactions:")
   tablereactions = msg2[1].split(":tablereactions")[0]
   rstring        = rstring.replace("tablereactions:"+tablereactions+":tablereactions","")
   for a in tablereactions.strip().split("reaction:")[1:]:
      reaction = a.strip().split(":reaction")[0]
      reaction2 = addspaces_reaction(reaction.strip())
      reaction3 = parsetosmiles(reaction2)
      reactions.append(reaction3)

   ### get the methods ###
   methods      = []
   msg2         = rstring.split("tablemethods:")
   tablemethods = msg2[1].split(":tablemethods")[0]
   rstring      = rstring.replace("tablemethods:"+tablemethods+":tablemethods","")
   for a in tablemethods.strip().split("method:")[1:]:
      method = a.strip().split(":method")[0]
      methods.append(method)

   rr = ""
   for reaction in reactions:
      sslist = reaction.split("-->")
      left  = sslist[0].strip()
      left = left.replace("\t"," ")
      left = left.replace("\n"," ")
      #left = left.decode('ascii', 'replace')
      left = left.replace('\xc2', ' ')
      left = left.replace('\xa0', ' ')
      esmiles_reactants  = left.split(' + ')
      number_reactants = len(esmiles_reactants)
      if (len(sslist)>1):
         right = sslist[1].strip()
         right= right.replace("\t"," ")
         right= right.replace("\n"," ")
         right= right.replace('\xc2', ' ')
         right= right.replace('\xa0', ' ')
         esmiles_products   = right.split(' + ')
         number_products  = len(esmiles_products)
      else:
         esmiles_products = esmiles_reactants
         number_products  = number_reactants
         esmiles_reactants = []
         number_reactants = 0
      for method in methods:
         rr += "reaction: "
         for k in range(number_reactants-1):
            rr += esmiles_reactants[k] + " " + method + " + "
         if (number_reactants>0):
            rr += esmiles_reactants[number_reactants-1] + " " + method + " --> "
         for k in range(number_products-1):
            rr += esmiles_products[k] + " " + method + " + "
         if (number_products>0):
            rr += esmiles_products[number_products-1] + " " + method  + " :reaction\n"

   return rr




##########################################################
#                                                        #
#             maketable_from_reactionenumerate           #
#                                                        #
##########################################################
def maketable_from_reactionenumerate(reactiontable,reaction_data):

   ### change to small case  ###
   rstring = ireplace("TABLEREACTIONS", "tablereactions", reactiontable)
   rstring = ireplace("TABLEMETHODS", "tablemethods", rstring)
   rstring = ireplace("REACTION", "reaction", rstring)
   rstring = ireplace("METHOD", "method", rstring)

   ### get the reactions ###
   reactions      = []
   msg2           = rstring.split("tablereactions:")
   tablereactions = msg2[1].split(":tablereactions")[0]
   rstring        = rstring.replace("tablereactions:"+tablereactions+":tablereactions","")
   for a in tablereactions.strip().split("reaction:")[1:]:
      reaction = a.strip().split(":reaction")[0]
      reaction2 = addspaces_reaction(reaction.strip())
      reaction3 = parsetosmiles(reaction2)
      reactions.append(reaction3)

   ### get the methods ###
   methods      = []
   msg2         = rstring.split("tablemethods:")
   tablemethods = msg2[1].split(":tablemethods")[0]
   rstring      = rstring.replace("tablemethods:"+tablemethods+":tablemethods","")
   for a in tablemethods.strip().split("method:")[1:]:
      method = a.strip().split(":method")[0]
      methods.append(method)

   ### get the energytypes ###
   toolongcountmax = 8
   toolongcount = 0
   toolong      = False
   etypes   = []
   utypes   = []
   rstring = ireplace("ENERGYTYPE", "energytype", rstring)
   while ((len(rstring.split("energytype:"))>1) and (not toolong)):
      msg2    = rstring.split("energytype:")
      etype   = msg2[1].split(":energytype")[0]
      rstring = rstring.replace("energytype:"+etype+":energytype","")
      if "erxn(gas)"       in etype.lower(): etypes.append([0,"Erxn(gas)"])
      if "hrxn(gas)"       in etype.lower(): etypes.append([1,"Hrxn(gas)"])
      if "grxn(gas)"       in etype.lower(): etypes.append([2,"Grxn(gas)"])
      if "delta_solvation" in etype.lower(): etypes.append([3,"Delta_Solvation"])
      if "grxn(aq)"        in etype.lower(): etypes.append([4,"Grxn(aq)"])
      if "kcal/mol" in etype.lower(): utypes.append([627.509469,"kcal/mol"])
      if "kj/mol"   in etype.lower(): utypes.append([2625.49962,"kJ/mol"])
      if "ev"       in etype.lower(): utypes.append([27.2114,"eV"])
      if "cm-1"     in etype.lower(): utypes.append([219474.6,"cm-1"])
      if "ry"       in etype.lower(): utypes.append([2.0,"Rydbergs"])
      if "hartree"  in etype.lower(): utypes.append([1.0,"Hartrees"])
      if "au"       in etype.lower(): utypes.append([1.0,"au"])
      toolong = (toolongcount > toolongcountmax)
      toolongcount += 1
   if (toolong):
      rr = "maketable_from_reactionenumerate: too long parinsg energytype: :energytype\n"
      return (rr,0)
   if (len(etypes)==0): etypes.append([4,"Grxn(aq)"])
   if (len(utypes)==0): utypes.append([1,"Hartrees"])

   nr = len(reactions)
   nm = len(methods)

   rr  = "+--------------------------------+\n"
   rr += "| Generating Reaction Table Data |\n"
   rr += "+--------------------------------+\n\n"
   for etype in etypes:
    for utype in utypes:
      rr += "CSV FILE of for %s in %s:\n" % (etype[1],utype[1])
      rr += "--------------------------------------------------------------------------------------------------\n"
      rr += "reactions,instance"
      for method  in methods:
         rr += "," + method.strip()
      rr += "\n"
      for k in range(nr):
         max_paths = 0
         for j in range(nm):
            i = j + k*nm
            ipaths = reaction_data[i][1]
            max_paths = max(len(ipaths),max_paths)
         for ii in range(max_paths):
            rr += reactions[k]
            rr += ",%d" % ii
            for j in range(nm):
               i = j + k*nm
               ipaths = reaction_data[i][1]
               if (ii<len(ipaths)):
                  inst = ipaths[ii]
                  rr += ",%15.6f" % (inst[etype[0]]*utype[0])
               else:
                  rr += ","
            rr += "\n"
      rr += "--------------------------------------------------------------------------------------------------\n\n"

   return (rr,nr*nm)



############################################
#                                          #
#            append_esmileslist             #
#                                          #
############################################
def append_esmileslist(esmiles_list,esmiles0):
    
   try:
      x0 = float(esmiles0.split(None,1)[0])
      esmiles1 = esmiles0.split(None,1)[1]
   except:
      x0 = 1.0
      esmiles1 = esmiles0

   if ("xyzdata{" in esmiles1):
      msg = esmiles1.split("xyzdata{")[1].split("}")[0]
      esmiles2 = esmiles1.replace("xyzdata{" + msg + "}","")
      echeck = " ".join(esmiles2.split()) 
   else:
      echeck = " ".join(esmiles1.split()) 


   newlist = []
   foundduplicate = False
   for esmiles in esmiles_list:
      try:
         x = float(esmiles.split(None,1)[0])
         esmiles2 = esmiles.split(None,1)[1]
      except:
         x = 1.0
         esmiles2 = esmiles

      if ("xyzdata{" in esmiles2):
         msg = esmiles2.split("xyzdata{")[1].split("}")[0]
         esmiles2 = esmiles2.replace("xyzdata{"+msg+"}","")
      esmiles2 = " ".join(esmiles2.split())

      if (esmiles2!=echeck):
         newlist.append(esmiles)
      else:
         x0 += x
         foundduplicate = True

   if (foundduplicate):
      ttt =  "%.2f " % x0
      ttt += esmiles1
      newlist.append(ttt)
   else:
      newlist.append(esmiles0)

   return newlist



############################# main program ###################################
usage = \
"""
chemdb fetch reactions program

  Usage: chemdb_fetch_reactions -h hup_string -d database -t table -n nmr_table -q requests_table reactions plainoutput htmloutput

  -h hup_string="machine user password" or enter sqlite3 for sqlite3 db
  -d database = "name of database"
  -t table = "name of calculation table"
  -n nmr_table = "name of nmr_table"
  -q requests_table = "name of requests_table"
  -f view frequencies
  -e submit missing esmiles
  --arrows_api=url change location of arrows api  url
  --help prints this message

"""


eoln = "\n"
#Database defaults
hup    = hup0
#dbfile = "TNT_Project"
dbfile = dbfile0
table  = "calculations"
requests_table = "requests"
abbrev_table   = "abbreviations"
nmr_table = "nmr_calculations"
nmr_scaling_table = "nmr_scaling"
nmr_experiments_table = "nmr_experiments"
heat_formation_table = "heats_of_formation"

tt      = time.localtime()

viewfreq              = False
submitmissingesmiles1 = False
opts, args = getopt.getopt(sys.argv[1:], "h:d:t:n:q:ef",['help','arrows_api='])
for o, a in opts:
  if o=='-h':
     hup = a
  if o=='-d':
     dbfile = a
  if o=='-t':
     table = a
  if o=='-q':
     requests_table = a
  if o=='-n':
     nmr_table = a
  if o=='-f':
     viewfreq = True
  if o=='-e':
     submitmissingesmiles1 = True
  if o=='--arrows_api':
     ARROWS_API_HOME = a

  if o in ("--help"):
    print(usage)
    exit()

if (len(args)<3): 
   print(usage)
   exit()

print("chemdb_fetch_reactions5 - mysql/sqlite3 version - arrows_api url=",ARROWS_API_HOME)
print(args[0])
print(args[1])

### load the reactions input file into rstring ###
if (os.path.isfile(args[0])):
   rfile = open(args[0],'r')
   rstring = rfile.read()
   rfile.close()
else:
   rstring = args[0]


### look for usehtml5 keyword ###
usehtml5 = False
rstring = ireplace("USEHTML5", "usehtml5", rstring)
if "usehtml5" in rstring: 
   usehtml5 = True
   rstring = rstring.replace("usehtml5","")

rstring = ireplace("NOHTML5", "nohtml5", rstring)
if "nohtml5" in rstring: 
   usehtml5 = False
   rstring = rstring.replace("nohtml5","")


### look for qsharp_chem keyword ###
is_qsharp_chem = False
if "qsharp_chem" in rstring.lower():
   is_qsharp_chem = True


pppfile = open(args[1],'w')
ooofile = open(args[2],'w')

if (usehtml5): ooofile.write("<!DOCTYPE html>\n")
ooofile.write("<html>\n")
if (usehtml5): ooofile.write("<head> <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no, target-densitydpi=device-dpi\"> <meta charset=\"utf-8\"><link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"{{url_for(\'static\', filename=\'arrows-static/favicon-32x32.png')}}\"><link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"{{url_for(\'static\', filename=\'arrows-static/favicon-96x96.png')}}\"><link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"{{url_for(\'static\', filename=\'arrows-static/favicon-16x16.png')}}\"><style type=\"text/css\"> \n .linkbanner { \n position: relative; \n padding: 1px; \n background-image: linear-gradient(#4286f4,lightgreen,#4286f4); \n font-size: 18px; \n font-weight: bold; \n font-family: times; \n color: white; \n } \n </style> </head>")
ooofile.write("<body>\n")
if (usehtml5): ooofile.write("<div class=\"linkbanner\"> <a href=\"%s\"><img src=\"{{url_for(\'static\', filename=\'arrows-static/EMSLArrows2019.png')}}\" alt=\"Copyright Arrows Logo\" width=\"180\" height=\"90\" align=\"middle\"></a> <a href=\"%speriodic\">3D Periodic Editor</a> &nbsp;<a href=\"%s3dbuilder\">3D Molecular And Reaction Editor</a>  &nbsp; <a href=\"%sexpert\">Expert Editor</a> &nbsp;   <a href=\"%sqsharp_chem\">Microsoft Quantum Editor</a> &nbsp;  <a href=\"%saerosol\">EMSL Aerosol Workshop Editor</a> &nbsp; <a href=\"http://www.nwchem-sw.org/index.php/EMSL_Arrows#\">Manual</a> </div>" % (ARROWS_API_HOME,ARROWS_API_HOME,ARROWS_API_HOME,ARROWS_API_HOME,ARROWS_API_HOME,ARROWS_API_HOME))
if is_qsharp_chem:
   ooofile.write(ArrowsHeader_QDK)
elif (usehtml5):
   ooofile.write(ArrowsHeader0)
else:
   ooofile.write(ArrowsHeader)
ooofile.write("<pre style=\"font-size:1.0em;color:blue\">\n")

#ooofile.write("chemdb_fetch_reactions mysql version"+eoln)
#pppfile.write("chemdb_fetch_reactions mysql version"+eoln)
imagelist  = []
imagecount = 0


#####################################
##### parse hidden options first ####
#####################################

### get the database and table ###
rstring = ireplace("HUP_STRING", "hup_string", rstring)
rstring = ireplace("DATABASE", "database", rstring)
rstring = ireplace("TABLE", "table", rstring)
rstring = ireplace("REQUESTS_TABLE", "requests_table", rstring)
for line in rstring.split("\n"):
   if ("hup_string:" in line):
      rstring = rstring.replace(line,"")
      hup  = line.split()[1]
   if ("database:" in line):
      rstring = rstring.replace(line,"")
      dbfile  = line.split()[1]
   if ("requests_table:" in line):
      rstring = rstring.replace(line,"")
      requests_table   = line.split()[1]
   if ("table:" in line):
      rstring = rstring.replace(line,"")
      table   = line.split()[1]

if (hup=='sqlite3'):
   issqlite3 = True
   #ooofile.write("sqlite3 db file = "+dbfile+eoln)
   #pppfile.write("sqlite3 db file = "+dbfile+eoln)
else:
   issqlite3 = False
   #ooofile.write("mysql db        ="+dbfile+eoln)
   #pppfile.write("mysql db        ="+dbfile+eoln)
#ooofile.write("table name      ="+table+eoln)
#ooofile.write("requests_table name="+requests_table+eoln)
#ooofile.write("nmr_scaling_table name="+nmr_scaling_table+eoln)
#pppfile.write("table name      ="+table+eoln)
#pppfile.write("requests_table name="+requests_table+eoln)
#pppfile.write("nmr_scaling_table name="+nmr_scaling_table+eoln)

### emailfrom  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
emailfrom = ''
rstring = ireplace("EMAILFROM", "emailfrom", rstring)
while ((len(rstring.split("emailfrom:"))>1) and (not toolong) and (":emailfrom" in rstring)):
   msg2 = rstring.split("emailfrom:")
   msg3 = msg2[1].split(":emailfrom")[0]
   rstring  = rstring.replace("emailfrom:"+msg3+":emailfrom","")
   emailfrom = msg3
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing emailfrom: :emailfrom, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing emailfrom: :emailfrom, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### emailcc  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
emailcc = ''
rstring = ireplace("EMAILCC", "emailcc", rstring)
while ((len(rstring.split("emailcc:"))>1) and (not toolong) and (":emailcc" in rstring)):
   msg2 = rstring.split("emailcc:")
   msg3 = msg2[1].split(":emailcc")[0]
   rstring  = rstring.replace("emailcc:"+msg3+":emailcc","")
   emailcc = msg3
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing emailcc: :emailcc, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing emailcc: :emailcc, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


#################################
##### parse regular options  ####
#################################

### print rstring w/o email to ooofile ####
blockdata = eoln+eoln+"Block Data Parsed::"+eoln
blockdata += rstring.strip()+eoln
blockdata += "::Block Data Parsed"+eoln+eoln
blockdata2 = eoln+eoln+"The following input was parsed."+eoln+eoln
blockdata2 += "Arrows::"+eoln
blockdata2 += rstring.strip()+eoln
blockdata2 += "::Arrows"+eoln+eoln

emailall = emailfrom.strip() + " " + emailcc.strip()
print("All emails= " + emailall)

### print blockdata to ooofile ####
printheader = (emailfrom!='') or (emailcc!='')
if (printheader):
   if (('arrows@emsl.pnl.gov' in emailall) or ('arrows@emsl.pnnl.gov' in emailall) or 
       ('arrow5@emsl.pnl.gov' in emailall) or ('arrow5@emsl.pnnl.gov' in emailall)):
      ooofile.write(blockdata)
      pppfile.write(blockdata)
   else:
      ooofile.write(blockdata2)
      pppfile.write(blockdata2)

ooofile.write("</pre>\n<pre style=\"font-size:1.0em;color:black\">\n")

### findreplace: old text | new text :findreplace  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("FINDREPLACE", "findreplace", rstring)
while ((len(rstring.split("findreplace:"))>1) and (not toolong) and (":findreplace" in rstring)):
   msg2 = rstring.split("findreplace:")
   msg3 = msg2[1].split(":findreplace")[0]
   rstring  = rstring.replace("findreplace:"+msg3+":findreplace","")
   ss = msg3.split("|")
   oldtext = ss[0]
   newtext = ss[1]
   rstring  = rstring.replace(oldtext,newtext)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing findreplace: :findreplace exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing findreplace: :findreplace exiting.\n")
   print("All requests to Arrows were successful.")




### look for useascii keyword ###
useascii = False
rstring = ireplace("USEASCII", "useascii", rstring)
if "useascii" in rstring: 
   useascii = True
   rstring = rstring.replace("useascii","")

### look for usesvg keyword ###
usesvg = False
rstring = ireplace("USESVG", "usesvg", rstring)
if "usesvg" in rstring: 
   usesvg = True
   rstring = rstring.replace("usesvg","")

### set how many entries to use ###
use_lowest_energy_esmiles = True
if ('useallentries' in rstring.lower()):
   use_lowest_energy_esmiles = False

### look for nomodelcorrect keyword ###
model_correct = True
rstring = ireplace("NOMODELCORRECT", "nomodelcorrect", rstring)
if "nomodelcorrect" in rstring: 
   model_correct = False
   rstring = rstring.replace("nomodelcorrect","")
   ooofile.write("chemdb_fetch_reactions: nomodelcorrect set - low frequency correction turned off\n")
   pppfile.write("chemdb_fetch_reactions: nomodelcorrect set - low frequency correction turned off\n")

### look for nosubmitmissingesmiles keyword ###
submitmissingesmiles2 = True
rstring = ireplace("NOSUBMITMISSINGESMILES", "nosubmitmissingesmiles", rstring)
if "nosubmitmissingesmiles" in rstring: 
   submitmissingesmiles2 = False
   rstring = rstring.replace("nosubmitmissingesmiles","")
submitmissingesmiles = submitmissingesmiles1 and submitmissingesmiles2
missingesmiles = False

### look for resubmitmissingesmiles keyword ###
submitmissingesmiles2 = False
rstring = ireplace("RESUBMITMISSINGESMILES", "resubmitmissingesmiles", rstring)
if "resubmitmissingesmiles" in rstring: 
   submitmissingesmiles2 = True
   rstring = rstring.replace("resubmitmissingesmiles","")
resubmitmissingesmiles = submitmissingesmiles1 and submitmissingesmiles2


### rotatebonds keyword ###
includerotation = False
rstring = ireplace("ROTATEBONDS", "rotatebonds", rstring)
if "rotatebonds" in rstring:
   includerotation = True
   rstring = rstring.replace("rotatebonds","")

### look for queuecheck keyword ###
queuecheck = False
rstring = ireplace("QUEUECHECK", "queuecheck", rstring)
if "queuecheck" in rstring:
   queuecheck = True
   rstring = rstring.replace("queuecheck","")

### look for listnwjobs keyword ###
listnwjobs = False
rstring = ireplace("LISTNWJOBS", "listnwjobs", rstring)
if "listnwjobs" in rstring:
   listnwjobs = True
   rstring = rstring.replace("listnwjobs","")

### look for listallesmiles keyword ###
listallesmilescount = ''
listallesmiles = False
rstring = ireplace("LISTALLESMILES", "listallesmiles", rstring)
if "listallesmiles" in rstring:
   listallesmiles = True
   tt = rstring.split("listallesmiles")[1].split()
   if (len(tt)>0):
      if tt[0].isdigit():
         listallesmilescount = tt[0]
   rstring = rstring.replace("listallesmiles","")


### look for listallreactions keyword ###
listallreactions = False
rstring = ireplace("LISTALLREACTIONS", "listallreactions", rstring)
if "listallreactions" in rstring:
   listallreactions = True


### name{}  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("NAME", "name", rstring)
while ((len(rstring.split("name{"))>1) and (not toolong) and ("}" in rstring)):
   msg2 = rstring.split("name{")
   msg3 = msg2[1].split("}")[0]
   ss = msg3.split()
   rmsg3 = ' name='
   for ll in range(len(ss)-1):
     rmsg3 += ss[ll] + "%20"
   rmsg3 += ss[len(ss)-1]
   rmsg3 += " "
   rstring  = rstring.replace("name{"+msg3+"}",rmsg3)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing name{}, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing name{}, exiting.\n")
   print("All requests to Arrows were successful.")


### xyzdata  ###
(rstring,success) = parse_xyzdata(rstring) 
if (not success):
   ooofile.write("chemdb_fetch_reactions: too long parsing xyzdata: :xyzdata, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing xyzdata: :xyzdata, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### submit nmrexp data  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("NMR_EXPERIMENT", "nmr_experiment", rstring)
while ((len(rstring.split("nmr_experiment:"))>1) and (not toolong) and (":nmr_experiment" in rstring)):
   msg2 = rstring.split("nmr_experiment:")
   xyz_nmr_data = msg2[1].split(":nmr_experiment")[0]
   rstring  = rstring.replace("nmr_experiment:" + xyz_nmr_data + ":nmr_experiment","")
   msg3 = add_nmrexp(hup,dbfile,nmr_experiments_table,xyz_nmr_data)
   ooofile.write(eoln + msg3 + eoln)
   pppfile.write(eoln + msg3 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parinsg submitxyz_nmrexp: :submitxyz_nmrexp\n")
   pppfile.write("chemdb_fetch_reactions: too long parinsg submitxyz_nmrexp: :submitxyz_nmrexp\n")
   print("All requests to Arrows were successful.")
   exit()


### submit heats of formation  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
submit_heat_formation = []
rstring = ireplace("SUBMITHF", "submithf", rstring)
while ((len(rstring.split("submithf:"))>1) and (not toolong) and (":submithf" in rstring)):
   msg2 = rstring.split("submithf:")
   msg3 = msg2[1].split(":submithf")[0]
   rstring  = rstring.replace("submithf:"+msg3+":submithf","")
   msg4 = parsetosmiles(msg3)
   submit_heat_formation.append(msg4)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parinsg submithf: :submithf\n")
   pppfile.write("chemdb_fetch_reactions: too long parinsg submithf: :submithf\n")
   print("All requests to Arrows were successful.")
   exit()


### submit esmiles  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
submitesmiles = []
rstring = ireplace("SUBMITESMILES", "submitesmiles", rstring)
while ((len(rstring.split("submitesmiles:"))>1) and (not toolong) and (":submitesmiles" in rstring)):
   msg2 = rstring.split("submitesmiles:")
   msg3 = msg2[1].split(":submitesmiles")[0]
   rstring  = rstring.replace("submitesmiles:"+msg3+":submitesmiles","")
   msg4 = addspaces_reaction(msg3.strip())
   esmiles = parsetosmiles(msg4)

   ### generate hindered rotor input ###
   if ("id=" in esmiles) and ("rbond{" in esmiles) and ("rgroup{" in esmiles) and ("calculation_type" not in esmiles):
      esmiles += " calculation_type{r}"
      tid = esmiles.split("id=")[1].split()[0]
      vvtag = "hrotorresubmitjob: "+tid+" :hrotorresubmitjob"
      if "hrotorreplacejob"  in esmiles: vvtag += " hrotorreplacejob"
      if "hrotorzero"  in esmiles:       vvtag += " hrotorzero"
      if "hrotorforce" in esmiles:       vvtag += " hrotorforce"
      if ("hrotoroverlapset:" in esmiles) and (":hrotoroverlapset" in esmiles):
         vvtag += " hrotoroverlapset:" + esmiles.split("hrotoroverlapset:")[1].split(":hrotoroverlapset")[0] + ":hrotoroverlapset"
      esmiles += " vtag{"+ vvtag + "}"

   submitesmiles.append(esmiles)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parinsg submitesmiles: :submitesmiles\n")
   pppfile.write("chemdb_fetch_reactions: too long parinsg submitesmiles: :submitesmiles\n")
   print("All requests to Arrows were successful.")
   exit()



### submit machines  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
submitmachines = []
rstring = ireplace("SUBMITMACHINES", "submitmachines", rstring)
while ((len(rstring.split("submitmachines:"))>1) and (not toolong) and (":submitmachines" in rstring)):
   msg2 = rstring.split("submitmachines:")
   msg3 = msg2[1].split(":submitmachines")[0]
   rstring  = rstring.replace("submitmachines:"+msg3+":submitmachines","")
   for m in msg3.split():
      submitmachines.append(m)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing submitmachines: :submitmachines, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing submitmachines: :submitmachines, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()
   

### print nwout files ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTNWOUT", "printnwout", rstring)
while ((len(rstring.split("printnwout:"))>1) and (not toolong) and (":printnwout" in rstring)):
   msg2 = rstring.split("printnwout:")
   msg3 = msg2[1].split(":printnwout")[0]
   rstring  = rstring.replace("printnwout:"+msg3+":printnwout","")
   tt = msg3.split()
   for t in tt:
      id = evalnum(t)
      msg4 = fetch_nwout(hup,dbfile,table,id)
      ooofile.write(eoln + msg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printnwout: :printnwout, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printnwout: :printnwout, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### nwoutput ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("NWOUTPUT", "nwoutput", rstring)
while ((len(rstring.split("nwoutput:"))>1) and (not toolong) and (":nwoutput" in rstring)):
   msg2 = rstring.split("nwoutput:")
   esmiles = msg2[1].split(":nwoutput")[0]
   rstring  = rstring.replace("nwoutput:"+esmiles+":nwoutput","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   rows = fetch_esmiles(hup,dbfile,table,esmiles,False)
   if (len(rows)<1):
      #msg4 = "No nwoutput data for esmiles = " + esmiles
      msg4 = "No nwoutput data for entered esmiles, bad esmiles? " 
   else:
      msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
      msg4 += "\n"
      msg4 += "Use printnwout: :printnwout option to print nwoutput for other entries.\n"
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      id = rows[0][0]
      msg4 = fetch_nwout(hup,dbfile,table,id)
   ooofile.write(eoln + msg4 + eoln)
   pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing nwoutput: :nwoutput, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing nwoutput: :nwoutput, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


### nwinput ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("NWINPUT", "nwinput", rstring)
print("RSTRING=",rstring)
while ((len(rstring.split("nwinput:"))>1) and (not toolong) and (":nwinput" in rstring)):
   msg2 = rstring.split("nwinput:")
   esmiles = msg2[1].split(":nwinput")[0]
   rstring  = rstring.replace("nwinput:"+esmiles+":nwinput","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   msg4 = "##################### start nwinput #######################\n"
   try:

      ### generate hindered rotor input ###
      if ("id=" in esmiles) and ("rbond{" in esmiles) and ("rgroup{" in esmiles) and ("calculation_type" not in esmiles):
         esmiles += " calculation_type{r}"
         tid = esmiles.split("id=")[1].split()[0]
         vvtag = "hrotorresubmitjob: "+tid+" :hrotorresubmitjob" 
         if "hrotorreplacejob"  in esmiles: vvtag += " hrotorreplacejob"
         if "hrotorzero"  in esmiles:       vvtag += " hrotorzero"
         if "hrotorforce" in esmiles:       vvtag += " hrotorforce"
         if ("hrotoroverlapset:" in esmiles) and (":hrotoroverlapset" in esmiles):
            vvtag += " hrotoroverlapset:" + esmiles.split("hrotoroverlapset:")[1].split(":hrotoroverlapset")[0] + ":hrotoroverlapset"
         esmiles += " vtag{"+ vvtag + "}"

      ### fetch the datafile ###
      datafile = fetch_esmiles_base_datafile(hup,dbfile,table,esmiles)
      esmiles1 = esmileswithid_to_esmiles(hup,dbfile,table,esmiles)
      esmiles1 = esmileswithname_to_esmiles(esmiles1.strip())
      if (datafile!=''):    esmiles1 += ' appendfile{' + datafile + '} '
      if (includerotation): esmiles1 += ' rotamer{true} '

      if (datafile=='') and (("ccsd(t)" in esmiles) or ("mp2" in esmiles) or ("qsharp_chem" in esmiles) or ("ccsd" in esmiles)):
         msg4 += "Base calculation not found: not submitting esmiles="+esmiles+"\n"
      else:
         
         #add orginal smiles string to vtag

         cmd0 = use_arrows_api(tnt_submit) + "-f"
         vtag = '"osmiles:'+ esmiles1.strip().split()[0].strip() + ':osmiles "'
         cmd0 += ' -v ' + vtag + ' '
         cmd0 +=  '"' + esmiles1.strip() + '"'
         print("cmd0=",cmd0)
         msg4 += subprocess.check_output(cmd0,shell=True).decode("utf-8")
   except:
      msg4 += "Error: not generating input deck for esmiles="+esmiles+"\n"

   msg4 += "##################### end nwinput   #######################\n"
   #ooofile.write("</pre><pre style=\"font-size:1.0em;color:red\">\n")
   #ooofile.write("</pre><pre style=\"font-size:1.0em;color:black\">\n")
   ooofile.write(eoln + msg4 + eoln)
   pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing nwinput: :nwinput, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing nwinput: :nwinput, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


### nwdatafile ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("NWDATAFILE", "nwdatafile", rstring)
print("RSTRING=",rstring)
while ((len(rstring.split("nwdatafile:"))>1) and (not toolong) and (":nwdatafile" in rstring)):
   msg2 = rstring.split("nwdatafile:")
   esmiles = msg2[1].split(":nwdatafile")[0]
   rstring  = rstring.replace("nwdatafile:"+esmiles+":nwdatafile","")
   msg4 =  "##################### start nwdatafile #######################\n"
   msg4 += cmd_nwdatafile(hup,dbfile,table,esmiles)
   msg4 += "##################### end nwdatafile   #######################\n"
   ooofile.write(eoln + msg4 + eoln)
   pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing nwdatafile: :nwdatafile, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing nwdatafile: :nwdatafile, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()




### print jobinfo ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTJOBINFO", "printjobinfo", rstring)
while ((len(rstring.split("printjobinfo:"))>1) and (not toolong) and (":printjobinfo" in rstring)):
   msg2 = rstring.split("printjobinfo:")
   msg3 = msg2[1].split(":printjobinfo")[0]
   rstring  = rstring.replace("printjobinfo:"+msg3+":printjobinfo","")
   tt = msg3.split()
   for t in tt:
      id = evalnum(t)
      msg4 = fetch_jobinfo(hup,dbfile,table,id)
      ooofile.write(eoln + msg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printjobinfo: :printjobinfo, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printjobinfo: :printjobinfo, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


### print xyz files ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTXYZ", "printxyz", rstring)
while ((len(rstring.split("printxyz:"))>1) and (not toolong) and (":printxyz" in rstring)):
   msg2 = rstring.split("printxyz:")
   msg3 = msg2[1].split(":printxyz")[0]
   rstring  = rstring.replace("printxyz:"+msg3+":printxyz","")
   tt = msg3.split()
   for t in tt: 
      id = evalnum(t)
      msg4 = fetch_xyz(hup,dbfile,table,id)
      ooofile.write(eoln + msg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printxyz: :printxyz, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printxyz: :printxyz, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


### xyz files ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("XYZFILE", "xyzfile", rstring)
while ((len(rstring.split("xyzfile:"))>1) and (not toolong) and (":xyzfile" in rstring)):
   msg2 = rstring.split("xyzfile:")
   esmiles = msg2[1].split(":xyzfile")[0]
   rstring  = rstring.replace("xyzfile:"+esmiles+":xyzfile","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   esmileslist = formula_to_reactions(hup,dbfile,abbrev_table,esmiles)
   for esmiles in esmileslist:
      rows = fetch_esmiles(hup,dbfile,table,esmiles,False)
      if (len(rows)<1):
         msg4 = "No xyz data for esmiles = " + esmiles
      else:
         msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
         for row in rows:
            id = row[0]
            msg4 += "%d " %id
         msg4 += "\n"
         msg4 += "Use printxyz: :printxyz option to print xyzfile for other entries.\n"
         if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
         id = rows[0][0]
         msg4 = fetch_xyz(hup,dbfile,table,id)
         ooofile.write(eoln + msg4 + eoln)
         pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing xyzfile: :xyzfile, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing xyzfile: :xyzfile, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### print mol files ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTMOL", "printmol", rstring)
while ((len(rstring.split("printmol:"))>1) and (not toolong) and (":printmol" in rstring)):
   msg2 = rstring.split("printmol:")
   msg3 = msg2[1].split(":printmol")[0]
   rstring  = rstring.replace("printmol:"+msg3+":printmol","")
   tt = msg3.split()
   for t in tt:
      id = evalnum(t)
      msg4 = fetch_mol(hup,dbfile,table,id)
      ooofile.write(eoln + msg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printmol: :printmol, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printmol: :printmol, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### mol files ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("MOLFILE", "molfile", rstring)
while ((len(rstring.split("molfile:"))>1) and (not toolong) and (":molfile" in rstring)):
   msg2 = rstring.split("molfile:")
   esmiles = msg2[1].split(":molfile")[0]
   rstring  = rstring.replace("molfile:"+esmiles+":molfile","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   esmileslist = formula_to_reactions(hup,dbfile,abbrev_table,esmiles)
   for esmiles in esmileslist:
      rows = fetch_esmiles(hup,dbfile,table,esmiles,False)
      if (len(rows)<1):
         msg4 = "No xyz data for esmiles = " + esmiles
      else:
         msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
         for row in rows:
            id = row[0]
            msg4 += "%d " %id
         msg4 += "\n"
         msg4 += "Use printmol: :printmol option to print molfile for other entries.\n"
         if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
         id = rows[0][0]
         msg4 = fetch_mol(hup,dbfile,table,id)
         ooofile.write(eoln + msg4 + eoln)
         pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing molfile: :molfile, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing molfile: :molfile, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### print eigenvalues ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTEIG", "printeig", rstring)
while ((len(rstring.split("printeig:"))>1) and (not toolong) and (":printeig" in rstring)):
   msg2 = rstring.split("printeig:")
   msg3 = msg2[1].split(":printeig")[0]
   rstring  = rstring.replace("printeig:"+msg3+":printeig","")
   tt = msg3.split()
   for t in tt: 
      id = evalnum(t)
      (msg4,hmsg4,iimagelist0) = fetch_eig(hup,dbfile,table,id)
      imagelist += iimagelist0
      ooofile.write(eoln + hmsg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printeig: :printeig, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printeig: :printeig, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("EIGENVALUES", "eigenvalues", rstring)
while ((len(rstring.split("eigenvalues:"))>1) and (not toolong) and (":eigenvalues" in rstring)):
   msg2 = rstring.split("eigenvalues:")
   msg3 = msg2[1].split(":eigenvalues")[0]
   rstring  = rstring.replace("eigenvalues:"+msg3+":eigenvalues","")
   rows = fetch_esmiles(hup,dbfile,table,msg3,False)
   if (len(rows)<1):
      pmsg4 = "No eigenvalue data for esmiles = " + msg3
      hmsg4 = "No eigenvalue data for esmiles = " + msg3
   else:
      msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
      msg4 += "\n"
      msg4 += "Use printfreq_id: :printfreq_id or alleigs: :alleigs options to print eigenvalues for other entries.\n"
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      id = rows[0][0]
      (pmsg0,hmsg0,iimagelist0) = fetch_eig(hup,dbfile,table,id)
      imagelist += iimagelist0
      pmsg4 = msg4 + pmsg0
      hmsg4 = msg4 + hmsg0
   ooofile.write(eoln + hmsg4 + eoln)
   pppfile.write(eoln + pmsg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing eigenvalues: :eigenvalues, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing eigenvalues: :eigenvalues, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


toolongcountmax = 200
toolongcount = 0
toolong      = False
rstring = ireplace("ALLEIGS", "alleigs", rstring)
while ((len(rstring.split("alleigs:"))>1) and (not toolong) and (":alleigs" in rstring)):
   msg2 = rstring.split("alleigs:")
   msg3 = msg2[1].split(":alleigs")[0]
   rstring  = rstring.replace("alleigs:"+msg3+":alleigs","")
   rows = fetch_esmiles(hup,dbfile,table,msg3,False)
   if (len(rows)<1): 
      pmsg4 = "No eigenvalue data for esmiles = " + msg3
      hmsg4 = "No eigenvalue data for esmiles = " + msg3
   else:
      msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
      msg4 += "\n"
      pmsg1 = ''
      hmsg1 = ''
      for row in rows:
         id = row[0]
         (pmsg0,hmsg0,iimagelist0) = fetch_eig(hup,dbfile,table,id)
         imagelist += iimagelist0
         pmsg1 += pmsg0
         hmsg1 += hmsg0
      pmsg4 = msg4 + pmsg1
      hmsg4 = msg4 + hmsg1
   ooofile.write(eoln + hmsg4 + eoln)
   pppfile.write(eoln + pmsg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing alleigs: :alleigs, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing alleigs: :alleigs, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()




### show frequency ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("SHOWFREQ", "showfreq", rstring)
while ((len(rstring.split("showfreq:"))>1) and (not toolong) and (":showfreq" in rstring)):
   msg2 = rstring.split("showfreq:")
   msg3 = msg2[1].split(":showfreq")[0]
   rstring  = rstring.replace("showfreq:"+msg3+":showfreq","")
   rbond  = ''
   rgroup = ''
   if "rbond:" in msg3:
      rbond = msg3.split("rbond:")[1].split(":rbond")[0]
      msg3  = msg3.replace("rbond:"+rbond+":rbond","")
   if "rgroup:" in msg3:
      rgroup = msg3.split("rgroup:")[1].split(":rgroup")[0]
      msg3   = msg3.replace("rgroup:"+rgroup+":rgroup","")
  
   tt = msg3.split()
   tid  = tt[0]
   fnum = tt[1]
   if (rbond!='') and (rgroup!=''):
      cmd1 = use_arrows_api(chemdb_freq0) + "-b \""+rbond+"\" -g \""+rgroup+"\" "+ tid + " " + fnum
   else:
      cmd1 = use_arrows_api(chemdb_freq0) + tid + " " + fnum
   print("showfreq cmd1 = " + cmd1)
   try:
      msg4 = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   except:
      msg4 = "frequency analysis failed for id = "+ id
   if usehtml5:
      xyzdat = msg4.split("################## begin xyz movie #######################")[1]
      xyzdat = xyzdat.split("################## end xyz movie   #######################")[0].strip()
      msg5 = msg4.split("################## begin xyz movie #######################")[0]
      msg6 = msg5.strip().split("\n")[-1] + "\n"
      if ('a1=' in msg5):
         msg6 += xyzdat2jsmol("0xDA92F3",xyzdat,msg5)
      else:
         msg6 += xyzdat2jsmol("0xDA92F3",xyzdat)
      msg6 += msg5
      msg6 += msg4.split("################## end xyz movie   #######################")[1]
      ooofile.write(eoln+msg6+eoln)
   else:
      ooofile.write(eoln+msg4+eoln)
   pppfile.write(eoln+msg4+eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing showfreq: :showfreq, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing showfreq: :showfreq, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()





### print frequencies ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTFREQ", "printfreq", rstring)
while ((len(rstring.split("printfreq:"))>1) and (not toolong) and (":printfreq" in rstring)):
   msg2 = rstring.split("printfreq:")
   msg3 = msg2[1].split(":printfreq")[0]
   rstring  = rstring.replace("printfreq:"+msg3+":printfreq","")
   tt = msg3.split()
   for id in tt:
      cmd1 = use_arrows_api(chemdb_freq) + id + " 2"
      print("printfreq cmd1 = " + cmd1)
      try:
         msg4 = subprocess.check_output(cmd1,shell=True).decode("utf-8")
      except:
         msg4 = "frequency analysis failed for id = "+ id
      ooofile.write(eoln+msg4+eoln)
      pppfile.write(eoln+msg4+eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printfreq: :printfreq, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printfreq: :printfreq, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### frequencies ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("FREQUENCIES", "frequencies", rstring)
while ((len(rstring.split("frequencies:"))>1) and (not toolong) and (":frequencies" in rstring)):
   msg2 = rstring.split("frequencies:")
   msg3 = msg2[1].split(":frequencies")[0]
   rstring  = rstring.replace("frequencies:"+msg3+":frequencies","")
   rows = fetch_esmiles(hup,dbfile,table,msg3,False)
   if (len(rows)<1):
      msg4 = "No frequency data for esmiles = " + msg3
   else:
      msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
      msg4 += "\n"
      msg4 += "Use printfreq: :printfreq or allfreqs: :allfreqs options to print frequencies for other entries.\n"
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      id = rows[0][0]
      cmd1 = use_arrows_api(chemdb_freq) + " %d 2" % id
      print("frequencies cmd1 = " + cmd1)
      try:
         msg4 += subprocess.check_output(cmd1,shell=True).decode("utf-8")
      except:
         msg4 += "frequency analysis failed for id = "+ id
   ooofile.write(eoln + msg4 + eoln)
   pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing frequencies: :frequencies, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing frequencies: :frequencies, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### allfreqs ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("ALLFREQS", "allfreqs", rstring)
while ((len(rstring.split("allfreqs:"))>1) and (not toolong) and (":allfreqs" in rstring)):
   msg2 = rstring.split("allfreqs:")
   msg3 = msg2[1].split(":allfreqs")[0]
   rstring  = rstring.replace("allfreqs:"+msg3+":allfreqs","")
   rows = fetch_esmiles(hup,dbfile,table,msg3,False)
   if (len(rows)<1):
      msg4 = "No frequency data for esmiles = " + msg3
   else:
      msg4 = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
      msg4 += "\n"
      for row in rows:
         id = row[0]
         cmd1 = use_arrows_api(chemdb_freq) + " %d 2" % id
         print("allfreqs cmd1 = " + cmd1)
         try:
            msg4 += subprocess.check_output(cmd1,shell=True).decode("utf-8")
         except:
            msg4 += "frequency analysis failed for id = "+ id
   ooofile.write(eoln + msg4 + eoln)
   pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing frequencies: :frequencies, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing frequencies: :frequencies, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### print csv ###
toolongcountmax = 20
toolongcount = 0
toolong      = False
rstring = ireplace("PRINTCSV", "printcsv", rstring)
while ((len(rstring.split("printcsv:"))>1) and (not toolong) and (":printcsv" in rstring)):
   msg2 = rstring.split("printcsv:")
   msg3 = msg2[1].split(":printcsv")[0]
   rstring  = rstring.replace("printcsv:"+msg3+":printcsv","")
   msg3 = ireplace("COLUMN_TAGS","column_tags", msg3)
   if "column_tags{" in msg3:
      msg4 = msg3.split("column_tags{")[1].split("}")[0]
      msg3 = msg3.replace("column_tags{"+msg4+"}","")
      msg4 = msg4.rstrip(",")
      cc = msg4.split(",")
      columns_list = []
      for c in cc: columns_list.append(c.strip())
   else:
      columns_list = ['id','esmiles']
   msg3 = msg3.strip()
   msg3 = msg3.strip(",")
   ee = msg3.split(",")
   esmiles_list = []
   for e in ee: esmiles_list.append(e.strip())
   msg5 = fetch_csv_esmiles_full(hup,dbfile,table,columns_list,esmiles_list)
   ooofile.write(eoln + msg5 + eoln)
   pppfile.write(eoln + msg5 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing printcsv: :printcsv, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing printcsv: :printcsv, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### pushnwjob ###
toolongcountmax = 100
toolongcount = 0
toolong      = False
pushnwjob = []
rstring = ireplace("PUSHNWJOB", "pushnwjob", rstring)
while ((len(rstring.split("pushnwjob:"))>1) and (not toolong) and (":pushnwjob" in rstring)):
   msg2 = rstring.split("pushnwjob:")
   msg3 = msg2[1].split(":pushnwjob")[0]
   rstring  = rstring.replace("pushnwjob:"+msg3+":pushnwjob","")
   pushnwjob.append(msg3)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
   print("toolong=",toolong,toolongcount)
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing pushnwjob: :pushnwjob, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing pushnwjob: :pushnwjob, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


### find fetchnwjob ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("FETCHNWJOB", "fetchnwjob", rstring)
fetchnwjob = []
while ((len(rstring.split("fetchnwjob:"))>1) and (not toolong) and (":fetchnwjob" in rstring)):
   msg2 = rstring.split("fetchnwjob:")
   msg3 = msg2[1].split(":fetchnwjob")[0]
   rstring  = rstring.replace("fetchnwjob:"+msg3+":fetchnwjob","")
   tt = msg3.split()
   for t in tt: fetchnwjob.append(evalnum(t))
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing fetchnwjob: :fetchnwjob, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing fetchnwjob: :fetchnwjob, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()



### find badids ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("BADIDS", "badids", rstring)
badids = []
while ((len(rstring.split("badids:"))>1) and (not toolong) and (":badids" in rstring)):
   msg2 = rstring.split("badids:")
   msg3 = msg2[1].split(":badids")[0]
   rstring  = rstring.replace("badids:"+msg3+":badids","")
   tt = msg3.split()
   for t in tt: badids.append(evalnum(t))
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing badids: :badids, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing badids: :badids, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

###  reactionpath ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("REACTIONPATH", "reactionpath", rstring)
while ((len(rstring.split("reactionpath:"))>1) and (not toolong) and (":reactionpath" in rstring)):
   pmsg4 = ''
   hmsg4 = ''
   msg2 = rstring.split("reactionpath:")
   esmiles = msg2[1].split(":reactionpath")[0]
   rstring = rstring.replace("reactionpath:"+esmiles+":reactionpath","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   esmiles = cleanxyzdata(esmiles)
   print("REACTIONPATH ESMILES=",esmiles)
   if "gamma{" in esmiles:
      msg2 = esmiles.split("gamma{")
      gamma = msg2[1].split("}")[0]
      esmiles = esmiles.replace("gamma{"+gamma+"}","")
      if ("~" in esmiles):
         rxn  = esmiles.split("~")[0].strip()
         opts = esmiles.split("~")[1].strip()
      else:
         rxn  = esmiles
         opts = ''
      reacts = esmiles.split("-->")[0]
      rmols  = reacts.split("+")
      mycharge = 0
      myndiff  = 0
      ttt = ''
      for rmol in rmols:
         try:
            x = int(rmol.split(None,1)[0])
            m = rmol.split(None,1)[1]
         except:
            x = 1
            m = rmol
         m=esmileswithname_to_esmiles(m)
         smiles = clean_smiles(m.split()[0])
         charge = smiles2charge(smiles)
         if '^{' in m:      charge = evalnum(m.split('^{')[1].split('}')[0].strip())
         mult = esmiles2mult_set(smiles,charge,m)
         #mult   = smiles2mult(smiles,charge)
         #if 'mult{' in m:   mult   = evalnum(m.split('mult{')[1].split('}')[0].strip())
         mycharge += x*charge
         myndiff += x*(mult-1)
         for i in range(x):
            ttt += m.strip() + '.'
      mymult = myndiff + 1
      ttt = ttt.rstrip('.')
      ttt += " " + opts
      if (mycharge!=0) and ('^{' not in ttt): 
         ttt += " ^{%d}" % mycharge
      if (mymult>1) and ('mult{' not in ttt): 
         ttt += " mult{%d}" % mymult
      ttt += " reaction_genhash{"+rxn+"} reaction_gamma{"+gamma+"} "
      rstring += "molecule: " + ttt + " :molecule" + eoln
      print("TTTTMOLECULE = ",ttt)
   else:
      autokcal= 627.509469
      autokj  = 2625.49962
      tempfac = 298.15/1000.0
      msg4  = eoln+eoln+eoln
      msg4 += "+==================================================+" + eoln
      msg4 += "||               Reaction Path                    ||" + eoln
      msg4 += "+==================================================+" + eoln + eoln
      if ("~" in esmiles):
         rxn  = esmiles.split("~")[0].strip()
         opts = esmiles.split("~")[1].strip()
      else:
         rxn  = esmiles
         opts = ''
      reacts = rxn.split("-->")[0]
      prodcs = rxn.split("-->")[1]
      renergies = [0.0]*6
      rcharge = 0
      rndiff = 0
      badreactants = False
      rmols  = reacts.split("+")
      for rmol in rmols:
         try:
            x = int(rmol.split(None,1)[0])
            m = rmol.split(None,1)[1]
         except:
            x = 1
            m = rmol
         rsmiles = m + " " + opts
         print("rsmiles=",rsmiles)
         rows = fetch_esmiles(hup,dbfile,table,rsmiles,False)
         rows = lowest_energy_esmiles(rows)
         if (len(rows)==0):
            badreactants = True
         else:
            row = rows[0]
            rcharge += x*(row[12])
            rndiff  += x*(row[13] - 1)
            espring = 0.0
            energy = row[14]-espring
            enthalpy = energy+row[15]
            free_energy = enthalpy - tempfac*row[16]/autokcal
            solv = 0.0
            if (row[17]=='COSMO'):       solv = -row[18] + row[19]
            if ('COSMO-SMD' in row[17]): solv =  row[18]
            solv = solv/autokcal
            aq_free_energy = free_energy + solv
            renergies[0] += x*espring
            renergies[1] += x*energy
            renergies[2] += x*enthalpy
            renergies[3] += x*free_energy
            renergies[4] += x*solv
            renergies[5] += x*aq_free_energy

      penergies = [0.0]*6
      pcharge = 0
      pndiff = 0
      badproducts = False
      pmols  = prodcs.split("+")
      for pmol in pmols:
         try:
            x = int(pmol.split(None,1)[0])
            m = pmol.split(None,1)[1]
         except:
            x = 1
            m = pmol
         psmiles = m + " " + opts
         print("psmiles=",psmiles)
         rows = fetch_esmiles(hup,dbfile,table,psmiles,False)
         rows = lowest_energy_esmiles(rows)
         if (len(rows)==0):
            badproducts = True
         else:
            row = rows[0]
            pcharge += x*row[12]
            pndiff  += x*(row[13] - 1)
            espring = 0.0
            energy = row[14]-espring
            enthalpy = energy+row[15]
            free_energy = enthalpy - tempfac*row[16]/autokcal
            solv = 0.0
            if (row[17]=='COSMO'):       solv = -row[18] + row[19]
            if ('COSMO-SMD' in row[17]): solv =  row[18]
            solv = solv/autokcal
            aq_free_energy = free_energy + solv
            penergies[0] += x*espring
            penergies[1] += x*energy
            penergies[2] += x*enthalpy
            penergies[3] += x*free_energy
            penergies[4] += x*solv
            penergies[5] += x*aq_free_energy

      if (not badreactants):
         charge = int(rcharge)
      elif (not badproducts):
         charge = int(pcharge)
      else:
         charge = 0

      if   (badreactants) and (not badproducts):
         mult = int(pndiff) + 1
      elif (not badreactants) and (badproducts):
         mult = int(rndiff) + 1
      elif rndiff >= pndiff:
         mult = int(rndiff) + 1
      else:
         mult = int(pndiff) + 1

      rmols  = reacts.split("+")
      ttt = ''
      for rmol in rmols:
         try:
            x = int(rmol.split(None,1)[0])
            m = rmol.split(None,1)[1]
         except:
            x = 1
            m = rmol
         m=esmileswithname_to_esmiles(m)
         for i in range(x):
            ttt += m.strip() + '.'
      ttt = ttt.rstrip('.')
      ttt += " " + opts
      if (charge!=0) and ('^{' not in ttt): 
         ttt += " ^{%d}" % charge
      if (mult>1) and ('mult{' not in ttt): 
         ttt += " mult{%d}" % mult
      ttt += " reaction_genhash{"+rxn+"} "
      rows  = fetch_reactionpathesmiles(hup,dbfile,table,ttt) 
      row64 = rows[0][64]
      energies = []
      fspring = 0.0
      for row in rows:
          fspring  = 2.0*row[67]*(row[55]-row[69])
          espring = row[67]*(row[55]-row[69])**2
          energy = row[14]-espring
          enthalpy = energy+row[15]
          free_energy = enthalpy - tempfac*row[16]/autokcal
          solv = 0.0
          if (row[17]=='COSMO'):       solv = -row[18] + row[19]
          if ('COSMO-SMD' in row[17]): solv =  row[18]
          solv = solv/autokcal
          aq_free_energy = free_energy + solv
          #link3 = 'https://arrows.emsl.pnnl.gov/api/molecule/' + 'id=%d' % row[0]
          link3 = ARROWS_API_HOME + 'molecule/' + 'id=%d' % row[0]
          ref3 = "<a target=\"_blank\" href=\"" + link3 + "\">%d</a>" % row[0]
          energies.append((row[55],row[67],row[69],fspring,espring,energy,enthalpy,free_energy,solv,aq_free_energy,ref3,row[23]))
      ### bubble sort ###
      n = len(energies)
      for i in range(n):
         for j in range(n-i-1):
            if (energies[j][0]>energies[j+1][0]):
               energies[j], energies[j+1] = energies[j+1], energies[j]



      xyzdat = ''
      msg4 += "Table values in atomic units\n\n"
      msg4 += "  Gamma  Kappa  Gamma0        Fspring        Espring      Erxn(gas)      Hrxn(gas)      Grxn(gas)      Solvation       Grxn(aq)   Id" + eoln
      #print("renergies=",len(renergies),renergies)
      if (not badreactants): msg4 += "reactants              %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f\n" % (0.0,renergies[0],renergies[1],renergies[2],renergies[3],renergies[4],renergies[5])
      for ee in energies:
         msg4 += "%7.3f %6.3f %7.3f %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f   %s\n" % ee[:11]
         xyzdat += ee[11]
      if (not badproducts): msg4 += "products               %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f %14.6f\n" % (0.0,penergies[0],penergies[1],penergies[2],penergies[3],penergies[4],penergies[5])
      msg4 += eoln + eoln
      #msg4 += "xyzdat="+eoln+xyzdat+eoln+eoln
      hmsg4 += msg4
      pmsg4 += msg4

      #### plot the reaction pathway energies ####
      plotxydata = ""
      if (not badreactants): 
         plotxydata += "#Title Reaction Pathway Energies\n"
         plotxydata += "#Labels Gamma Erxn(gas) Hrxn(gas) Grxn(gas) Grxn(aq)\n"
         plotxydata += "#Xlabel Gamma (reaction coordinate)\n"
         plotxydata += "#Ylabel Reaction Energies (kcal/mol)\n"
         for ee in energies:
            etmp = (ee[2],autokcal*(ee[5]-renergies[1]),autokcal*(ee[6]-renergies[2]),autokcal*(ee[7]-renergies[3]),autokcal*(ee[9]-renergies[5]))
            plotxydata += "%6.3f %14.6f %14.6f %14.6f %14.6f\n" % etmp

         with open(wrkdir+"/"+tmperxn,'w') as erxnfile:
            for ee in energies:
               etmp = (ee[2],autokj*(ee[5]-renergies[1]),autokj*(ee[6]-renergies[2]),autokj*(ee[7]-renergies[3]),autokj*(ee[9]-renergies[5]))
               erxnfile.write("%6.3f %14.6f %14.6f %14.6f %14.6f\n" % etmp)

         erxngnuplot  = wrkdir + "/pathrxn-%d.gnuplot" % ddrand
         erxndumb  = wrkdir + "/pathrxn-%d.dumb" % ddrand
         eedatafile = wrkdir+"/"+ tmperxn
         erxn = 'set output \"%s\"; set term dumb; set title \"Reaction Pathway Energies (kj/mol)\"; set xlabel \"Gamma (reaction coordinate)\";  plot \"%s\" using 1:2 with lp pointtype 5 title \"Erxn(gas)\", \"%s\" using 1:3 with lp pointtype 8 title \"Hrxn(gas)\",\"%s\" using 1:4 with lp pointtype 7 title \"Grxn(gas)\",\"%s\" using 1:5 with lp pointtype 19 title \"Grxn(aq)\" ' % (erxndumb,eedatafile,eedatafile,eedatafile,eedatafile)

         with open(erxngnuplot,'w')  as f: f.write(erxn+eoln)
         os.system(gnuplot + erxngnuplot)
         with open(erxndumb,'r')  as f: msg = f.read(); pppfile.write(msg)
         if (useascii):
            hmsg4 += "</pre>\n"
            hmsg4 += "<pre style=\"font-size:1.0em;color:blue\">\n"
            with open(erxndumb,'r')  as f: msg = f.read(); hmsg4 += msg
            hmsg4 += "</pre>\n"
            hmsg4 += "<pre style=\"font-size:1.0em;color:black\">\n"
         try:
            os.unlink(erxngnuplot)
            os.unlink(erxndumb)
         except:
            print("Failed to delete temporary gnuplot files")

         ### PNG gnuplotting ####
         if (not useascii):
            erxngnuplot = wrkdir + "/pathrxn-%d.gnuplot" % ddrand
            erxnpng     = wrkdir + "/pathrxn-%d.png" % ddrand
            eedatafile  = wrkdir+"/"+ tmperxn
            erxn = 'set output \"%s\"; set term png; set grid; set title \"Reaction Pathway Energies\"; set xlabel \"Gamma (reaction coordinate)\"; set ylabel \"reaction energies (kj/mol)\";  plot \"%s\" using 1:2 with lp pointtype 5 lw 2 title \"Erxn(gas)\", \"%s\" using 1:3 with lp pointtype 8 lw 2 title \"Hrxn(gas)\",\"%s\" using 1:4 with lp pointtype 7 lw 2 title \"Grxn(gas)\",\"%s\" using 1:5 with lp pointtype 19 lw 2 title \"Grxn(aq)\" ' % (erxnpng,eedatafile,eedatafile,eedatafile,eedatafile)

            with open(erxngnuplot,'w')  as f: f.write(erxn+eoln)
            os.system(gnuplot + erxngnuplot)
            try:
               os.unlink(erxngnuplot)
            except:
               print("Failed to delete temporary gnuplot files")

            hmsg4   += "</pre>\n"
            pngname  = "image-%d-%d" % (ddrand,imagecount)
            imagelist.append((erxnpng,pngname))
            imagecount += 1
            #hmsg4 += '<br><center><img src="cid:%s" align="middle"></center><br>' % pngname
            hmsg4 += '<br><img src="cid:%s" align="middle">' % pngname
            hmsg4 += "<pre style=\"font-size:1.0em;color:black\">"



      if (usehtml5):
         hmsg4 += xyzdat2jsmol("0x3BBC52",xyzdat,row64)
         if (plotxydata!=''):
            hmsg4 +=  xydata_plotdatajs(plotxydata,"XY plot","rchart")

      rstring += "reaction: " + esmiles+ " :reaction" + eoln
      msg5  = ''
      msg5 += "+==================================================+" + eoln
      msg5 += "||               Reaction Energies                ||" + eoln
      msg5 += "+==================================================+" + eoln 
      hmsg4 += msg5
      pmsg4 += msg5

   ooofile.write(hmsg4)
   pppfile.write(pmsg4)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing reactionpath: :reactionpath, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing reactionpath: :reactionpath, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


   

###  molecule  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("MOLECULE", "molecule", rstring)
while ((len(rstring.split("molecule:"))>1) and (not toolong) and (":molecule" in rstring)):
   msg2 = rstring.split("molecule:")
   esmiles = msg2[1].split(":molecule")[0]
   rstring = rstring.replace("molecule:"+esmiles+":molecule","")
   if "rkegg=" in esmiles.lower():
      esmileslist = []
      rstring += eoln
      rstring += "reaction: " + esmiles + " :reaction" + eoln
   else:
      esmiles = addspaces_reaction(esmiles.strip())
      esmiles = parsetosmiles(esmiles)
      esmileslist = formula_to_reactions1(hup,dbfile,abbrev_table,esmiles)

      esmiles1=esmileswithname_to_esmiles(esmiles.strip())
      if ((('.' in esmiles.split()[0]) or (" + " in esmiles)) and ("gamma" not in esmiles.lower()) and ("xyzdata{" not in esmiles.lower())):
         esmileslist = []
         options = ""
         if ('.' in esmiles.split()[0]) and (len(esmiles.split())>1):
            options = esmiles.split()[1]
            esmiles = esmiles.split()[0]
         rstring += eoln
         tstring = "reaction: --> " 
         all_es = [f for a in esmiles.split(" + ") for f in a.split(".")]
         for es in all_es: 
            tstring += es 
            if (options!=""): tstring += " " + options + " "
            tstring +=  " + " 
         tstring = tstring.rstrip(" + ")
         tstring += " :reaction" + eoln
         rstring += tstring
      elif ((('.' in esmiles1.split()[0]) or (" + " in esmiles1)) and ("gamma" not in esmiles1.lower()) and ("xyzdata{" not in esmiles.lower())):
         esmileslist = []
         options = ""
         if ('.' in esmiles1.split()[0]) and (len(esmiles1.split())>1):
            options = esmiles1.split()[1]
            esmiles1 = esmiles1.split()[0]
         rstring += eoln
         tstring = "reaction: --> " 
         all_es = [f for a in esmiles1.split(" + ") for f in a.split(".")]
         for es in all_es: 
            tstring += es 
            if (options!=""): tstring += " " + options + " "
            tstring +=  " + " 
         tstring = tstring.rstrip(" + ")
         tstring += " :reaction" + eoln
         rstring += tstring


   for esmiles in esmileslist:
      text2speech_Threading("A molecular calculation requested for " + esmiles)
      rows = fetch_esmiles(hup,dbfile,table,esmiles,False)
      if (len(rows)<1):
         msg4 = "No molecule data for esmiles = " + esmiles + eoln
         missingesmiles = True
         if (submitmissingesmiles):
            rows1 = fetch_esmiles(hup,dbfile,requests_table,esmiles,False)
            rows  = fetch_esmiles(hup,dbfile,table,esmiles) #adding to request table
            if ((len(rows1)==0) or (resubmitmissingesmiles)):
               msg4 += " - molecule not found : " + esmiles + " scheduled to be submitted." + eoln
               submitesmiles.append(esmiles)
            else:
               msg4 += " - molecule not found : " + esmiles + " has already been scheduled to be submitted." + eoln
         else:
            msg4 += " - molecule not found : " + esmiles + eoln
         pmsg4 = msg4
         hmsg4 = msg4
         if (usehtml5):
            hmsg4 += "</pre>\n<pre style=\"font-size:1.5em;color:blue\">\n"
            hmsg4 += "Unoptimized Structure - esmiles = " + esmiles + "\n"
            msg  = esmiles2xyzdat(esmiles,wrkdir+"/"+tmpxyz1)
            with open(wrkdir+"/"+ tmpxyz1,'r') as ff:
               xxdat = ff.read()
            hmsg4 += xyzdat2jsmol("0xA8C4E1",xxdat)
            hmsg4 +="</pre>\n<pre style=\"font-size:1.0em;color:black\">\n"
            hmsg4 +=msg
      else:
         msg4  = "The id(s) for emsiles = %s are: " % rows[0][6]
         for row in rows:
            id = row[0]
            msg4 += "%d " %id
         msg4 += "\n"
         msg4 += "Use id=% instead of esmiles to print other entries.\n"
         if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
         pmsg4 = msg4
         hmsg4 = msg4
         for row in rows:
            id = row[0]
            msg5 = eoln
            msg5 += "mformula     = " + row[2] + eoln
            msg5 += "iupac        = " + row[1] + eoln
            if (row[31] is not None): 
               if (row[31]!='0'): 
                  link = "https://pubchem.ncbi.nlm.nih.gov/compound/"+row[31].strip()
                  dnname = "<a target=\"_blank\" href=\"" + link + "\">" + row[31].strip() + "</a>"
                  msg5 +=  "PubChem      = " + dnname + eoln
                  link = "https://pubchem.ncbi.nlm.nih.gov/compound/"+row[31].strip()+"#datasheet=lcss"
                  dnname = "<a target=\"_blank\" href=\"" + link + "\">" + row[31].strip() + "</a>"
                  msg5 +=  "PubChem LCSS = " + dnname + eoln
            if (row[32] is not None):
               if (row[32]!=''):  
                  msg5 += "cas          = " + row[32] + eoln
            if (row[33] is not None):
               if (row[33]!=''):
                  msg5 += "kegg         =" 
                  for kegg in row[33].strip().split():
                     if "D" in kegg:
                        link = "http://www.genome.jp/dbget-bin/www_bget?dr:"+kegg
                     elif "C" in kegg:
                       link = "http://www.genome.jp/dbget-bin/www_bget?cpd:"+kegg
                     msg5 += " <a target=\"_blank\" href=\"" + link + "\">" + kegg + "</a>"
                  msg5 += eoln
            if (row[30] is not None):
               if (row[30]!=''):  
                  msg5 += "synonyms     = " + row[30].replace('\n','; ').rstrip(";") + eoln

            msg5 += eoln + "Search Links to Other Online Resources (may not be available):" + eoln
            if (row[29] is not None):
               encodedkey = urllib.parse.urlencode({'':row[29]})
               link = "https://www.google.com/search?q=%22"+ row[29] + "%22&cad=h"
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"Google Structure Search" + "</a>"
               msg5 +=  dnname + eoln
               link = "https://comptox.epa.gov/dashboard/dsstoxdb/results?search="+row[29].strip()
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"EPA CompTox Database" + "</a>"
               msg5 +=  dnname + eoln
               link = "http://www.ebi.ac.uk/chebi/searchFreeText.do?searchString=" + row[29]
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"Chemical Entities of Biological Interest (ChEBI)" + "</a>"
               msg5 +=  dnname + eoln


            if (row[32] is not None):
               link = "https://chem.nlm.nih.gov/chemidplus/rn/" + row[32]
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"NIH ChemIDplus - A TOXNET DATABASE" + "</a>"
               msg5 +=  dnname + eoln

               link = "http://www.hmdb.ca/unearth/q?query=%22" + row[32] + "%22&searcher=metabolites"
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"The Human Metabolome Database (HMDB)" + "</a>"
               msg5 +=  dnname + eoln
               link = "https://www.echemportal.org/echemportal/substancesearch/substancesearch_execute.action?numberType=CAS&number="+row[32]+"&allParticipants=true"
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"OECD eChemPortal" + "</a>"
               msg5 +=  dnname + eoln
               link = "https://scholar.google.com/scholar?hl=en&q=%22" + row[32] + "%22%20OR%20%22" + row[1] + "%22"
               dnname = " - <a target=\"_blank\" href=\"" + link + "\">" +"Google Scholar" + "</a>"
               msg5 +=  dnname + eoln

            ### turn off vcclab.org ###
            if False and (row[4] is not None):
               encodedsmiles = urllib.parse.urlencode({'':row[4]})
               link = "http://www.vcclab.org/web/alogps/calc?SMILES"+encodedsmiles
               msg5 += eoln
               msg5 += "<a target=\"_blank\" href=\"" + link + "\">" + "VCCL" + "</a>         = "
               try:
                  rdata0  = geturlresult(link)
                  msg5 += "logP="+rdata0.split()[4]
                  msg5 += " logS="+rdata0.split()[5]
                  msg5 += eoln
               except:
                  msg5 += eoln


            msg5 += eoln+eoln+eoln
            msg5 += "+==================================================+" + eoln
            msg5 += "||              Molecular Calculation             ||" + eoln
            msg5 += "+==================================================+" + eoln + eoln
            msg5 += "Id     = %d\n\n" % (id)
            msg5 += "NWOutput = %s %s\n\n" % (nwoutputfromid(id),nwoutputfromid_download(id))
            if row[60] is not None:
               msg5 += "Datafiles:\n"
               for nn in row[60].split(): 
                  if isinstance(nn,bytes): nn = nn.decode("utf-8")
                  nname = nn.split('/')[-1]
                  ss = "id=%d " % id
                  ss += nname
                  #link = "https://arrows.emsl.pnnl.gov/api/nwdatafile/%22" + ss + "%22"
                  link = ARROWS_API_HOME + "nwdatafile/%22" + ss + "%22"
                  dnname = "<a target=\"_blank\" href=\"" + link + "\">" + nname + "</a>"
                  #link2 = "https://arrows.emsl.pnnl.gov/api/nwdatafile_download/%22" + ss + "%22"
                  link2 = ARROWS_API_HOME + "nwdatafile_download/%22" + ss + "%22"
                  dnname2 = "<a href=\"" + link2 + "\">(download)</a>"
                  msg5 += "%s %s\n" % (dnname,dnname2)
               msg5 += "\n"
            msg5 += imageresetfromid(id) + "\n\n"
            if row[41] is not None: msg5 += "Calculation performed by %s\n"   % row[41]
            if row[42] is not None: msg5 += "Numbers of cpus used for calculation = %d\n" % row[42]
            if (row[43] is not None) and (isinstance(row[43],float)):
               tdays    = int(row[43]/(24*60*60))
               thours   = int((row[43]-tdays*24*60*60)/(60*60))
               tminutes = int((row[43]-tdays*24*60*60-thours*60*60)/(60))
               tseconds = int((row[43]-tdays*24*60*60-thours*60*60-tminutes*60))
               msg5 += "Calculation walltime = %f seconds (%d days %d hours %d minutes %d seconds)\n\n\n" % (row[43],tdays,thours,tminutes,tseconds)
            msg5 += write_energetic_data(row)
            msg5 += "+-----------------+" + eoln
            msg5 += "| Structural Data |" + eoln
            msg5 += "+-----------------+" + eoln
            if (usehtml5):
               #msg5 += xyzdat2glmol(row[23])
               row23 = row[23]
               row60 = row[60]
               row64 = row[64]
               if isinstance(row23,bytes): row23 = row23.decode("utf-8")
               if isinstance(row60,bytes): row60 = row60.decode("utf-8")
               if isinstance(row64,bytes): row64 = row64.decode("utf-8")
               if (row[60] is not None) and ("mo_orbital_" in row60) and (os.path.isfile(row60)):
                  try:
                     msg5 += nwout2jsmol("0x3BBC52",row[60],row[23])
                     #msg5 += xyzdat2jsmol("0x3BBC52",row23,row64)
                  except:
                     msg5 += xyzdat2jsmol("0x3BBC52",row23,row64)
                     theory = row[9]
                     if (theory=="dft" or theory=="hf" or theory=="uhf"):
                        resubmit_homolumo_Background(id)
               else:
                  msg5 += xyzdat2jsmol("0x3BBC52",row23,row64)
                  theory = row[9]
                  if (theory=="dft" or theory=="hf" or theory=="uhf"):
                     resubmit_homolumo_Background(id)

            elif (not useascii):
               pngfilename = wrkdir + "/%d-large.png" % (id)
               pngname     = "image-%d-large-%d" % (id,imagecount)
               imagecount += 1
               imagelist.append((pngfilename,pngname))
               cmd9 = chemdb_image0 + "-b %d" % id
               try:
                  result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
                  imagelist.append((pngfilename,pngname))
                  msg5 += "</pre>\n"
                  msg5 += '<br><center><img src="cid:%s"></center><br>\n' % pngname
                  msg5 += "<pre style=\"font-size:1.0em;color:black\">\n"
               except:
                  msg5 = "\n\nchemdb_image0 failed for id=%d\n" % id
            msg5 += print_xyzdat_bond_angle_torsion(row[23])

            msg6 = ''
            if row[53] is not None: 
               msg6 += eoln
               msg6 += "+---------------+" + eoln
               msg6 += "| Reaction Data |" + eoln
               msg6 += "+---------------+" + eoln + eoln
               msg6 += "reaction_hash     = "+row[53]+eoln
               msg6 += "reaction_type     = "+row[54]+eoln
               msg6 += "reaction_indexes  = " + row[68] + eoln
               msg6 += "reaction_gamma      = %f" % row[55] + eoln
               msg6 += "reaction_gamma1     = %f" % row[69] + eoln
               msg6 += "reaction_spring     = %f" % row[67] + eoln
               msg6 += "reaction_frequency  = %f" % row[71] + eoln
               msg6 += "reaction_mass       = %f" % row[70] + eoln
               msg6 += "reaction_ethermal0  = %f" % row[72] + eoln
               msg6 += "reaction_entropy0   = %f" % row[73] + eoln

            msg7 = write_reactions_data(row)

            if (id>0):
               (pmsg0,hmsg0,iimagelist0) = fetch_eig(hup,dbfile,table,id)
               imagelist += iimagelist0

               (pmsg1,hmsg1,iimagelist1) = fetch_freq(hup,dbfile,table,id)
               imagelist += iimagelist1
               pmsg4 += msg5 + pmsg0 + pmsg1 + msg6 + msg7
               hmsg4 += msg5 + hmsg0 + hmsg1 + msg6 + msg7

            else:
               pmsg4 += msg5
               hmsg4 += msg5

      ooofile.write(eoln + hmsg4 + eoln)
      pppfile.write(eoln + pmsg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing molecule: :molecule, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing molecule: :molecule, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


###  predict  ###
rstring = ireplace("REACTION", "reaction", rstring)
treactions = rstring.split("reaction:")
for treaction in treactions[1:]:
   reaction = treaction.split(":reaction")[0]
   hasrkegg = "rkegg=" in reaction.lower()
   preact = ''
   ss0 = reaction.split("~")
   if (len(ss0)>1): preact = " ~ " + ss0[1]

   ss = ss0[0].strip().split("-->")
   rr = False
   if (len(ss)==1):
      rr = True
   if (len(ss)>1):
      if (ss[1]==''):
         rr = True
  
   if rr and (not hasrkegg): 
      preact = ss[0] + preact
      rstring = rstring.replace("reaction:"+reaction+":reaction","predict:"+preact+":predict")

#predict_reactions = []
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("PREDICT", "predict", rstring)
while ((len(rstring.split("predict:"))>1) and (not toolong) and (":predict" in rstring)):
   msg2 = rstring.split("predict:")
   esmiles = msg2[1].split(":predict")[0]
   rstring = rstring.replace("predict:"+esmiles+":predict","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   esmiles = cleanxyzdata(esmiles)
   #if (esmiles.find(".")!=-1):
   #   esmiles = esmiles.replace("."," + ")
   esmileslist = formula_to_reactions(hup,dbfile,abbrev_table,esmiles)
   for esmiles in esmileslist:
      text2speech_Threading("predict reaction requested for " + esmiles)
      if (usehtml5):
         cmd9 = use_arrows_api(chemdb_predict_reaction) + "-i -f \"" + esmiles + "\""
      else:
         cmd9 = use_arrows_api(chemdb_predict_reaction) + "-v -i -f \"" + esmiles + "\""
      #cmd9 = chemdb_predict_reaction + "-f \"" + esmiles + "\""

      try:
         result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
         if ("check back in ~10 minutes" in result9) and (not usehtml5):
            cmd9b    = use_arrows_api(chemdb_predict_reaction) + "-v -j  "
            result9b = subprocess.check_output(cmd9b,shell=True).decode("utf-8")
            result9  = subprocess.check_output(cmd9,shell=True).decode("utf-8")

         if ("imagelist:" in result9):
            result99 = result9.split("imagelist:")[1].split(":imagelist")[0]
            result9 = result9.replace("imagelist:"+result99+":imagelist","")
            imlist = result99.strip().split()
            imlist1 = imlist[0::2]
            imlist2 = imlist[1::2]
            for ii in range(len(imlist1)):
               imagelist.append((imlist1[ii],imlist2[ii])) 
         msg4 = result9
      except:
         msg4 = "\n\nchemdb_predict_reaction failed for %s\n" % esmiles

#      for ll in msg4.split('\n'):
#         if 'Predicted_Reaction:' in ll:
#            predict_reactions.append(ll)

      ooofile.write(eoln + msg4 + eoln)
      pppfile.write(eoln + msg4 + eoln)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing predict: :predict, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing predict: :predict, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

###### add predicted reactions #####
#for ll in predict_reactions: 
#   rstring += ll + eoln




### print NMR  ###
toolongcountmax = 500
toolongcount = 0
toolong      = False
rstring = ireplace("NMR", "nmr", rstring)
while ((len(rstring.split("nmr:"))>1) and (not toolong) and (":nmr" in rstring)):
   msg2 = rstring.split("nmr:")
   esmiles = msg2[1].split(":nmr")[0]
   rstring = rstring.replace("nmr:"+esmiles+":nmr","")
   esmiles = addspaces_reaction(esmiles.strip())
   esmiles = parsetosmiles(esmiles)
   esmileslist = formula_to_reactions1(hup,dbfile,abbrev_table,esmiles)
   esmiles     = esmileslist[0]
   text2speech_Threading("nmr calculation requested for " + esmiles)
   #rows = fetch_nmr(hup,dbfile,nmr_table,esmiles,False)
   rows = fetch_nmr(hup,dbfile,table,esmiles,False)
   if (len(rows)==0):
      missingesmiles = True
      if (submitmissingesmiles):
         esmiles2 = esmiles + " property{nmr}"
         rows  = fetch_nmr(hup,dbfile,requests_table,esmiles2) #adding to request table
         if ((len(rows)==0) or (resubmitmissingesmiles)):
            ooofile.write(" - " + esmiles2 + " not found and scheduled to be submitted."+ eoln)
            pppfile.write(" - " + esmiles2 + " not found and scheduled to be submitted."+ eoln)
            submitesmiles.append(esmiles2)
         else:
            ooofile.write(" - " + esmiles2 + " has already been scheduled to be submitted."+ eoln)
            pppfile.write(" - " + esmiles2 + " has already been scheduled to be submitted."+ eoln)
      else:
         ooofile.write(" - " + esmiles + " not found."+ eoln)
         pppfile.write(" - " + esmiles + " not found."+ eoln)
   else:
      msg4  = "The id(s) for emsiles = %s are: " % rows[0][6]
      for row in rows:
         id = row[0]
         msg4 += "%d " %id
         msg4 += "\n"
      msg4 += "Use id=% instead of esmiles to print other entries.\n"
      ooofile.write(eoln+msg4+eoln)
      pppfile.write(eoln+msg4+eoln)
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      for row in rows:
         #msg = print_nmr_row(hup,dbfile,nmr_scaling_table,row)
         (pmsg0,html0,iimagelist0) = print_nmr_row(usehtml5,hup,dbfile,nmr_scaling_table,row)
         imagelist += iimagelist0
         ooofile.write(eoln+html0+eoln)
         pppfile.write(eoln+pmsg0+eoln)

   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing nmr: :nmr, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing nmr: :nmr, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

#################################
### parse reactionenumeration ###
#################################
toolongcount = 0
toolong      = False
reactionenumerates = []
rstring = ireplace("REACTIONENUMERATE", "reactionenumerate", rstring)
while ((len(rstring.split("reactionenumerate:"))>1) and (not toolong) and (":reactionenumerate" in rstring)):
   msg2 = rstring.split("reactionenumerate:")
   reactionenumerate = msg2[1].split(":reactionenumerate")[0]
   rstring  = rstring.replace("reactionenumerate:"+reactionenumerate+":reactionenumerate","")
   reactionenumerates.append(reactionenumerate)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing reactionenumerate: :reactionenumerate, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing reactionenumerate: :reactionenumerate, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

### add reactionenumerates to rstring for parsing by parse reactions  ###
for reactionenumerate in reactionenumerates:
   print("reactionenumerate=",reactionenumerate)
   rstring += "\n"
   rstring += generate_reactions_from_reactionenumerate(reactionenumerate)
   rstring += "\n"



#################################################################
### convert reactions[]: :reactions  to reactions: :reactions ###
#################################################################
rstring = ireplace("REACTION", "reaction", rstring)
toolongcount = 0
toolong      = False
while ((len(rstring.split("reaction["))>1) and (not toolong) and (":reaction" in rstring)):
   msg2 = rstring.split("reaction[")
   msg3 = msg2[1].split(":reaction")[0]
   optiontag = msg3.split("]:")[0].strip()
   rr = msg3.split("]:")[1]
   rr = rr.replace("\t"," ")
   rr = rr.replace("\n"," ")
   rr = rr.replace('\xc2', ' ')
   rr = rr.replace('\xa0', ' ')
   rr = rr.replace(" + "," " + optiontag + " + ")
   rr = rr.replace("-->"," " + optiontag + " --> ")
   rr = rr + " " + optiontag
   convertreaction = "reaction: " + rr + " :reaction"
   rstring  = rstring.replace("reaction["+msg3+":reaction",convertreaction)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing reaction[]: :reaction, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing reaction[]: :reaction, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()


#######################
### parse reactions ###
#######################
### set how many entries to use ###
use_lowest_energy_esmiles = True
if ('useallentries' in rstring.lower()):
   use_lowest_energy_esmiles = False

asciiart_data       = []
toolongcount = 0
toolong      = False
reactions = []
rstring = ireplace("REACTION", "reaction", rstring)
while ((len(rstring.split("reaction:"))>1) and (not toolong) and (":reaction" in rstring)):
   msg2 = rstring.split("reaction:")
   reaction = msg2[1].split(":reaction")[0]
   rstring  = rstring.replace("reaction:"+reaction+":reaction","")
   #reaction2 = expand_reaction(reaction.strip())
   #reaction2 = addspaces_reaction(reaction2.strip())
   #reaction3 = parsetosmiles(reaction2)
   reaction2 = addspaces_reaction(reaction.strip())
   reaction2 = parsetosmiles(reaction2)
   reaction3 = expand_reaction(reaction2.strip())
   ###### need to fix this logic #######
   if (reaction3.find("*")!=-1):
      reaction3 = reaction3.replace("*}","&}")
      reaction3 = reaction3.replace("*"," ")
      reaction3 = reaction3.replace("&}","*}")
   #if (reaction3.find(".")!=-1):
   #   reaction3 = reaction3.replace("."," + ")
   #reactions.append(reaction3)
   reactions += formula_to_reactions(hup,dbfile,abbrev_table,reaction3)
   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing reaction: :reaction, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing reaction: :reaction, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()

if (len(reactions)<1):
   print("no reactions found, exiting")
else:
   print("reactions=",reactions)

reaction_data = []
noreaction_data = []
reactioncount = 0
erxnfile = open(wrkdir+"/"+tmperxn,'w')
addedtoerxnfile = False

for reaction in reactions:
   text2speech_Threading("reaction requested for " + reaction)
   reactioncount += 1
   rlink =  ARROWS_API_HOME + "reaction/%22" + reaction.strip() + "%22"
   htmlreactionlink = "<a target=\"_blank\" href=\"" + rlink.replace('#','%23') + "\">%s</a>" % reaction.strip()
   #ooofile.write(eoln+eoln+eoln + "Reaction %d: " % (reactioncount)  + reaction.strip()+ eoln)
   ooofile.write(eoln+eoln+eoln + "Reaction %d: " % (reactioncount)  + htmlreactionlink+ eoln)
   pppfile.write(eoln+eoln+eoln + "Reaction %d: " % (reactioncount)  + reaction.strip()+ eoln)
   #pppfile.write(eoln+eoln+eoln + "Reaction %d: " % (reactioncount)  + htmlreactionlink + eoln)

   sslist = reaction.split("-->")
   left  = sslist[0].strip()
   left = left.replace("\t"," ")
   left = left.replace("\n"," ")
   #left = left.decode('ascii', 'replace')
   left = left.replace('\xc2', ' ')
   left = left.replace('\xa0', ' ')
   if (len(left)==0):
      esmiles_reactants  = []
   else:
      esmiles_reactants  = left.split(' + ')
   number_reactants = len(esmiles_reactants)

   if (len(sslist)>1):
      right = sslist[1].strip()
      right= right.replace("\t"," ")
      right= right.replace("\n"," ")
      right= right.replace('\xc2', ' ')
      right= right.replace('\xa0', ' ')
      esmiles_products   = right.split(' + ')
      number_products  = len(esmiles_products)
   else:
      esmiles_products = esmiles_reactants
      number_products  = number_reactants
      esmiles_reactants = []
      number_reactants = 0

   #### SHE option ####
   SHE_reactant_string = ''
   SHE_reactant_x      = 0
   SHE = 0.0
   SHE_charges = 0.0
   eetmp = []
   for er in esmiles_reactants:
      if "SHE" in er:
         try:
            x = float(er.split(None,1)[0])
         except:
            x = 1.0
         SHE += 98.6*x
         SHE_charges += x
         SHE_reactant_string += ' + %.2f SHE ^{-1}' % x
         SHE_reactant_x      += x
      else:
         #eetmp.append(er)
         eetmp = append_esmileslist(eetmp,er)
   esmiles_reactants = eetmp
   number_reactants = len(esmiles_reactants)
   if (SHE_reactant_string!=''):
      SHE_reactant_string  = ' + %.2f SHE ^{-1}' % SHE_reactant_x

   SHE_product_string = ''
   SHE_product_x      = 0
   eetmp = []
   for ep in esmiles_products:
      if "SHE" in ep:
         try:
            x = float(ep.split(None,1)[0])
         except:
            x = 1.0
         SHE -= (98.6*x)
         SHE_charges -= x
         SHE_product_string += ' + %.2f SHE ^{-1}' % x
         SHE_product_x      += x
      else:
         #eetmp.append(ep)
         eetmp = append_esmileslist(eetmp,ep)
   esmiles_products = eetmp
   number_products  = len(esmiles_products)
   if (SHE_product_string!=''):
      SHE_product_string  = ' + %.2f SHE ^{-1}' % SHE_product_x

   print()
   print("esmiles_reactants=",esmiles_reactants)
   print("esmiles_products =",esmiles_products)
   print("numbers=",number_reactants,number_products)

   ### get the reactants from the database ###
   imagemsg = ""
   asciiart_data       = []
   energy_reactants    = []
   enthalpy_reactants  = []
   entropy_reactants   = []
   solvation_type_reactants = []
   solvation_reactants      = []
   sitkoff_reactants        = []
   honig_reactants          = []
   henthalpy_reactants  = []
   hentropy_reactants   = []

   npaths = 1
   path   = []
   mcount_reactants = []
   print()
   print("esmiles_reactants=",esmiles_reactants)
   print("esmiles_products =",esmiles_products)
   print("numbers=",number_reactants,number_products)

   ### get the reactants from the database ###
   imagemsg = ""
   asciiart_data       = []
   energy_reactants    = []
   enthalpy_reactants  = []
   entropy_reactants   = []
   solvation_type_reactants = []
   solvation_reactants      = []
   sitkoff_reactants        = []
   honig_reactants          = []
   henthalpy_reactants  = []
   hentropy_reactants   = []

   npaths = 1
   path   = []
   mcount_reactants = []
   data_reactants = []
   for esmiles in esmiles_reactants:
      try:
         x = float(esmiles.split(None,1)[0])
         mcount_reactants.append(x)
         esmiles2 = esmiles.split(None,1)[1]
      except:
         x = 1.0
         mcount_reactants.append(1.0)
         esmiles2 = esmiles
      rows  = fetch_esmiles(hup,dbfile,table,esmiles2,False)
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      data_reactants.append(rows)
      npaths *= len(rows)
      path.append(len(rows))
      if (len(rows)>0):
         iupac    = rows[0][1]
         #asciiart = stripWARNINGS(rows[0][34])
         rows023 = rows[0][23]
         if isinstance(rows023,bytes): rows023 = rows023.decode("utf-8")
         asciiart = stripWARNINGS(rows023)
         tstr = "Compound = " + iupac + eoln
         tstr += "twirl webpage  = %s\n" % (smiles2twirl(rows[0][4]))
         tstr += "image webpage  = %s\n\n" % (smiles2image(rows[0][4]))
         tstr += asciiart + eoln
         asciiart_data.append(tstr)
      if (len(rows)==0):
         missingesmiles = True
         if (submitmissingesmiles): 
            rows1 = fetch_esmiles(hup,dbfile,requests_table,esmiles2,False)
            rows  = fetch_esmiles(hup,dbfile,table,esmiles2) #adding to request table
            if ((len(rows1)==0) or (resubmitmissingesmiles)):
               ooofile.write(" - reactant not found: " + esmiles2 + " scheduled to be submitted."+ eoln)
               pppfile.write(" - reactant not found: " + esmiles2 + " scheduled to be submitted."+ eoln)
               submitesmiles.append(esmiles2)
            else:
               ooofile.write(" - reactant not found: " + esmiles2 + " has already been scheduled to be submitted."+ eoln)
               pppfile.write(" - reactant not found: " + esmiles2 + " has already been scheduled to be submitted."+ eoln)
         else:
            pppfile.write(" - reactant not found: " + esmiles2 + eoln)

   mcount_products = []
   data_products  = []
   for esmiles in esmiles_products:
      try:
         x = float(esmiles.split(None,1)[0])
         mcount_products.append(x)
         esmiles2 = esmiles.split(None,1)[1]
      except:
         x = 1.0
         mcount_products.append(1.0)
         esmiles2 = esmiles
      rows = fetch_esmiles(hup,dbfile,table,esmiles2,False)
      if (use_lowest_energy_esmiles): rows = lowest_energy_esmiles(rows)
      data_products.append(rows)
      npaths *= len(rows)
      path.append(len(rows))
      if (len(rows)>0):
         iupac    = rows[0][1]
         #asciiart = stripWARNINGS(rows[0][34])
         rows023 = rows[0][23]
         if isinstance(rows023,bytes): rows023 = rows023.decode("utf-8")
         asciiart = stripWARNINGS(rows023)
         tstr = "Compound = " + iupac + eoln
         tstr += "twirl webpage  = %s\n" % (smiles2twirl(rows[0][4]))
         tstr += "image webpage  = %s\n\n" % (smiles2image(rows[0][4]))
         tstr += asciiart + eoln
         asciiart_data.append(tstr)
      if (len(rows)==0):
         missingesmiles = True
         if (submitmissingesmiles):
            rows1 = fetch_esmiles(hup,dbfile,requests_table,esmiles2,False)
            rows = fetch_esmiles(hup,dbfile,table,esmiles2) #adding to request table
            if ((len(rows1)==0) or (resubmitmissingesmiles)):
               ooofile.write(" - product not found : " + esmiles2 + " scheduled to be submitted." + eoln)
               pppfile.write(" - product not found : " + esmiles2 + " scheduled to be submitted." + eoln)
               submitesmiles.append(esmiles2)
            else:
               ooofile.write(" - product not found : " + esmiles2 + " has already been scheduled to be submitted." + eoln)
               pppfile.write(" - product not found : " + esmiles2 + " has already been scheduled to be submitted." + eoln)
         else:
            ooofile.write(" - product not found : " + esmiles2 + eoln)
            pppfile.write(" - product not found : " + esmiles2 + eoln)
      
   #### check to see if reaction balanced ####
   mformulas = []
   rps = []
   coeffs = []
   charges = 0
   empty = False
   for ir in range(number_reactants):
      x = mcount_reactants[ir]
      if (len(data_reactants[ir])==0):
         empty = True
      else:
         molecule = data_reactants[ir][0]
         mformulas.append(molecule[2])
         rps.append(-1)
         coeffs.append(x)
         charges += x*molecule[12]
   for ip in range(number_products):
      x = mcount_products[ip]
      if (len(data_products[ip])==0):
         empty = True
      else:
         molecule = data_products[ip][0]
         mformulas.append(molecule[2])
         rps.append(+1)
         coeffs.append(x)
         charges -= x*molecule[12]
 
   if (abs(SHE_charges)>(0.01)): charges -= SHE_charges
   f2balance = f2_reaction(mformulas,rps,coeffs)
   reactionbalanced = (f2balance<1.0e-6) and (abs(charges)<1.0e-6)
   if (not reactionbalanced) and (not empty):
      ooofile.write("</pre>\n<pre style=\"font-size:2.0em;color:red\">\n")
      ooofile.write("The reaction is not balanced!" + eoln)
      ooofile.write("</pre>\n<pre style=\"font-size:1.0em;color:black\">\n")
      pppfile.write("The reaction is not balanced!" + eoln)

   ### add reaction to noreaction_data ###
   #print("REACTION=",reaction)
   #print("CHARGES=",abs(charges))
   #print("f2balance=",f2balance)
   #print("mformulas=",mformulas)
   #print("rps=",rps)
   #print("coeffs=",coeffs)
   #print("esmiles_reactants=",esmiles_reactants)
   #print("esmiles_products=",esmiles_products)
   #print("NPATHS=",npaths)
   #print("reactionbalanced=",reactionbalanced)
   #print("EMPTY=",empty)
   #if (npaths==0) and (reactionbalanced) and (not empty):
   if (npaths==0) and (len(esmiles_reactants)>0) and (len(esmiles_products)>0):
      noreaction_data.append(reaction)

   pathcount = [0]*len(path)

   instance_paths_data = []
   ggresults = []
   for p in range(npaths):
      has_hindered_rotations = False
      uniqueresult = True
      pathstr = " - instance %d: " % (p+1)
      msg0 = pathstr + "  "
      msg1 = pathstr
      msg1f = pathstr
      msg2 = pathstr
      msg3 = pathstr
      msg4 = pathstr
      msg4b = pathstr
      msg5  = pathstr
      msg12  = pathstr
      msg13  = pathstr
      msg14  = pathstr
      msg14b = pathstr
      msg15 = pathstr
      imagemsg = ""
      energy_reactants = []
      enthalpy_reactants = []
      entropy_reactants = []
      solvation_type_reactants = []
      solvation_reactants = []
      sitkoff_reactants = []
      henthalpy_reactants  = []
      hentropy_reactants   = []
      for ir in range(number_reactants):
         x = mcount_reactants[ir]
         molecule = data_reactants[ir][pathcount[ir]]
         if (model_correct):
            (tmp_enthalpy,tmp_entropy) = model_correct_frequencies(molecule)
         else:
            tmp_enthalpy = molecule[15]
            tmp_entropy  = molecule[16]
         energy_reactants.append(x*molecule[14])
         #enthalpy_reactants.append(x*molecule[15])
         #entropy_reactants.append(x*molecule[16])
         enthalpy_reactants.append(x*tmp_enthalpy)
         entropy_reactants.append(x*tmp_entropy)
         solvation_type_reactants.append(molecule[17])
         solvation_reactants.append(x*molecule[18])
         sitkoff_reactants.append(x*molecule[19])
         (imhindered,hindered_energy,hindered_entropy) = get_hindered_energy_entropy(molecule[65])
         henthalpy_reactants.append(x*hindered_energy)
         hentropy_reactants.append(x*hindered_entropy)
         has_hindered_rotations = has_hindered_rotations or imhindered

         msg0 += "%.2f %s" % (x,molecule2esmiles(molecule))
         if (ir<(number_reactants-1)): msg0 += "\n" + pathstr + "+ "
         msg1 += "%.2f %s" % (x,molecule[1])
         if (ir<(number_reactants-1)): msg1 += " + "
         msg1f += "%.2f %s" % (x,molecule[2])
         if (ir<(number_reactants-1)): msg1f += " + "
         ss0 = "Id=%d" % molecule[0]
         #link = "https://arrows.emsl.pnnl.gov/api/molecule/%22" + ss0 + "%22"
         link = ARROWS_API_HOME + "molecule/%22" + ss0 + "%22"
         gink = "<a target=\"_blank\" href=\"" + link + "\">%s</a>" % ss0
         msg2 += "%.2f (%s)" % (x,gink)
         #msg2 += "%.2f (Id=%d)" % (x,molecule[0])
         if (ir<(number_reactants-1)): msg2 += " + "
         if molecule[0] in badids: uniqueresult = False
         imagemsg += " %.2f %d " % (x,molecule[0])

     
      msg0  += SHE_reactant_string
      msg1  += SHE_reactant_string
      msg1f += SHE_reactant_string
      msg2  += SHE_reactant_string
      imagemsg += SHE_reactant_string.replace("^{-1}","").replace(" + ","")

      msg0 += "\n" + pathstr + "  --> "
      msg1 += " --> "
      msg1f += " --> "
      msg2 += " --> "
      imagemsg += " = "
      energy_products = []
      enthalpy_products = []
      entropy_products = []
      solvation_type_products = []
      solvation_products = []
      sitkoff_products = []
      henthalpy_products  = []
      hentropy_products   = []
      for ip in range(number_products):
         x = mcount_products[ip]
         molecule = data_products[ip][pathcount[ip+number_reactants]]
         if (model_correct):
            (tmp_enthalpy,tmp_entropy) = model_correct_frequencies(molecule)
         else:
            tmp_enthalpy = molecule[15]
            tmp_entropy  = molecule[16]
         energy_products.append(x*molecule[14])
         #enthalpy_products.append(x*molecule[15])
         #entropy_products.append(x*molecule[16])
         enthalpy_products.append(x*tmp_enthalpy)
         entropy_products.append(x*tmp_entropy)
         solvation_type_products.append(molecule[17])
         solvation_products.append(x*molecule[18])
         sitkoff_products.append(x*molecule[19])
         (imhindered,hindered_energy,hindered_entropy) = get_hindered_energy_entropy(molecule[65])
         henthalpy_products.append(x*hindered_energy)
         hentropy_products.append(x*hindered_entropy)
         has_hindered_rotations = has_hindered_rotations or imhindered

         msg0 += "%.2f %s" % (x,molecule2esmiles(molecule))
         if (ip<(number_products-1)): msg0 += "\n" + pathstr + "    + "
         msg1 += "%.2f %s" % (x,molecule[1])
         if (ip<(number_products-1)): msg1 += " + "
         msg1f += "%.2f %s" % (x,molecule[2])
         if (ip<(number_products-1)): msg1f += " + "
         ss0 = "Id=%d" % molecule[0]
         #link = "https://arrows.emsl.pnnl.gov/api/molecule/%22" + ss0 + "%22"
         link = ARROWS_API_HOME + "molecule/%22" + ss0 + "%22"
         gink = "<a target=\"_blank\" href=\"" + link + "\">%s</a>" % ss0
         msg2 += "%.2f (%s)" % (x,gink)
         #msg2 += "%.2f (Id=%d)" % (x,molecule[0])
         if (ip<(number_products-1)): msg2 += " + "
         if molecule[0] in badids: uniqueresult = False
         imagemsg += " %.2f %d " % (x,molecule[0])

      delta_e = sum(energy_products) - sum(energy_reactants)
      delta_h = sum(enthalpy_products) - sum(enthalpy_reactants)
      delta_s = sum(entropy_products) - sum(entropy_reactants)
      delta_cosmo = sum(solvation_products) - sum(solvation_reactants) 
      delta_sitkoff = sum(sitkoff_products) - sum(sitkoff_reactants)
      delta_solv = 0.0
      if (solvation_type_products[0]=='COSMO'):       delta_solv = -delta_cosmo + delta_sitkoff
      if ('COSMO-SMD' in solvation_type_products[0]): delta_solv = delta_cosmo
      delta_hh = sum(henthalpy_products) - sum(henthalpy_reactants)
      delta_hs = sum(hentropy_products)  - sum(hentropy_reactants)
      #autokcal=27.2114*23.06
      #autokj  =27.2114*23.06*4.184
      autokcal= 627.509469
      autokj  = 2625.49962
      tempfac = 298.15/1000.0

      msg0  += SHE_product_string
      msg1  += SHE_product_string
      msg1f += SHE_product_string
      msg2  += SHE_product_string
      imagemsg += SHE_product_string.replace("^{-1}","").replace(" + ","")

      #msg3 += "Erxn(gas)=%8.3f kcal/mol " % (delta_e*autokcal)
      #msg3 += "Hrxn(gas)=%8.3f kcal/mol " % ((delta_e+delta_h)*autokcal)
      #msg3 += "Grxn(gas)=%8.3f kcal/mol " % ((delta_e+delta_h)*autokcal-tempfac*delta_s)
      #msg3 += "Delta Solvation=%8.3f kcal/mol " % (delta_solv)
      #msg3 += "Grxn(aq)=%8.3f kcal/mol " % ((delta_e+delta_h)*autokcal-tempfac*delta_s + delta_solv)

      msg3 += "       Erxn(gas)"
      msg3 += "       Hrxn(gas)"
      msg3 += "       Grxn(gas)"
      msg3 += " Delta_Solvation"
      msg3 += "        Grxn(aq)"

      msg4 += " %15.3f" % (delta_e*autokcal)
      msg4 += " %15.3f" % ((delta_e+delta_h)*autokcal)
      msg4 += " %15.3f" % ((delta_e+delta_h)*autokcal-tempfac*delta_s)
      msg4 += " %15.3f" % (delta_solv)
      msg4 += " %15.3f" % ((delta_e+delta_h)*autokcal-tempfac*delta_s + delta_solv + SHE)
      if (abs(SHE)>(0.01)):
         msg4 += "  -- in kcal/mol (electrode bias =%8.3f kcal/mol)" % SHE
      else:
         msg4 += "  -- in kcal/mol"

      msg4b += " %15.3f" % (delta_e*autokj)
      msg4b += " %15.3f" % ((delta_e+delta_h)*autokj)
      msg4b += " %15.3f" % ((delta_e+delta_h)*autokj-tempfac*delta_s*4.184)
      msg4b += " %15.3f" % (delta_solv*4.184)
      msg4b += " %15.3f" % ((delta_e+delta_h)*autokj-tempfac*delta_s*4.184 + (delta_solv+SHE)*4.184)
      msg4b += "  -- in kj/mol"

      msg5 += " %15.6f" % (delta_e)
      msg5 += " %15.6f" % ((delta_e+delta_h))
      msg5 += " %15.6f" % ((delta_e+delta_h)-tempfac*delta_s/autokcal)
      msg5 += " %15.6f" % (delta_solv/autokcal)
      msg5 += " %15.6f" % ((delta_e+delta_h)-tempfac*delta_s/autokcal + (delta_solv+SHE)/autokcal)
      msg5 += "  -- in Hartrees"

      msg6  = " %d" % (reactioncount)
      msg6 += " %15.3f" % (delta_e*autokcal*4.184)
      msg6 += " %15.3f" % ((delta_e+delta_h)*autokcal*4.184)
      msg6 += " %15.3f" % ((delta_e+delta_h)*autokcal*4.184-tempfac*delta_s*4.184)
      msg6 += " %15.3f" % (delta_solv*4.184)
      msg6 += " %15.3f" % ((delta_e+delta_h)*autokcal*4.184-tempfac*delta_s*4.184 + (delta_solv+SHE)*4.184)


      msg13 += "       Erxn(gas)"
      msg13 += "       Hrxn(gas)"
      msg13 += "       Grxn(gas)"
      msg13 += " Delta_Solvation"
      msg13 += "        Grxn(aq)"
      msg13 += "  --  Includes Hindered Rotation Correction"

      msg14 += " %15.3f" % (delta_e*autokcal)
      msg14 += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokcal)
      msg14 += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokcal-tempfac*(delta_s+delta_hs))
      msg14 += " %15.3f" % (delta_solv)
      msg14 += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokcal-tempfac*(delta_s+delta_hs) + delta_solv + SHE)
      if (abs(SHE)>(0.01)):
         msg14 += "  -- in kcal/mol (electrode bias =%8.3f kcal/mol)" % SHE
      else:
         msg14 += "  -- in kcal/mol"

      msg14b += " %15.3f" % (delta_e*autokj)
      msg14b += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokj)
      msg14b += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokj-tempfac*(delta_s+delta_hs)*4.184)
      msg14b += " %15.3f" % (delta_solv*4.184)
      msg14b += " %15.3f" % ((delta_e+delta_h+delta_hh)*autokj-tempfac*(delta_s+delta_hs)*4.184 + (delta_solv+SHE)*4.184)
      msg14b += "  -- in kj/mol"

      msg15 += " %15.6f" % (delta_e)
      msg15 += " %15.6f" % ((delta_e+delta_h+delta_hh))
      msg15 += " %15.6f" % ((delta_e+delta_h+delta_hh)-tempfac*(delta_s+delta_hs)/autokcal)
      msg15 += " %15.6f" % (delta_solv/autokcal)
      msg15 += " %15.6f" % ((delta_e+delta_h+delta_hh)-tempfac*(delta_s+delta_hs)/autokcal + (delta_solv+SHE)/autokcal)
      msg15 += "  -- in Hartrees"

      instance = []
      instance.append(delta_e)
      instance.append(delta_e+delta_h)
      instance.append(delta_e+delta_h -tempfac*delta_s/autokcal)
      instance.append(delta_solv/autokcal)
      instance.append(delta_e+delta_h-tempfac*delta_s/autokcal + (delta_solv+SHE)/autokcal)
      instance_paths_data.append(instance)

      ggcur =  (delta_e+delta_h)*autokcal-tempfac*delta_s + (delta_solv+SHE)
      for gg in ggresults:
         if (abs(gg-ggcur)<1.0e-3): uniqueresult = False
      ggresults.append(ggcur)

      if (uniqueresult):
         ooofile.write(msg2+eoln)
         ooofile.write(msg1+eoln)
         ooofile.write(msg1f+eoln)
         ooofile.write(msg0+eoln)
         ooofile.write(msg3+eoln)
         ooofile.write(msg4+eoln)
         ooofile.write(msg4b+eoln)
         ooofile.write(msg5+eoln)

         pppfile.write(msg2+eoln)
         pppfile.write(msg1+eoln)
         pppfile.write(msg1f+eoln)
         pppfile.write(msg0+eoln)
         pppfile.write(msg3+eoln)
         pppfile.write(msg4+eoln)
         pppfile.write(msg4b+eoln)
         pppfile.write(msg5+eoln)

         if has_hindered_rotations:
            ooofile.write(msg12+eoln)
            ooofile.write(msg13+eoln)
            ooofile.write(msg14+eoln)
            ooofile.write(msg14b+eoln)
            ooofile.write(msg15+eoln)
            pppfile.write(msg12+eoln)
            pppfile.write(msg13+eoln)
            pppfile.write(msg14+eoln)
            pppfile.write(msg14b+eoln)
            pppfile.write(msg15+eoln)

         erxnfile.write(msg6+eoln)
         addedtoerxnfile = True

      ### shift the path ###
      done = False; i = 0
      while (not done):
         if (pathcount[i]<path[i]):
            pathcount[i] += 1
            if (pathcount[i]<path[i]):
               done = True
            else:
               pathcount[i] = 0
               i += 1
         if (i>=len(path)): done = True

   ### append the reaction data reaction_data ###
   print("inspaths2=",instance_paths_data)
   reaction_data.append([reaction,instance_paths_data])

   ### print asciiart ###
   if (len(asciiart_data)>0):
      pppfile.write("-------------------------------------------------------------------------\n")
      for asciiart in asciiart_data:
         pppfile.write(asciiart)
         pppfile.write("-------------------------------------------------------------------------\n")

   if (useascii):
      if (len(asciiart_data)>0):
         ooofile.write("</pre>\n")
         ooofile.write("<pre style=\"font-size:0.5em;color:magenta\">\n")
         #ooofile.write("----------------------------------------------------------------------------\n")
         ooofile.write("-------------------------------------------------------------------------\n")
         for asciiart in asciiart_data:
            ooofile.write(asciiart)
            ooofile.write("-------------------------------------------------------------------------\n")
         ooofile.write("</pre>\n")
         ooofile.write("<pre style=\"font-size:1.0em;color:black\">\n")

   ### print png art ###
   else:
      if (imagemsg!=""):
         pngfilename = wrkdir + "/image-%d-%d.png" % (ddrand,imagecount)
         pngname     = "image-%d-%d" % (ddrand,imagecount)
         #imagelist.append((pngfilename,pngname))
         #imagecount += 1
         cmd9  = chemdb_reaction_image + imagemsg + " " + pngfilename
         try:
            print("cmd9=",cmd9)
            result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
            imagelist.append((pngfilename,pngname))
            imagecount += 1
         except:
            cmd99 = chemdb_reaction_image + "-f " + imagemsg + " " + pngfilename
            try:
               print("cmd99=",cmd99)
               result99 = subprocess.check_output(cmd99,shell=True).decode("utf-8")
               imagelist.append((pngfilename,pngname))
               imagecount += 1
            except:
               result99 = "\n\nchemdb_reaction_image failed and job was not submitted\n\n"
         ooofile.write("</pre>\n")
         ooofile.write('<img src="cid:%s"><br>\n' % pngname)
         ooofile.write("<pre style=\"font-size:1.0em;color:black\">\n")

erxnfile.close()



#### make dumb plots ####
if (addedtoerxnfile) and (len(reactions)>1):
   erxngnuplot  = wrkdir + "/erxn-%d.gnuplot" % ddrand
   erxndumb  = wrkdir + "/erxn-%d.dumb" % ddrand
   eedatafile = wrkdir+"/"+ tmperxn
   erxn = 'set output \"%s\"; set term dumb; set title \"Reaction Energies (kj/mol)\"; set xlabel \"reaction number\";  plot \"%s\" using 1:2 with lp pointtype 5 title \"Erxn(gas)\", \"%s\" using 1:3 with lp pointtype 8 title \"Hrxn(gas)\",\"%s\" using 1:4 with lp pointtype 7 title \"Grxn(gas)\",\"%s\" using 1:6 with lp pointtype 19 title \"Grxn(aq)\" ' % (erxndumb,eedatafile,eedatafile,eedatafile,eedatafile)

   with open(erxngnuplot,'w')  as f: f.write(erxn+eoln)
   os.system(gnuplot + erxngnuplot)
   with open(erxndumb,'r')  as f: msg = f.read(); pppfile.write(msg)
   if (useascii):
      ooofile.write("</pre>\n")
      ooofile.write("<pre style=\"font-size:1.0em;color:blue\">\n")
      with open(erxndumb,'r')  as f: msg = f.read(); ooofile.write(msg)
      ooofile.write("</pre>\n")
      ooofile.write("<pre style=\"font-size:1.0em;color:black\">\n")
   try:
      os.unlink(erxngnuplot)
      os.unlink(erxndumb)
   except:
      print("Failed to delete temporary gnuplot files")

   ### PNG gnuplotting ####
   if (not useascii):
      erxngnuplot = wrkdir + "/erxn-%d.gnuplot" % ddrand
      erxnpng     = wrkdir + "/erxn-%d.png" % ddrand
      eedatafile  = wrkdir+"/"+ tmperxn
      erxn = 'set output \"%s\"; set term png; set grid; set title \"Comparison of Reactions\"; set xlabel \"reaction number\"; set ylabel \"reaction energies (kj/mol)\";  plot \"%s\" using 1:2 with lp pointtype 5 lw 2 title \"Erxn(gas)\", \"%s\" using 1:3 with lp pointtype 8 lw 2 title \"Hrxn(gas)\",\"%s\" using 1:4 with lp pointtype 7 lw 2 title \"Grxn(gas)\",\"%s\" using 1:6 with lp pointtype 19 lw 2 title \"Grxn(aq)\" ' % (erxnpng,eedatafile,eedatafile,eedatafile,eedatafile)

      with open(erxngnuplot,'w')  as f: f.write(erxn+eoln)
      os.system(gnuplot + erxngnuplot)
      try:
         os.unlink(erxngnuplot)
      except:
         print("Failed to delete temporary gnuplot files")

      ooofile.write("</pre>\n")
      pngname     = "image-%d-%d" % (ddrand,imagecount)
      imagelist.append((erxnpng,pngname))
      imagecount += 1
      ooofile.write('<br><center><img src="cid:%s" align="middle"></center><br>\n' % pngname)
      ooofile.write("<pre style=\"font-size:1.0em;color:black\">\n")


### print reaction tables ###
shift = 0
for reactionenumerate in reactionenumerates:
   (rr,ss) = maketable_from_reactionenumerate(reactionenumerate,reaction_data[shift:])
   shift += ss
   ooofile.write(rr)
   pppfile.write(rr)


### add reaction_data to reactionhash database ###
#for reaction in reaction_data:
#   try:
#      print("Adding to reaction database=",reaction)
#      Erxn     = reaction[1][0][0]*autokcal
#      Hrxn     = reaction[1][0][1]*autokcal
#      Grxn     = reaction[1][0][2]*autokcal
#      Solv     = reaction[1][0][3]*autokcal
#      Grxnaq   = reaction[1][0][4]*autokcal
#      cmd9 = chemdb_predict_reaction + " -e %f -r %f -g %f -q %f -u %f  -a " % (Erxn,Hrxn,Grxn,Solv,Grxnaq)
#      cmd9 += "\"" + reaction[0] + "\""
#      print("cmd9=",cmd9)
#      result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
#      print("adding reaction result=",result9)
#   except:
#      print("Failed adding adding reaction =", reaction[0])


### add noreaction_data to reactionhash database ###
#for reaction in noreaction_data:
#   try:
#      print("Adding to noreaction database=",reaction)
#      cmd9 = chemdb_predict_reaction + " -n " 
#      cmd9 += "\"" + reaction + "\""
#      print("cmd9=",cmd9)
#      result9 = subprocess.check_output(cmd9,shell=True).decode("utf-8")
#      print("adding noreaction result=",result9)
#   except:
#      print("Failed adding adding noreaction =", reaction[0])


#### print asciiart ###
#if (len(asciiart_data)>0):
#   ooofile.write("</pre>\n")
#   ooofile.write("<pre style=\"font-size:0.5em;color:magenta\">\n")
#   ooofile.write("----------------------------------------------------------------------------\n")
#   for asciiart in asciiart_data:
#      ooofile.write(asciiart)
#      ooofile.write("-------------------------------------------------------------------------\n")
#   ooofile.write("</pre>\n")
#   ooofile.write("<pre style=\"font-size:1.0em;color:black\">\n")

#### submit missing esmiles ####
if (submitmissingesmiles):
   ooofile.write("</pre><pre style=\"font-size:1.0em;color:red\">\n")
   nmach = len(submitmachines)
   i = 0
   for esmiles in submitesmiles:
    try:
      ### fetch the datafile ###
      datafile = fetch_esmiles_base_datafile(hup,dbfile,table,esmiles)
      esmiles1 = esmileswithid_to_esmiles(hup,dbfile,table,esmiles)
      esmiles1 = esmileswithname_to_esmiles(esmiles1.strip())
      print("esmiles=",esmiles,"  esmiles1=",esmiles1)
      print("datafile=",datafile)

      if (datafile=='') and (("ccsd(t)" in esmiles) or ("mp2" in esmiles) or ("qsharp_chem" in esmiles) or ("ccsd" in esmiles)):
         #mmsg = "Base calculation not found: not submitting esmiles="+esmiles+"\n"
         if (nmach>0):
            msg4 = submit_esmiles_base(esmiles1,includerotation,datafile,emailfrom,submitmachines[i])
            i += 1
            i = i % nmach
         else:
            msg4 = submit_esmiles_base(esmiles1,includerotation,datafile,emailfrom)
         ooofile.write(eoln + msg4 + eoln)
         pppfile.write(eoln + msg4 + eoln)
         #print(mmsg)
         #ooofile.write(mmsg)
         #pppfile.write(mmsg)
      else:
         vtag = ''
         if (nmach>0):
            msg4 = submit_esmiles(esmiles1,includerotation,datafile,emailfrom,submitmachines[i])
            i += 1
            i = i % nmach
         else:
            msg4 = submit_esmiles(esmiles1,includerotation,datafile,emailfrom)
         ooofile.write(eoln + msg4 + eoln)
         pppfile.write(eoln + msg4 + eoln)
    except:
      mmsg = "Error: not submitting esmiles="+esmiles+"\n"
      print(mmsg)
      ooofile.write(mmsg)
      pppfile.write(mmsg)
   listnwjobs = listnwjobs or (len(submitesmiles)>0)
   listnwjobs = False
   ooofile.write("</pre><pre style=\"font-size:1.0em;color:black\">\n")


#### submit_heat_formation ####
for esmiles in submit_heat_formation:
   cmd1 = chemdb_add_Hf + '"' + esmiles.strip() + '"'
   print("chemdb_add_Hf = " + cmd1)
   try:
      result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   except:
      result = "\n\nchemdb_add_Hf failed and job was not submitted\n\n"
   ooofile.write(eoln+result+eoln)
   pppfile.write(eoln+result+eoln)
   print(result)


#### queuecheck ####
if (queuecheck):
   cmd1 = use_arrows_api(tnt_submit) + " -i"
   print("queuecheck cmd1 = " + cmd1)
   result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   ooofile.write(result)
   pppfile.write(result)
   print(result)

#### listnwjobs ####
if (listnwjobs):
   cmd1 = queue_nwchem_em + " -a -s -m None"
   print("listnwjobs cmd1 = " + cmd1)
   result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   ooofile.write(result)
   pppfile.write(result)
   print(result)

#### fetchnwjob ####
for f in fetchnwjob:
   cmd1 = queue_nwchem_em + " -f %d -m %s " % (f,emailfrom)
   print("fetchwjob cmd1 = " + cmd1)
   result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   ooofile.write(result)
   pppfile.write(result)
   print(result)

#### pushnwjob ####
for aa in pushnwjob:
   with open(wrkdir + "/"+tmpsmi1,'w') as ff: ff.write(aa)
   cmd1 = queue_nwchem_em + " -w  " + wrkdir + "/"+ tmpsmi1
   print("pushwjob cmd1 = " + cmd1)
   result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   ooofile.write(result)
   pppfile.write(result)
   print(result)

### SMARTS ###
toolongcountmax = 15
toolongcount = 0
toolong      = False
rstring = ireplace("SMARTS", "smarts", rstring)
while ((len(rstring.split("smarts:"))>1) and (not toolong) and (":smarts" in rstring)):
   msg2 = rstring.split("smarts:")
   msg3 = msg2[1].split(":smarts")[0]
   rstring  = rstring.replace("smarts:"+msg3+":smarts","")
   msg3 = addspaces_reaction(msg3)
   msg3 = parsetosmiles(msg3)
   #msg3 = esmileswithname_to_esmiles(msg3)
   searching  = msg3.strip().split()
   smarts = searching[0]

   rows = fetch_all_esmiles(hup,dbfile,table)
   result  = '\n'
   result += '+---------------------------------------------+\n'
   result += '| SMARTS searching of esmiles in the database |\n'
   result += '+---------------------------------------------+\n\n'
   result += 'SMARTS = ' + smarts + '\n\n'
   if (len(searching)>1): result += 'OPTIONS= ' + ' '.join(searching[1:]) + '\n\n'
   result1 = ''
   result1 += '    Id            date_time  molecular formula  esmiles\n'
   
   result2 = ''
   for r in rows:
      found = True
      for s in searching[1:]:
         found = found and (s in r[3])
      if found and ('pm3' not in r[3]):
         result2 += "%s DATA:::%6d %20s %18s  %s\n" % (r[3].split()[0],r[0],r[1],r[2],r[3])

   fname = wrkdir + "/harry2.smi" 
   with open(fname,'w') as ff: 
      ff.write(result2)

   myids = []
   cmd1 =  obabel + ' -ismi ' + fname + ' -osmi -s \"' + smarts + '\"'
   result3 = subprocess.check_output(cmd1,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
   for line in result3.split("\n"):
      if "DATA:::" in line:
         line2 = line.split('DATA:::')[1] + "\n"
         ss0 = line2.split()[0].strip()
         space = ''
         for i in range(6-len(ss0)): space += ' '
         #link = "https://arrows.emsl.pnnl.gov/api/molecule/%22id=" + ss0 + "%22"
         link = ARROWS_API_HOME + "molecule/%22id=" + ss0 + "%22"
         result1 += space + "<a target=\"_blank\" href=\"" + link + "\">%s</a>" % ss0
         result1 += line2[6:]
         myids.append(evalnum(ss0))

   # maximum of 100 rows
   if (len(myids)>100): myids = myids[:100]
   html = kekuletablehtml(hup,dbfile,table,myids)

   if usehtml5:
      ooofile.write(result+html+result+result1)
   else:
      ooofile.write(result+result1)
   pppfile.write(result+result1)

   toolong = (toolongcount > toolongcountmax)
   toolongcount += 1
if (toolong):
   ooofile.write("chemdb_fetch_reactions: too long parsing smarts: :smarts, exiting.\n")
   pppfile.write("chemdb_fetch_reactions: too long parsing smarts: :smarts, exiting.\n")
   print("All requests to Arrows were successful.")
   exit()




#### listallesmiles ####
if (listallesmiles):
   rows = fetch_all_esmiles(hup,dbfile,table,listallesmilescount)
   result  = '\n'
   result += '+----------------------------------------+\n'
   result += '| Listing of all esmiles in the database |\n'
   result += '+----------------------------------------+\n\n'
   result += '    Id            date_time  molecular formula  esmiles\n'
   for r in rows:
      ss0 = "%d" % r[0]
      space = ''
      for i in range(6-len(ss0)): space += ' '
      #link   = "https://arrows.emsl.pnnl.gov/api/molecule/%22id=" + ss0 + "%22"
      link   = ARROWS_API_HOME + "molecule/%22id=" + ss0 + "%22"
      result += space + "<a target=\"_blank\" href=\"" + link + "\">%s</a>" % ss0
      result += " %20s %18s  %s\n" % (r[1],r[2],r[3])

   ooofile.write(result)
   pppfile.write(result)

#### listallreactions ####
if (listallreactions):
   cmd1 = use_arrows_api(chemdb_predict_reaction)
   result = subprocess.check_output(cmd1,shell=True).decode("utf-8")
   ooofile.write(result)
   pppfile.write(result)


##### report missingesmiles #####
if (missingesmiles):
   msg = "Several requests to Arrows were not successful."
else:
   msg = "All requests to Arrows were successful."
ooofile.write(eoln+msg+eoln)
pppfile.write(eoln+msg+eoln)
print(eoln+msg+eoln)


##### report image files #####
if (not useascii):
   msg = "imagelist: "
   for image in imagelist:
      msg += "%s %s " % (image[0],image[1])
   msg += ":imagelist"
   print(eoln+msg+eoln)


### add simple arrows logo 
#afile = open(arrowslogo,'r')
#alogo = afile.read()
#afile.close

if usesvg:
   ooofile.write(alogosvg)
else:
   if (useascii):
      ooofile.write(alogo)
   else:
      ooofile.write(alogowww)
   pppfile.write(alogo)

ooofile.write("</pre>\n")

ooofile.write("</body></html>\n")
ooofile.close()
pppfile.close()

#for molecule in rows:
#   print("Id=%6d iupac=%s csmiles=%s charge=%d mult=%d method=%s theory=%s basis=%s \tE=%14.6f  Enthalpy=%14.6f Entropy=%8.3f solvation=%8.3f sitkoff=%8.3f" % (molecule[0],molecule[1],molecule[4],molecule[12],molecule[13],molecule[9],molecule[10],molecule[11],molecule[14],molecule[15],molecule[16],molecule[18],molecule[19]))


### remove temporary wrkdir files ###
try:
   os.unlink(wrkdir + "/"+tmpsmi1)
except:
   print("chemdb_fetch_reactions5 Failed to remove " + wrkdir + "/"+ tmpsmi1)

try:
   os.unlink(wrkdir + "/"+tmpsmi2)
except:
   print("chemdb_fetch_reactions5 Failed to remove " + wrkdir + "/"+ tmpsmi2)

try:
   os.unlink(wrkdir + "/"+tmpxyz1)
except:
   print("chemdb_fetch_reactions5 Failed to remove " + wrkdir + "/"+ tmpxyz1)

try:
   os.unlink(wrkdir + "/"+tmperxn)
except:
   print("chemdb_fetch_reactions5 Failed to remove " + wrkdir + "/"+ tmperxn)

try:
   os.unlink(wrkdir + "/"+tmpnwout)
except:
   print("chemdb_fetch_reactions5 Failed to remove " + wrkdir + "/"+ tmpnwout)

