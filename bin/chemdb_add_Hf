#!/usr/bin/env python3

import sys,os,time,pickle,math,urllib.request,pexpect,getopt,random,operator
import pymysql as MySQLdb
from math import *

###################### PARAMETERS ###########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME           = __file__.split("TinyArrows")[0] + "TinyArrows"
MY_ENV                = os.environ.copy()
MY_ENV["ARROWS_HOME"] = ARROWS_HOME

############## machine parameters #########################
#babel      = "/usr/bin/babel"
obabel     = "/usr/bin/env obabel "

wrkdir     = ARROWS_HOME + "/Work"
chemdbfile = ARROWS_HOME + "/bin/.chemdb-en"
ddrand = random.randint(0,999999)
tmpsmi1 = "tmpsmi1-%d.smi" % ddrand
tmpsmi2 = "tmpsmi2-%d.smi" % ddrand
tmpxyz1 = "tmpxyz1-%d.xyz" % ddrand
############## machine parameters #########################

bbb = "bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p`%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08b`dgjc.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY/[\x08_pafgtck_afglc\x1e\x1e;\x1efffY0[\x08_pafgtcn_qqumpb\x1e;\x1efffY1[\x08"


periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}



def pexpect_command(pcmd,mypassword):
   if (mypassword=="nopassword"):
      #os.system(pcmd)
      result1 = subprocess.check_output(pcmd,shell=True).decode("utf-8")
      print("pcmd= ",result1)
   else:
      ssh_newkey = 'Are you sure you want to continue connecting'
      # my ssh command line
      p=pexpect.spawn(pcmd,timeout=300)
      i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==0:
          print("I say yes")
          p.sendline('yes')
          i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==1:
          print("sending password")
          p.sendline(mypassword)
          p.expect(pexpect.EOF)
      elif i>=2:
          print("either received key or connection timeout")
          pass
      print(p.before) # print out the result

aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec(aaa)


##### geturlresult function ####
#def geturlresult(url):
#    try:
#        proxy = urllib2.ProxyHandler({'http': 'http://squid-proxy.pnl.gov:3128',
#                                      'https': 'https://squid-proxy.pnl.gov:3128'}
#                                    )
#        opener = urllib2.build_opener(proxy)
#        urllib2.install_opener(opener)
#        connection = urllib2.urlopen(url)
#    except urllib2.HTTPError, e:
#        return ""
#    else:
#        return connection.read().rstrip()

#### geturlresult function ####
def geturlresult(url):
   try:
      the_page = ""
      with urllib.request.urlopen(url) as response:
         the_page = response.read().rstrip()
   except:
      the_page = ""

   if isinstance(the_page,bytes): the_page = the_page.decode("utf-8")

   return the_page


#############################################
#                                           #
#             addspaces_esmiles             #
#                                           #
#############################################
def addspaces_esmiles(esmiles):
   tags = ['^','mult','theory','xc','solvation_type','basis','xyzdata','calculation_type','method','reference','Hf']
   esmiles2 = esmiles[:]
   for tag1 in tags:
      if tag1 in esmiles2: esmiles2 = esmiles2.replace(tag1," " + tag1)
   return esmiles2


#### pubchem_smiles2canonicalsmiles function ####
def pubchem_smiles2canonicalsmiles(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/CanonicalSMILES/TXT" % smiles)
    return result


#### pubchem_smiles2iupac function ####
def pubchem_smiles2iupac(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/property/IUPACName/TXT" % smiles)
    return result

#### pubchem_smiles2cid function ####
def pubchem_smiles2cid(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/cids/TXT" % smiles)
    return result

def pubchem_smiles2synonyms(smiles):
    result = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    return result

#### pubchem_smiles2cas function ####
def pubchem_smiles2cas(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    cas = ''
    for s in ss:
       if ((len(s.split('-'))==3) and (cas=='')):
          t = s.split('-')
          if (t[0].isdigit() and t[1].isdigit() and t[2].isdigit()):
             cas = s
       if 'CAS-' in s: cas = s.strip('CAS-')
    return cas

#### pubchem_smiles2kegg function ####
def pubchem_smiles2kegg(smiles):
    synonyms = geturlresult("http://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/%s/synonyms/TXT" % smiles)
    ss = synonyms.split()
    ckegg = ''
    dkegg = ''
    for s in ss:
       if ((s[0]=='C') and (len(s)==6) and s[1:].isdigit()): ckegg = s
       if ((s[0]=='D') and (len(s)==6) and s[1:].isdigit()): dkegg = s
    kegg = ckegg + " " + dkegg

    return kegg.strip()

#######################################
#                                     #
#          smiles2ascii               #
#                                     #
#######################################

#  This function converts a smiles string and converts
# it to a chemical drawing in ascii art.

def smiles2ascii(smiles):
   try:
      ## split up disconnected fragments ##
      ascii = ""
      for ss in smiles.split('.'):
         cmd = obabel + ' --gen3d -:\"' + ss.strip() + '\" -oascii'
         result = subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT).decode("utf-8")
         ascii  += result.replace("1 molecule converted","").rstrip() + "\n"
   except:
      ascii = ""

   return ascii


#### smiles2InChI function ####
def smiles2InChI(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -ismi " + smilefile + " -oinchi " + inchifile + " >& " + wrkdir + "/junk.err"
      os.system(cmd6)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

#### smiles2InChIKey function ####
def smiles2InChIKey(smiles):
   eoln = "\n"
   inchi = ''
   try:
      smilefile = wrkdir + "/"+tmpsmi1
      inchifile = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()
      cmd6 = babel + " -ismi " + smilefile + " -oinchikey " + inchifile + " >& " + wrkdir + "/junk.err"
      os.system(cmd6)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi


#### smiles2charge ####
def smiles2charge(smiles):
  charge = 0
  ss = smiles.split('[')
  if (len(ss)>1):
     ss = ss[1:]
  else:
     ss = []
  for s in ss:
     inside = s.split(']')[0]
     if   (inside.find("+10")!=-1): charge += 10
     elif (inside.find("-10")!=-1): charge -= 10
     elif (inside.find("+9")!=-1): charge += 9
     elif (inside.find("-9")!=-1): charge -= 9
     elif (inside.find("+8")!=-1): charge += 8
     elif (inside.find("-8")!=-1): charge -= 8
     elif (inside.find("+7")!=-1): charge += 7
     elif (inside.find("-7")!=-1): charge -= 7
     elif (inside.find("+6")!=-1): charge += 6
     elif (inside.find("-6")!=-1): charge -= 6
     elif (inside.find("+5")!=-1): charge += 5
     elif (inside.find("-5")!=-1): charge -= 5
     elif (inside.find("+4")!=-1): charge += 4
     elif (inside.find("-4")!=-1): charge -= 4
     elif (inside.find("+3")!=-1): charge += 3
     elif (inside.find("-3")!=-1): charge -= 3
     elif (inside.find("+2")!=-1): charge += 2
     elif (inside.find("-2")!=-1): charge -= 2
     elif (inside.find("+1")!=-1): charge += 1
     elif (inside.find("-1")!=-1): charge -= 1
     elif (inside.find("+")!=-1):  charge += inside.count('+')
     elif (inside.find("-")!=-1):  charge -= inside.count('-')

  return charge


#### smiles2mult ####
def smiles2mult(smiles,q):
  mult = 1
  smiles2xyz(smiles,wrkdir + "/"+tmpxyz1)
  pcharge = q
  count = 0
  xyzfile = open(wrkdir + "/"+tmpxyz1,'r')
  for line in xyzfile:
     count += 1
     if (count>2):
        Symb = line.split()[0]
        if Symb in periodic_table_charge:
           pcharge += periodic_table_charge[Symb]
  xyzfile.close()

  if ((pcharge%2)==1):
     mult = 2
  else:
     mult = 1

  return mult




#### cannonicalsmiles ####
def cannonicalsmiles(smiles):
   eoln = "\n"
   try:
      smilefile  = wrkdir + "/"+tmpsmi1
      smilefile2 = wrkdir + "/"+tmpsmi2
      ofile = open(smilefile,'w')
      ofile.write(smiles); ofile.write(eoln)
      ofile.close()

      cmd6 = babel + " -ismi " + smilefile + " -ocan " + smilefile2 + " >& junk.err"
      os.system(cmd6)
      smiles2 = "nosmiles"
      sdat = []
      ofile = open(smilefile2,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles2 = sdat[0].split()[0]
   except:
      smiles2 = smiles

   ### special cases ###
   if ((smiles=='[HH]') or
       (smiles=='[H2]') or
       (smiles=='HH')   or
       (smiles=='[H].[H]')): smiles2 = '[HH]'

   return smiles2


#### xyz2smiles function ####
def xyz2smiles(xyzfile):
   try:
      smiles = ''
      smilefile = wrkdir + "/"+tmpsmi1
      cmd6 = babel + " -ixyz " + xyzfile + " -ocan " + smilefile + " >& junk.err"
      os.system(cmd6)
      sdat = []
      ofile = open(smilefile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      smiles = sdat[0].split()[0]
   except:
      smiles = ''

   ### special cases ###
   if ((smiles=='[HH]') or
       (smiles=='[H2]') or
       (smiles=='HH')   or
       (smiles=='[H].[H]')): smiles = '[HH]'

   return smiles


#### xyz2InChI function ####
def xyz2InChI(xyzfile):
   inchi = ''
   try:
      inchifile = wrkdir + "/tmpinchi.inchi"
      cmd6 = babel + " -ixyz " + xyzfile + " -oinchi " + inchifile + " >& junk.err"
      os.system(cmd6)
      sdat = []
      ofile = open(inchifile,'r')
      for line in ofile:
         sdat.append(line)
      ofile.close()
      inchi = sdat[0].split()[0]
   except:
      inchi = ''
   return inchi

#### cactus_smiles2xyz function ####
def cactus_smiles2xyz(smiles):
    tsmiles = smiles.replace("#","")
    tsmiles = tsmiles.replace("$","")
    result = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/file?format=xyz&get3d=True" % tsmiles)
    return result


#### smiles2xyz function ####
def smiles2xyz(smiles,xyzfile):
   eoln = "\n"
   smilefile = wrkdir + "/tmpsmiles.smiles"
   ofile = open(smilefile,'w')
   ofile.write(smiles); ofile.write(eoln)
   ofile.close()
   cmd6 = babel + " --gen3d -ismi " + smilefile + " -oxyz " + xyzfile + " >& junk.err"
   os.system(cmd6)

   #### if nan's are produced then use cactus smiles2xyz rest interface ####
   with open(xyzfile,'r') as ff:
      test = ff.read()
   if "nan" in test:
      xyzdata = cactus_smiles2xyz(smiles)
      with open(xyzfile,'w') as ff:
         ff.write(xyzdata)





vdw = {
 'H': 1.20,
 'N': 1.55,
 'NA': 2.27,
 'Na': 2.27,
 'CU': 1.40,
 'Cu': 1.40,
 'CL': 1.75,
 'Cl': 1.75,
 'C': 1.70,
 'O': 1.52,
 'I': 1.98,
 'P': 1.80,
 'B': 1.85,
 'BR': 1.85,
 'Br': 1.85,
 'S': 1.80,
 'SE': 1.90,
 'Se': 1.90,
 'F': 1.47,
 'FE': 1.80,
 'Fe': 1.80,
 'K':  2.75,
 'MN': 1.73,
 'Mn': 1.73,
 'MG': 1.73,
 'Mg': 1.73,
 'ZN': 1.39,
 'Zn': 1.39,
 'HG': 1.8,
 'Hg': 1.8,
 'XE': 1.8,
 'AU': 1.8,
 'Au': 1.8,
 'LI': 1.8,
 'Li': 1.8,
 '.': 1.8
}




#### functions ####
def xyz_molecular_formula(xyzfilename):
   #
   fdict = {}
   xyzfile = open(xyzfilename,'r')
   n = eval(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (fdict.has_key(key)):
         fdict[key] += 1
      else:
         fdict[key] = 1
   xyzfile.close()

   formula = ''
   #ll = fdict.items()
   #for i in range(len(ll)):
   #   formula += ll[i][0] + "%d" % ll[i][1]
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      formula += x[0] + "%d" % x[1]

   return formula




############################# main program ###################################
#
# esmiles = smiles Hf{13.4} reference{harry's article} ^{0} mult{1}
#
usage = \
"""
chemdb_add_Hf mysql/sqlite3  program

  Usage: chemdb_add_Hf -h hup_string -d database -t table -m nwmachine -p nwpasswrd esmiles 

  where esmiles = smiles Hf{13.4 kcal/mol} phase{g} method{Eric's experiment} reference{harry's article} ^{0} mult{1}

   phase=g,l,aq,s

  -h hup_string="machine user password" or enter sqlite3 for sqlite3 db
  -d database = "name of database"
  -t table = "name of table"
  -m nwmachine = "machine:directory"
  -p nwpassrd = password for nwmachine
  -l list all
  -x prints this message
  --help print this message

"""

#Database defaults
hup    = hup0
#dbfile = "TNT_Project"
dbfile = dbfile0
heat_formation_table = "heats_of_formation"

tt = time.localtime()
dd = "-%d-%d-%d-%d:%d.%d" % (tt[0],tt[1],tt[2],tt[3],tt[4],tt[5])

listall = False
opts, args = getopt.getopt(sys.argv[1:], "h:d:t:m:p:xl",['help'])
for o, a in opts:
  if '-h' in o:
     hup = a
  if '-d' in o:
     dbfile = a
  if '-t' in o:
     table = a
  if '-m' in o:
     nwmachine = a
  if '-p' in o:
     nwpassword = a
  if '-l' in o:
     listall = True
  if o in ("-x","--help"):
    print(usage)
    exit()

if (len(args)<1):
   print(usage)
   exit()

print("chemdb_add_Hf - mysql/sqlite3 version")

esmiles = addspaces_esmiles(args[0].strip())

if (hup=='sqlite3'):
   issqlite3 = True
   print("sqlite3 db file =",dbfile)
else:
   issqlite3 = False
   print("mysql db        =",dbfile)

print("table name      =",heat_formation_table)
print("esmiles =",esmiles)


if (listall):
   if (issqlite3):
      dbcon = sqlite3.connect(dbfile)
   else:
      host = hup.split()[0]
      user = hup.split()[1]
      pss = hup.split()[2]
      dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

   sqlist = "select iupac,mformula,InChI,InChIKey,smiles,csmiles,esmiles,synonyms,"
   sqlist += "cid,cas,kegg,charge,mult,Hf,phase,method,reference "
   sqlist += "from " + heat_formation_table
   with dbcon:
      cur = dbcon.cursor()
      cur.execute(sqlist)
      rows = cur.fetchall()
      for row in rows:
         print(row[1]," ",row[0]," ",row[13], " ",row[14]," ", row[6]," ",row[15]," ",row[16])
   exit()


ss = esmiles.split()
smiles = ss[0]
charge    = smiles2charge(smiles)
mult      = 1
Hfunit    = None
method    = None
reference = None
phase     = 'g'
if 'Hf'        in esmiles: Hfunit = esmiles.split('Hf{')[1].split('}')[0]
if '^'         in esmiles: charge = eval(esmiles.split('^{')[1].split('}')[0])
if 'mult'      in esmiles: mult   = eval(esmiles.split('mult{')[1].split('}')[0])
if 'phase'     in esmiles: phase = esmiles.split('phase{')[1].split('}')[0]
if 'method'    in esmiles: method = esmiles.split('method{')[1].split('}')[0]
if 'reference' in esmiles: reference = esmiles.split('reference{')[1].split('}')[0]

if (Hfunit==None):
   print("No Heat of formation entered, exiting.")
   print(usage)
   exit()

mult_test  = smiles2mult(smiles,charge)
if (((mult_test+mult)%2)==1):
   mult = mult_test


### convert to atomic units ####
uscal = 27.2116*23.06 #default is in kcal/mol
for s in Hfunit.split():
   if "kcal/mol" in s.lower(): uscal = 27.2116*23.06
   if "kj/mol"   in s.lower(): uscal = 27.2116*23.06*4.186
   if "ev"       in s.lower(): uscal = 27.2116
   if "cm-1"     in s.lower(): uscal = 219474.6
   if "ry"       in s.lower(): uscal = 2.0
   if "hartree"  in s.lower(): uscal = 1.0
   if "au"       in s.lower(): uscal = 1.0
Hf = eval(Hfunit.split()[0])/uscal

csmiles = cannonicalsmiles(ss[0])
smiles2xyz(smiles,wrkdir + "/"+ tmpxyz1)
mformula = xyz_molecular_formula(wrkdir+"/"+tmpxyz1)
InChI    = smiles2InChI(smiles)
InChIKey = smiles2InChIKey(smiles)
synonyms = pubchem_smiles2synonyms(smiles)
cid      = pubchem_smiles2cid(smiles)
cas      = pubchem_smiles2cas(smiles)
kegg     = pubchem_smiles2kegg(smiles)
iupac    = pubchem_smiles2iupac(smiles)
if (iupac==''): iupac = csmiles


if (mult==2): iupac += " doublet radical"
if (mult==3): iupac += " triplet radical"
if (mult==4): iupac += " quqrtet radical"
if (mult==5): iupac += " quintet radical"
if (mult==6): iupac += " sextet radical"
if (mult==7): iupac += " septet radical"
if (mult==8): iupac += " octet radical"
if (mult==9): iupac += " nonet radical"
if (mult==10): iupac += " decet radical"
if (mult>10):  iupac += " large radical"
if (charge==-4): iupac += " tetraanion"
if (charge==-3): iupac += " trianion"
if (charge==-2): iupac += " dianion"
if (charge==-1): iupac += " anion"
if (charge==+1): iupac += " cation"
if (charge==+2): iupac += " dication"
if (charge==+3): iupac += " trication"
if (charge==+4): iupac += " tetracation"

print()
print("iupac                              =",iupac)
print("mformula                           =",mformula)
print("InChI                              =",InChI)
print("smiles                             =",smiles)
print("cannonical smiles                  =",csmiles)
print("extended smiles                    =",esmiles)
print("synonyms                           =",synonyms)
print("cid                                =",cid)
print("cas                                =",cas)
print("kegg                               =",kegg)
print("charge,mult                        =",charge,mult)
print("Hfunit                             =",Hfunit)
print("Hf                                 =",Hf, " au")
print("phase                              =",phase)
print("method                             =",method)
print("reference                          =",reference)

sqlinsert = "insert into " + heat_formation_table
sqlinsert += " (iupac,mformula,InChI,InChIKey,smiles,csmiles,esmiles,synonyms,"
sqlinsert += "cid,cas,kegg,charge,mult,Hf,phase,method,"
sqlinsert += "reference) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);"
if (not issqlite3): sqlinsert =  sqlinsert.replace('?','%s')

insertlist = []
insertlist.append(iupac)
insertlist.append(mformula)
insertlist.append(InChI)
insertlist.append(InChIKey)
insertlist.append(smiles)
insertlist.append(csmiles)
insertlist.append(esmiles)
insertlist.append(synonyms)
insertlist.append(cid)
insertlist.append(cas)
insertlist.append(kegg)
insertlist.append(charge)
insertlist.append(mult)
insertlist.append(Hf)
insertlist.append(phase)
insertlist.append(method)
insertlist.append(reference)

sqlcheck = "select count(1) from " + heat_formation_table + " where "
sqlcheck += "iupac=? and InChI=? and Hf=? and phase=? and "
sqlcheck += "charge=? and mult=? limit 1;"
if (not issqlite3): sqlcheck =  sqlcheck.replace('?','%s')

checklist = []
checklist.append(iupac)
checklist.append(InChI)
checklist.append(Hf)
checklist.append(phase)
checklist.append(charge)
checklist.append(mult)


if (issqlite3):
   dbcon = sqlite3.connect(dbfile)
else:
   host = hup.split()[0]
   user = hup.split()[1]
   pss = hup.split()[2]
   dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')
   

with dbcon:
   cur = dbcon.cursor()
   cur.execute(sqlcheck,checklist)
   row = cur.fetchone()
   print('row=',row)
   duplicate = (row[0]>0)
   if (not duplicate):
       print("inserting into " + heat_formation_table)
       cur.execute(sqlinsert,insertlist)

print("duplicate=",duplicate)
if (not duplicate):
    print("Inserting ",iupac," ",mformula," ",smiles," ",csmiles," ",esmiles," ",charge,mult,Hf," method=",method," reference=",reference)
else:
    print("Not Inserting ",iupac," ",mformula," ",smiles," ",csmiles," ",esmiles," ",charge,mult,Hf," method=",method," reference=",reference)

print()
print()

### remove temporary wrkdir files ###
try:
   os.unlink(wrkdir + "/"+tmpsmi1)
except:
   print("chemdb_add_Hf Failed to remove " + wrkdir + "/"+ tmpsmi1)

try:
   os.unlink(wrkdir + "/"+tmpsmi2)
except:
   print("chemdb_add_Hf Failed to remove " + wrkdir + "/"+ tmpsmi2)

try:
   os.unlink(wrkdir + "/"+tmpxyz1)
except:
   print("chemdb_add_Hf Failed to remove " + wrkdir + "/"+ tmpxyz1)

