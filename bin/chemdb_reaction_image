#!/usr/local/bin/python3

import sys,os,time,pickle,math,urllib,getopt,subprocess,sqlite3
import pymysql as MySQLdb
from math import *
#import image
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw


############## machine parameters #########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME     = __file__.split("TinyArrows")[0] + "TinyArrows"


chemdb_image0  = ARROWS_HOME + "/bin/chemdb_image0 "
chemdb_image0f = ARROWS_HOME + "/bin/chemdb_image0 -f "
wrkdir         = ARROWS_HOME + "/Work"

chemdbfile = ARROWS_HOME + "/bin/.chemdb-en"
############## machine parameters #########################


bbb = "bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p`%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08b`dgjc.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY/[\x08_pafgtck_afglc\x1e\x1e;\x1efffY0[\x08_pafgtcn_qqumpb\x1e;\x1efffY1[\x08"

aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec(aaa)




############################# main program ###################################
usage = \
"""
Remote chemdb_reaction_image     program

  Usage: chemdb_reaction_image -h hup_string -d database -t table rowId 

  -h hup_string="machine user password" or enter sqlite3 for sqlite3 db
  -d database = "name of database"
  -t table = "name of table"
  -f force regeneration of images
  -h prints this message

"""

#Database defaults
hup    = hup0
#dbfile = "TNT_Project"
dbfile = dbfile0
table  = "calculations"

print("chemdb_reaction_image mysql version")
tt      = time.localtime()

regenerateimages = False
opts, args = getopt.getopt(sys.argv[1:], "h:d:t:fh")
for o, a in opts:
  if '-h' in o:
     hup = a
  if '-d' in o:
     dbfile = a
  if '-t' in o:
     table = a
  if '-f' in o:
     regenerateimages = True
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<1): 
   print(usage)
   exit()

myfilename  = args[-1]
reactants = []
products  = []
isreactant = True
for a in args[:-1]:
   print(a,isreactant)
   if (a=='=') : 
      isreactant=False
   else:
      if isreactant: 
         reactants.append(a)
      else:
         products.append(a)

if (hup=='sqlite3'):
   issqlite3 = True
   print("sqlite3 db file =",dbfile)
else:
   issqlite3 = False
   print("mysql db        =",dbfile)
print("table name      =",table)
print("reactants       = "," ".join(reactants))
print("products        = "," ".join(products))


xyzfile2  = "tmpsmiles.xyz"
smilefile = "tmpsmiles.smiles"
xyzfile   = "chemdb.xyz"


if (issqlite3):
   sqlcheck = "select charge,mult,energy,enthalpy from " + table + " where Id=?;"
else:
   sqlcheck = "select charge,mult,energy,enthalpy from " + table + " where Id=%s;"

if (issqlite3):
   dbcon = sqlite3.connect(dbfile)
else:
   host = hup.split()[0]
   user = hup.split()[1]
   pss = hup.split()[2]
   dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,charset='utf8mb4')

with dbcon:
   image_data = []
   mhall      = []
   count = 0
   erxn  = 0.0
   hrxn  = 0.0
   centerarrow = False

   for rr in (reactants,products):
      reactant_coeff = rr[0::2]
      reactant_id    = rr[1::2]
      if (count==0):
         xstart = 35;  ystart = 0
      else:
         xstart = 445; ystart = 0
      x = xstart; y = ystart; mh = 160

      for i in range(len(reactant_id)):
         Id     = reactant_id[i]
         alabel = reactant_coeff[i]
         num    = eval(alabel)
         label  = ''
         centerplus = False
         if (x==xstart) and (y==ystart):
            if isinstance(num,int):
               if (num!=1):
                  label = "%4d"   % int(num)
               else:
                  if (count==1): centerarrow = True
            else:
               if (abs(num-1.0)>1.0e-3):
                  label = "%4.1f" % (num)
               else:
                  if (count==1): centerarrow = True
         else:
            if (num<0.0): 
               label = "-"
            else:
               label = "+"
            if isinstance(num,int):
               if (abs(num)!=1): 
                  label += "%3d"   % int(abs(num))
               else:
                  centerplus = True
            else:
               if (abs(num-1.0)>1.0e-3):
                  label += "%3.1f" % (abs(num))
               else:
                  centerplus = True

         checklist = [Id]

         ### fetch data ###
         if ("SHE" in Id):
            row = [-1,2,0.0,0.000000]
         elif (eval(Id)>0):
            cur = dbcon.cursor()
            cur.execute(sqlcheck,checklist)
            row = cur.fetchone()
         else:
            row = [1,1,0.0,0.002359]

         charge = row[0]
         mult   = row[1]
         erxn += (-1+2*count)*(row[2])*eval(reactant_coeff[i])
         hrxn += (-1+2*count)*(row[2]+row[3])*eval(reactant_coeff[i])


         ### generate chargelabel
         chargelabel = ''
         if (charge!=0):
            if (charge<0):
               chargelabel = '{%d-}' % abs(charge)
            else:
               chargelabel = '{%d+}' % abs(charge)

         ### generate image ###
         filename = wrkdir + "/" + Id.strip()+ ".png"
         if (regenerateimages):
            cmd6 = chemdb_image0f + Id
         else:
            cmd6 = chemdb_image0 + Id
         print("cmd6=",cmd6)
         try:
            result1 = subprocess.check_output(cmd6,shell=True).decode("utf-8")
         except:
            print("chemdb_image0 Failed to create PNG")
            exit()
         bigimage = "Big Image Created" in result1
         if (bigimage):
            print("Big Image Created, Id=", Id)
         else:
            print("Small Image Created, Id=",Id)

         if (bigimage):
            if (x!=xstart):
               x = xstart
               y += 165
            x0 = x;      y0 = y
            x1 = x - 35; y1 = y + 355//2 - 10
            x2 = x +295; y2 = y
            mh = y +360
            x  = xstart
            y += 360
         else:
            x0 = x;      y0 = y
            x1 = x - 35; y1 = y + 160//2 -10
            x2 = x +120; y2 = y
            mh = y +165
            if (x==xstart):
               x = xstart+195
            else:
               x = xstart
               y += 165

         image_data.append(('image',x0,y0,filename,count))
         if (label!=''):
            if (centerplus):
               image_data.append(('text', x1+12,y1,label,count))
            else:
               image_data.append(('text', x1,y1,label,count))
         if (chargelabel!=''):
            image_data.append(('text', x2,y2,chargelabel,count))

      mhall.append(mh)
      count += 1



print("image_data=",image_data)

#images = map(Image.open, filenames)
mhmax  = max(mhall)
shifty = [(mhmax-mhall[0])//2,(mhmax-mhall[1])//2]

#result = Image.new("RGBA", (800, mhmax), (250,250,250))
result = Image.new("RGBA", (800, mhmax), (350,300,350))
draw   = ImageDraw.Draw(result)
font   = ImageFont.truetype(ARROWS_HOME+"/bin/arial.ttf",20)

### paste images ###
for ii in image_data:
   if ii[0]=="image":
      im = list(map(Image.open, [ii[3]]))[0]
      result.paste(im, (ii[1],ii[2]+shifty[ii[4]]))
#result.save("hello.jpg")

### draw labels ###
for ii in image_data:
   if ii[0]=="text":
      draw.text((ii[1],ii[2]+shifty[ii[4]]),ii[3],(0,0,0),font=font)

### draw divider ###
points = []
points.append((392,0))
points.append((392,mhmax))
#draw.line(points,fill=(200,0,0),width=1)

### draw hrxn ###
txt0 = "Erxn(gas)=%.1f kj/mol" % (erxn*27.2116*23.06*4.186)
txt1 = "Hrxn(gas)=%.1f kj/mol" % (hrxn*27.2116*23.06*4.186)
#draw.text((300,0),       txt0,(0,0,0),font=font)
draw.text((300,mhmax-25),txt1,(0,0,0),font=font)

### draw arrow ###
if (centerarrow):
   points = []
   points.append((390,mhmax//2))
   points.append((435,mhmax//2))
   draw.line(points,fill=(0,0,200),width=8)

   points = []
   points.append((445,mhmax//2))
   points.append((435,mhmax//2+7))
   points.append((435,mhmax//2-7))
   points.append((445,mhmax//2))
   draw.polygon(points,fill=(0,0,200),outline=(0,0,0))
else:
   points = []
   points.append((370,mhmax//2))
   points.append((405,mhmax//2))
   draw.line(points,fill=(0,0,200),width=8)

   points = []
   points.append((415,mhmax//2))
   points.append((405,mhmax//2+7))
   points.append((405,mhmax//2-7))
   points.append((415,mhmax//2))
   draw.polygon(points,fill=(0,0,200),outline=(0,0,0))


result.save(myfilename)

### remove temporary images ###
for ii in image_data:
   if ii[0]=="image":
      try:
         os.unlink(ii[3])
      except:
         print("chemdb_image Failed to remove " + ii[3])

