#!/usr/bin/env python3

import sys,os,time,pickle,math,getopt,random,operator
import subprocess

#################### machine specifics ######################

curdir         = os.getcwd()
#wrkdir         = "/Users/bylaska/Projects/Work"
#ddrand = random.randint(0,999999)
#tmpsmi1  = "tmpsmi1-%d.smi" % ddrand
#tmpsmi2  = "tmpsmi2-%d.smi" % ddrand
#tmpsolute = "tmpsolute-%d.xyz" % ddrand
#tmpnw     = "tmpnw-%d.nw" % ddrand
#tmpnwout  = "tmpnw-%d.nwout" % ddrand
#################### machine specifics ######################




def evalnum(s):
   try:
      return int(s)
   except ValueError:
      return float(s)


periodic_table_charge = {
    'H'  : 1,
    'He' : 2,
    'Li' : 3,
    'Be' : 4,
    'B'  : 5,
    'C'  : 6,
    'N'  : 7,
    'O'  : 8,
    'F'  : 9,
    'Ne' : 10,
    'Na' : 11,
    'Mg' : 12,
    'Al' : 13,
    'Si' : 14,
    'P'  : 15,
    'S'  : 16,
    'Cl' : 17,
    'Ar' : 18,
    'K'  : 19,
    'Ca' : 20,
    'Sc' : 21,
    'Ti' : 22,
    'V'  : 23,
    'Cr' : 24,
    'Mn' : 25,
    'Fe' : 26,
    'Co' : 27,
    'Ni' : 28,
    'Cu' : 29,
    'Zn' : 30,
    'Ga' : 31,
    'Ge' : 32,
    'As' : 33,
    'Se' : 34,
    'Br' : 35,
    'Kr' : 36,
    'Rb' : 37,
    'Sr' : 38,
    'Y'  : 39,
    'Zr' : 40,
    'Nb' : 41,
    'Mo' : 42,
    'Tc' : 43,
    'Ru' : 44,
    'Rh' : 45,
    'Pd' : 46,
    'Ag' : 47,
    'Cd' : 48,
    'In' : 49,
    'Sn' : 50,
    'Sb' : 51,
    'Te' : 52,
    'I'  : 53,
    'Xe' : 54,
    'Cs' : 55,
    'Ba' : 56,
    'La' : 57,
    'Ce' : 58,
    'Pr' : 59,
    'Nd' : 60,
    'Pm' : 61,
    'Sm' : 62,
    'Eu' : 63,
    'Gd' : 64,
    'Tb' : 65,
    'Dy' : 66,
    'Ho' : 67,
    'Er' : 68,
    'Tm' : 69,
    'Yb' : 70,
    'Lu' : 71,
    'Hf' : 72,
    'Ta' : 73,
    'W'  : 74,
    'Re' : 75,
    'Os' : 76,
    'Ir' : 77,
    'Pt' : 78,
    'Au' : 79,
    'Hg' : 80,
    'Tl' : 81,
    'Pb' : 82,
    'Bi' : 83,
    'Po' : 84,
    'At' : 85,
    'Rn' : 86,
    'Fr' : 87,
    'Ra' : 88,
    'Ac' : 89,
    'Th' : 90,
    'Pa' : 91,
    'U'  : 92,
    'Np' : 93,
    'Pu' : 94,
    'Am' : 95,
    'Cm' : 96,
    'Bk' : 97,
    'Cf' : 98,
    'Es' : 99,
    'Fm' : 100,
    'Md' : 101,
    'No' : 102,
    'Lr' : 103,
    'Rf' : 104,
    'Ha' : 105,
    'Sg' : 106,
    'Bh' : 107,
    'Hs' : 108,
    'Mt' : 109
}




covalentstr = '''
H 32 0 0 0
He 46 0 0 0
Li 133 124 0 0
Be 102 90 85 0
B 85 78 73 0
C 75 67 60 68
N 71 60 54 0
O 63 57 53 0
F 64 59 53 0
Ne 67 96 0 0
Na 155 160 0 0
Mg 139 132 127 0
Al 126 113 111 0
Si 116 107 102 0
P 111 102 94 0
S 103 94 95 0
Cl 99 95 93 0
Ar 96 107 96 0
K 196 193 0 0
Ca 171 147 133 0
Sc 148 116 114 0
Ti 136 117 108 0
V 134 112 106 0
Cr 122 111 103 0
Mn 119 105 103 0
Fe 116 109 102 0
Co 111 103 96 0
Ni 110 101 101 0
Cu 112 115 120 0
Zn 118 120 0 0
Ga 124 116 121 0
Ge 121 111 114 0
As 121 114 106 0
Se 116 107 107 0
Br 114 109 110 0
Kr 117 121 108 0
Rb 210 202 0 0
Sr 185 157 139 0
Y 163 130 124 0
Zr 154 127 121 0
Nb 147 125 116 0
Mo 138 121 113 0
Tc 128 120 110 0
Ru 125 114 103 0
Rh 125 110 106 0
Pd 120 117 112 0
Ag 128 139 137 0
Cd 136 144 0 0
In 142 136 146 0
Sn 140 130 132 0
Sb 140 133 127 0
Te 136 128 121 0
I 133 129 125 0
Xe 131 135 122 0
Cs 232 196 0 0
Ba 196 161 149 0
La 180 139 139	 0
Ce 163 137 131 0
Pr 176 138 128 0
Nd 174 137 0 0
Pm 173 135 0 0
Sm 172 134 0 0
Eu 168 134 0 0
Gd 169 135 132 0
Tb 168 135 0 0
Dy 167 133 0 0
Ho 166 133 0 0
Er 165 133 0 0
Tm 164 131 0 0
Yb 170 129 0 0
Lu 162 131 131	 0
Hf 152 128 122	 0
Ta 146 126 119	 0
W 137 120 115	 0
Re 131 119 110	 0
Os 129 116 109	 0
Ir 122 115 107	 0
Pt 123 112 110	 0
Au 124 121 123 0
Hg 133 142 0 0
Tl 144 142 150 0
Pb 144 135 137 0
Bi 151 141 135 0
Po 145 135 129 0
At 147 138 138 0
Rn 142 145 133 0
Fr 223 218 0 0
Ra 201 173 159 0
Ac 186 153 140 0
Th 175 143 136	 0
Pa 169 138 129	 0
U 170 134 118 0
Np 171 136 116 0
Pu 172 135 0  0
Am 166 135 0 0
Cm 166 136 0 0
Bk 168 139 0 0
Cf 168 140 0 0
Es 165 140 0 0
Fm 167 0 0 0
Md 173 139 0 0
No 176 0 0  0
Lr 161 141 0 0
Rf 157 140 131 0
Db 149 136 126 0
Sg 143 128 121 0
Bh 141 128 119 0
Hs 134 125 118 0
Mt 129 125 113 0
Ds 128 116 112 0
Rg 121 116 118	 0
Cn 122 137 130 0
Uut 136 0 0 0
Fl 143 0 0 0
Uup 162  0 0 0
Lv 175 0 0 0
Uus 165 0 0 0
Uuo 157  0 0 0
'''
rcovalent = {}
for ln in covalentstr.strip().split('\n'):
   ss = ln.split()
   rcovalent[ss[0]] = (0.01*eval(ss[1]),0.01*eval(ss[2]),0.01*eval(ss[3]),0.01*eval(ss[4]))


###########################################
#                                         #
#              bond_order                 #
#                                         #
###########################################
def bond_order(rc1,rc2,r12):
   dd = 0.0001
   cov = (abs(r12-(rc1[0]+rc2[0]))/(rc1[0]+rc2[0]+dd),
          abs(r12-(rc1[1]+rc2[1]))/(rc1[1]+rc2[1]+dd),
          abs(r12-(rc1[2]+rc2[2]))/(rc1[2]+rc2[2]+dd),
          abs(r12-(rc1[3]+rc2[3]))/(rc1[3]+rc2[3]+dd))
   imin = 0
   dmin = cov[0]
   if (cov[1]<dmin):
      dmin = cov[1]
      imin = 1
   if (cov[2]<dmin):
      dmin = cov[2]
      imin = 2
   if (cov[3]<dmin):
      dmin = cov[3]
      imin = 3
   b = 0
   if (cov[imin]<0.10): 
      b = 1+imin
      if (imin==3): 
         b = 1.5
   return b



###########################################
#                                         #
#          xyz_atomtype_string0           #
#                                         #
###########################################

def xyz_atomtype_string0(mformula,symbol,n,adjmat,indx1):

   #### generate atom ####
   i = indx1
   symi = symbol[i]
   atom = symi 

   #### generate bonding0  ####
   i = indx1
   nbonds = 0
   nconn  = 0
   for k in range(n):
      if (adjmat[i][k] > 0) and (k!=i):
         nbonds += adjmat[i][k] 
         nconn  += 1
   bonding0 = "%d-%d" % (nconn,nbonds)

   #### generate bonding1  i--j  ####
   i = indx1
   bond1count = {}
   for j in range(n):
      if (adjmat[i][j] > 0) and (j!=i):
         symi = symbol[i]
         symj = symbol[j]
         key = symi.strip() + symj.strip() 
         if (bond1count.has_key(key)):
            bond1count[key] += 1
         else:
            bond1count[key] = 1
   bonding1 = ''
   for x  in sorted(bond1count.items(), key=operator.itemgetter(0)):
      bonding1 += x[0] + "%d" % x[1]


   #### generate bonding2 i--j--k ####
   i = indx1
   bond2count = {}
   for j in range(n):
      if (adjmat[i][j] > 0) and (j!=i):
         for k in range(n):
            if (adjmat[j][k] > 0) and (k!=j) and (k!=i):
               symi = symbol[i]
               symj = symbol[j]
               symk = symbol[k]
               key = symi.strip() + symj.strip() + symk.strip()
               if (bond2count.has_key(key)):
                  bond2count[key] += 1
               else:
                  bond2count[key] = 1
   bonding2 = ''
   for x  in sorted(bond2count.items(), key=operator.itemgetter(0)):
      bonding2 += x[0] + "%d" % x[1]


   #### generate bonding3 i--j--k--l  ####
   bond3count = {}
   i = indx1
   for j in range(n):
      if (adjmat[i][j] > 0) and (j!=i):
         for k in range(n):
            if (adjmat[j][k] > 0) and (k!=j) and (k!=i):
               for l in range(n):
                  if (adjmat[k][l] > 0) and (l!=k) and (l!=j):
                     symi = symbol[i]
                     symj = symbol[j]
                     symk = symbol[k]
                     syml = symbol[l]
                     key = symi.strip() + symj.strip() + symk.strip() + syml.strip()
                     if (bond3count.has_key(key)):
                        bond3count[key] += 1
                     else:
                        bond3count[key] = 1
   bonding3 = ''
   for x  in sorted(bond3count.items(), key=operator.itemgetter(0)):
      bonding3 += x[0] + "%d" % x[1]


   #### generate bonding4 -  i--j--k--l--m ####
   bond4count = {}
   i = indx1
   for j in range(n):
      if (adjmat[i][j] > 0) and (j!=i):
         for k in range(n):
            if (adjmat[j][k] > 0) and (k!=j) and (k!=i):
               for l in range(n):
                  if (adjmat[k][l] > 0) and (l!=k) and (l!=j):
                     for m in range(n):
                        if (adjmat[l][m] > 0) and (m!=l) and (m!=k):
                           symi = symbol[i]
                           symj = symbol[j]
                           symk = symbol[k]
                           syml = symbol[l]
                           symm = symbol[m]
                           key = symi.strip() + symj.strip() + symk.strip() + syml.strip() + symm.strip()
                           if (bond4count.has_key(key)):
                              bond4count[key] += 1
                           else:
                              bond4count[key] = 1
   bonding4 = ''
   for x  in sorted(bond4count.items(), key=operator.itemgetter(0)):
      bonding4 += x[0] + "%d" % x[1]


   #### generate bonding5 -  i--j--k--l--m--a ####
   bond5count = {}
   i = indx1
   for j in range(n):
      if (adjmat[i][j] > 0) and (j!=i):
         for k in range(n):
            if (adjmat[j][k] > 0) and (k!=j) and (k!=i):
               for l in range(n):
                  if (adjmat[k][l] > 0) and (l!=k) and (l!=j):
                     for m in range(n):
                        if (adjmat[l][m] > 0) and (m!=l) and (m!=k):
                           for a in range(n):
                              if (adjmat[m][a] > 0) and (a!=m) and (a!=l):
                                 symi = symbol[i]
                                 symj = symbol[j]
                                 symk = symbol[k]
                                 syml = symbol[l]
                                 symm = symbol[m]
                                 syma = symbol[a]
                                 key = symi.strip() + symj.strip() + symk.strip() + syml.strip() + symm.strip() + syma.strip()
                                 if (bond5count.has_key(key)):
                                    bond5count[key] += 1
                                 else:
                                    bond5count[key] = 1
   bonding5 = ''
   for x  in sorted(bond5count.items(), key=operator.itemgetter(0)):
      bonding5 += x[0] + "%d" % x[1]


   return  atom + ":atom:" + bonding0 + ":" +  bonding1 + ":" + bonding2 + ":" + bonding3 + ":" + bonding4 + ":" + bonding5 





###########################################
#                                         #
#          xyz_atomtype_string            #
#                                         #
###########################################

def xyz_atomtype_string(xyzfilename,indx1):

   #### read xyz file ####
   fdict = {}
   verts  = []
   symbol = []
   rxyz   = []
   xyzfile = open(xyzfilename,'r')
   n = eval(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (fdict.has_key(key)):
         fdict[key] += 1
      else:
         fdict[key] = 1
      line = line.split()
      symbol.append(line[0].strip())
      tple = ('atom',(0.0, line[0].strip(), '', 0, 0, -1))
      verts.append(tple)
      rxyz.append(eval(line[1]))
      rxyz.append(eval(line[2]))
      rxyz.append(eval(line[3]))
   xyzfile.close()

   #### generate mformula ####
   mformula = ''
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      mformula += x[0] + "%d" % x[1]

   #### generate adjacency matrix ####
   adjmat = []
   rij    = []
   for i in range(n):
      rij.append([0.0]*n)
      adjmat.append([0]*n)
   for i in range(n):
      for j in range(n):
         symi = symbol[i]
         symj = symbol[j]
         rci   = rcovalent[symbol[i]]
         rcj   = rcovalent[symbol[j]]
         dx = rxyz[3*i]   - rxyz[3*j]
         dy = rxyz[3*i+1] - rxyz[3*j+1]
         dz = rxyz[3*i+2] - rxyz[3*j+2]
         r = math.sqrt(dx*dx + dy*dy + dz*dz)
         rij[i][j] = r
         if i!=j:
            adjmat[i][j] = bond_order(rci,rcj,r)

   atomtype1   = xyz_atomtype_string0(mformula,symbol,n,adjmat,indx1)

   return  atomtype1



###########################################
#                                         #
#          xyz_atomtype_string_indexes    #
#                                         #
###########################################


def xyz_atomtype_string_indexes(xyzfilename,atomstring,level):

   #### get bond symbols ###
   symbi = atomstring.split(":atom:")[0]

   #### read xyz file ####
   fdict = {}
   verts  = []
   symbol = []
   rxyz   = []
   xyzfile = open(xyzfilename,'r')
   n = eval(xyzfile.readline())
   xyzfile.readline()
   for i in range(n):
      line = xyzfile.readline()
      if (line[1]==' '):
         key = line[0]
      else:
         key = line[0:2]
      if (fdict.has_key(key)):
         fdict[key] += 1
      else:
         fdict[key] = 1
      line = line.split()
      symbol.append(line[0].strip())
      tple = ('atom',(0.0, line[0].strip(), '', 0, 0, -1))
      verts.append(tple)
      rxyz.append(eval(line[1]))
      rxyz.append(eval(line[2]))
      rxyz.append(eval(line[3]))
   xyzfile.close()

   #### generate mformula ####
   mformula = ''
   for x  in sorted(fdict.items(), key=operator.itemgetter(0)):
      mformula += x[0] + "%d" % x[1]

   #### generate adjacency matrix ####
   adjmat = []
   rij    = []
   for i in range(n):
      rij.append([0.0]*n)
      adjmat.append([0]*n)
   for i in range(n):
      for j in range(n):
         symi = symbol[i]
         symj = symbol[j]
         rci   = rcovalent[symbol[i]]
         rcj   = rcovalent[symbol[j]]
         dx = rxyz[3*i]   - rxyz[3*j]
         dy = rxyz[3*i+1] - rxyz[3*j+1]
         dz = rxyz[3*i+2] - rxyz[3*j+2]
         r = math.sqrt(dx*dx + dy*dy + dz*dz)
         rij[i][j] = r
         if i!=j:
            adjmat[i][j] = bond_order(rci,rcj,r)

   ilist = []
   for i in range(n):
      if (symbol[i]==symbi):
         atomstring1 = xyz_atomtype_string0(mformula,symbol,n,adjmat,i)
         #if (atomstring1==atomstring):
         if (atomstring_compare(level,atomstring1,atomstring)):
            ilist.append((i+1))
   return ilist

def atomstring_compare(level,a1,a2):
   ss1 = a1.split(":")
   ss2 = a2.split(":")
   aa1 = ss1[0] + ":" + ss1[1] + ":" + ss1[2]
   aa2 = ss2[0] + ":" + ss2[1] + ":" + ss2[2]
   for i in range(level):
      aa1 += ":" + ss1[3+i]
      aa2 += ":" + ss2[3+i]
   for i in range(level,5):
      aa1 += ":" 
      aa2 += ":" 
   #print "a1 =",a1
   #print "aa1=",aa1
   #print
   return (aa1==aa2)

############################# main program ###################################
usage = \
"""
generate_atomtype_string

  Usage: generate_atomtype_string -s indx1|atomtypestring xyzfile

     -s: look for indexes with atomtypestring
     -l level


"""

print("generate_atomtype_string")
tt      = time.localtime()


level = 5
lookindex = False
opts, args = getopt.getopt(sys.argv[1:], "shl:")
for o, a in opts:
  if '-s' in o:
     lookindex = True
  if '-l' in o:
     level = eval(a)
     if (level>5): level=5
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<2):
    print(usage)
    exit()

if (lookindex):
   atomtypestrings  = args[0]
   xyzfilename      = args[1]
   for atomtypestring in atomtypestrings.split(","):
      indexes = xyz_atomtype_string_indexes(xyzfilename,atomtypestring,level)
      print()
      print("atomtype_string =  ", atomtypestring)
      print("indexes = ",indexes)
      print("result=",[atomtypestring,indexes])

else:
   indx0s       = args[0]
   xyzfilename  = args[1]
   for indx0 in indx0s.split(","):
      indx1 = eval(indx0)
      atomtype_string = xyz_atomtype_string(xyzfilename,indx1-1)
      print()
      print("indx1 = ",indx1)
      print("atomtype_string =  ", atomtype_string)
      print("result=",[indx1,atomtype_string])
  
