#!/usr/local/bin/python3
import os,sys,getopt,math,copy,random,subprocess,time,urllib.request,re


###################### PARAMETERS ###########################
ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_API_HOME = 'http://localhost:5000/api/'

tnt_submit  = ARROWS_HOME + "/bin/tnt_submit5 -f "
uff_path    = ARROWS_HOME + "/bin/uff-path9 -s 9101 "
uff_surface = ARROWS_HOME + "/bin/uff-path7b "
generate_atomtype_string = ARROWS_HOME + "/bin/generate_atomtype_string "
wrkdir      = ARROWS_HOME + "/Work"
#############################################################


##### geturlresult function ####
#def geturlresult(url):
#    try:
#        connection = urllib2.urlopen(url)
#    except urllib2.HTTPError, e:
#        return ""
#    else:
#        return connection.read().rstrip()
#

#### geturlresult function ####
def geturlresult(url):
   try:
      the_page = ""
      with urllib.request.urlopen(url) as response:
         the_page = response.read().rstrip()
   except:
      the_page = ""

   if isinstance(the_page,bytes): the_page = the_page.decode("utf-8")

   return the_page

#############################################
#                                           #
#             addspaces_reaction            #
#                                           #
#############################################
def addspaces_reaction(reaction):
   tags = ['^','mult','theory','xc','solvation_type','basis','calculation_type','property','priority','geometry_generation']
   reaction2 = reaction[:]
   if (reaction2.find(">")!=-1):
      reaction2 = reaction2.replace(">","")
   if (reaction2.find("-->")==-1):
      reaction2 = reaction2.replace("--","-->")
   for tag1 in tags: reaction2 = reaction2.replace(tag1," " + tag1)
   return reaction2


#############################################
#                                           #
#             parsetosmiles                 #
#                                           #
#############################################
#### parsetosmiles function ####
def parsetosmiles(str):
   ss = str.split()
   str2 = ''
   for s in ss:
      if 'kegg=' in s.lower():
         kegg = s.split('=')[1]
         mol = geturlresult("http://rest.kegg.jp/get/%s/mol" % kegg)
         smiles = mol2smiles(mol)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif ('cid=' in s.lower()) or ('pubchem=' in s.lower()) :
         cid = s.split('=')[1]
         smiles = geturlresult("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/%s/property/CanonicalSMILES/TXT" % cid)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif ('csid=' in s.lower()) or ('chemspider=' in s.lower()):
         csid = s.split('=')[1]
         rdfdata = geturlresult("http://rdf.chemspider.com/%s" % csid)
         if rdfdata=='':
            smiles='C'
         else:
            rdfdata2 = rdfdata.split('<chemdomain:SMILES')[1].split('</chemdomain:SMILES>')[0]
            smiles   = rdfdata2.split('<chemdomain:hasValue>')[1].split('</chemdomain:hasValue>')[0].strip()
         str2 += ' '
         str2 += smiles
      elif 'cas=' in s.lower():
         cas = s.split('=')[1]
         smiles = geturlresult("http://cactus.nci.nih.gov/chemical/structure/%s/smiles" % cas)
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      elif 'inchi=' in s.lower():
         smiles = InChI2smiles("InChI=" + s.split('=')[1])
         if smiles=='': smiles='C'
         str2 += ' '
         str2 += smiles
      else:
         str2 += ' '
         str2 += s
   str2 = str2.strip()

   return str2


#############################################
#                                           #
#             parse_ranges                  #
#                                           #
#############################################
def parse_range(xyzdat,astr):
    symbols = []
    for ln in xyzdat.strip().split("\n")[2:]:
       ss = ln.split()
       symbols.append(ss[0])
    result = set()
    for part in re.split(r'[;,\s]\s*', astr):
        if (part in symbols):
           for i in range(len(symbols)):
              if part==symbols[i]:
                 result.update([i+1])
        else:
           x = part.split('-')
           result.update(range(int(x[0]), int(x[-1]) + 1))
    return sorted(result)




############################# main program ###################################
usage = \
"""
chemdb_molcalc

  Usage: chemdb_molcalc inputfile


"""

print()
appending = False
maxiter = 55001
includemid = False

opts, args = getopt.getopt(sys.argv[1:], "hams:")
for o, a in opts:
  if o in ("-a"): 
     appending = True
  if o in ("-m"): 
     includemid = True
  if o in ("-s"): 
     maxiter = eval(a)
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<1):
   print(usage)
   exit()

molfilename  = args[0]
print("molfilename = "+molfilename)

try:
   with open(molfilename,'r') as ff:
      inputdata= ff.read().strip()

   calculation = "tnt_submit"
   if (("calculation:" in inputdata) and (":calculation" in inputdata)):
      calculation = inputdata.split("calculation:")[1].split(":calculation")[0].strip()

   print("calculation=",calculation)
   if ("uff-path" in calculation):
      xyzfilename  = wrkdir + "/uffinput.xyz"
      with open(xyzfilename,'w') as ff:
         ff.write(inputdata.split("input.xyz:")[1].split(":input.xyz")[0].strip() + "\n")
      bstring = inputdata.split("bstring:")[1].split(":bstring")[0].strip()
      cmd7 = uff_path + xyzfilename + " " + bstring + " 0 "

   elif ("uff-surface" in calculation):
      xyzfilename  = wrkdir + "/uffinput.xyz"
      with open(xyzfilename,'w') as ff:
         ff.write(inputdata.split("input.xyz:")[1].split(":input.xyz")[0].strip() + "\n")

      surfacelist = []
      if (("surface:" in inputdata) and (":surface" in inputdata)):
         surfacelist = parse_range(inputdata.split("input.xyz:")[1].split(":input.xyz")[0].strip() + "\n",inputdata.split("surface:")[1].split(":surface")[0].strip())
      surface = "\"%s\"" % surfacelist

      if (("bondings:" in inputdata) and (":bondings" in inputdata)):
         bondings = [eval(x) for x in inputdata.split("bondings:")[1].split(":bondings")[0].strip().split()]
         nb = len(bondings)
         print("bondings=",bondings)
         bbr = []
         bbt = []
         bbp = []
         for b in range(nb/3):
            i = bondings[3*b+1]
            j = bondings[3*b+2]
            sb = 1
            if ((i in surfacelist) or (j in surfacelist)): sb = -99
            if (bondings[3*b] > 0.0):
              bbr.append([i,j,sb])
              bbt.append([i,j,sb])
              bbp.append([i,j,0])
            else:
              bbr.append([i,j,0])
              bbt.append([i,j,sb])
              bbp.append([i,j,sb])

         bstring = "\"%s\"" % [bbr,bbt,bbp]
         print("bstring=",bstring)
      else:
         bstring = inputdata.split("bstring:")[1].split(":bstring")[0].strip()

      if (len(surfacelist)>0):
         cmd7 = uff_surface + "-n " + surface + " -f " + surface + " -s 9511 " + xyzfilename + " " + bstring + " 0 "
      else:
         cmd7 = uff_surface + " -s 9511 " + xyzfilename + " " + bstring + " 0 "

      print("cmd7=",cmd7)

   elif ("atomtype_string" in calculation):
      xyzfilename  = wrkdir + "/atomtype.xyz"
      with open(xyzfilename,'w') as ff:
         ff.write(inputdata.split("input.xyz:")[1].split(":input.xyz")[0].strip() + "\n")
      opts = inputdata.split("indexstring:")[1].split(":indexstring")[0].strip()
      cmd7 = generate_atomtype_string + opts + " " + xyzfilename
      print("cmd7=",cmd7)

   else:
      print("inputdata=",inputdata)
      inputdata = inputdata.replace("\"",'')
      inputdata = inputdata.replace("\'",'')
      inputdata = inputdata.replace("%2F",'/')
      inputdata = addspaces_reaction(inputdata.strip())
      inputdata = parsetosmiles(inputdata)
      cmd7 = tnt_submit + '\"' + inputdata + '\"'

   data = subprocess.check_output(cmd7,shell=True)

except:
   data = "molecular_calculation failed!"

print(data)



