#!/usr/bin/env python3

import sys,os,time,pickle,math,getopt,subprocess,pexpect,sqlite3
import pymysql as MySQLdb
from math import *
#import image
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw

############## machine parameters #########################
#ARROWS_HOME     = '/Users/bylaska/Public/TinyArrows'
ARROWS_HOME           = __file__.split("TinyArrows")[0] + "TinyArrows"
MY_ENV                = os.environ.copy()
MY_ENV["ARROWS_HOME"] = ARROWS_HOME

#TIMEOUT = '/usr/bin/timeout'
#TIMEOUT = '/usr/local/bin/gtimeout'
MYTIMEOUT = "/usr/local/bin/timeout "
TIMEOUT   = MYTIMEOUT
TIMEOUT20 ="DISPLAY=:10; " + TIMEOUT + " 20 "
TIMEOUT40 ="DISPLAY=:10; " + TIMEOUT + " 40 "
TIMEOUT80 ="DISPLAY=:10; " + TIMEOUT + " 80 "
TIMEOUT160 ="DISPLAY=:10; " + TIMEOUT + " 160 "

wrkdir    = ARROWS_HOME + "/Work"
chemdbfile = ARROWS_HOME + "/bin/.chemdb-en"
sshmachine0 = "bylaska@archive.emsl.pnl.gov"
dirmachine0 = "/archive/bylaska"
shepng      = ARROWS_HOME + "/bin/she.png"

SaveImages = False
############## machine parameters #########################


bbb = "bcd\x1epc_bafckb`&dgjcl_kc'8\x08\x1e\x1e\x1eugrf\x1emncl&dgjcl_kc*%p`%'\x1e_q\x1edd8\x1en_u/\x1e;\x1engaijc,jm_bq&dd,pc_b&''\x08\x1e\x1e\x1en_u\x1e;\x1e%%\x08\x1e\x1e\x1edmp\x1e`\x1egl\x1en_u/8\x08\x1e\x1e\x1e\x1e\x1e\x1e_\x1e;\x1eglr&\x1e&+77\x1e)\x1ek_rf,qopr&77(77+2(7(&+777+`'''-&0(7'\x1e'\x08\x1e\x1e\x1e\x1e\x1e\x1en_u\x1e);\x1eafp&_'\x08\x1e\x1e\x1eppp\x1e;\x1eY[\x08\x1e\x1e\x1edmp\x1e_\x1egl\x1en_u,qnjgr&%Zl%'8\x08\x1e\x1e\x1e\x1e\x1e\x1eppp,_nnclb&_,qrpgn&''\x08\x1e\x1e\x1epcrspl\x1eppp\x08\x08fff\x1e;\x1epc_bafckb`&afckb`dgjc'\x08fsn.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY.[\x08b`dgjc.\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e;\x1efffY/[\x08_pafgtck_afglc\x1e\x1e;\x1efffY0[\x08_pafgtcn_qqumpb\x1e;\x1efffY1[\x08"



def pexpect_command(pcmd,mypassword):
   if (mypassword=="nopassword"):
      #os.system(pcmd)
      result1 = subprocess.check_output(pcmd,shell=True).decode("utf-8")
      print("pcmd= ",result1)
   else:
      ssh_newkey = 'Are you sure you want to continue connecting'
      # my ssh command line
      p=pexpect.spawn(pcmd,timeout=300)
      i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==0:
          print("I say yes")
          p.sendline('yes')
          i=p.expect([ssh_newkey,'assword:',pexpect.EOF,pexpect.TIMEOUT])
      if i==1:
          print("sending password")
          p.sendline(mypassword)
          p.expect(pexpect.EOF)
      elif i>=2:
          print("either received key or connection timeout")
          pass
      print(p.before) # print out the result
      return p.before


aaa = ''
for b in bbb: aaa += chr(ord(b) + 2)
exec(aaa)



############################# main program ###################################
usage = \
"""
Remote chemdb_image0 program

  Usage: chemdb_image0 -h hup_string -d database -t table rowId 

  -h hup_string="machine user password" or enter sqlite3 for sqlite3 db
  -d database = "name of database"
  -t table = "name of table"
  -b generate large image
  -f regenerate image
  -h prints this message

"""

#Database defaults
hup         = hup0
dbfile      = dbfile0
#dbfile      = "TNT_Project"
table       = "calculations"
image_table = "images"

print("chemdb_image0 mysql version")
tt      = time.localtime()

largeimage = False
regenerateimage = False
opts, args = getopt.getopt(sys.argv[1:], "h:d:t:bfh")
for o, a in opts:
  if '-h' in o:
     hup = a
  if '-d' in o:
     dbfile = a
  if '-t' in o:
     table = a
  if '-b' in o:
     largeimage = True
  if '-f' in o:
     regenerateimage = True
  if o in ("-h","--help"):
    print(usage)
    exit()

if (len(args)<1): 
   print(usage)
   exit()

arrows_id = args[0]

if ("SHE" in arrows_id):
   filename = wrkdir + "/SHE.png"
   cmd6 = "/usr/bin/cp %s %s" % (shepng,filename)
   print("cmd6=",cmd6)
   try:
      result1 = subprocess.check_output(cmd6,shell=True).decode("utf-8")
   except:
      print("chemdb_image0 Failed to copy she.png")
   filesize = os.path.getsize(filename)
   print("filesize=",filesize)
   print("Small Image Created")
   exit()


Id        = eval(arrows_id)
a = Id%10
b = (Id/10)%10
c = (Id/100)%10
d = (Id/1000)%10
e = (Id/10000)%10

#dirmachine = dirmachine0 + "/" + archivemachine.split(":")[1]
if largeimage:
   imagefile = archivemachine+"/chemdb_bigimage2/%d/%d/%d/%d/%d/" % (a,b,c,d,e)
   imagefile += arrows_id.strip()+".png"
   #imagefiler = dirmachine+"/chemdb_bigimage2/%d/%d/%d/%d/%d/" % (a,b,c,d,e)
   #imagefiler += arrows_id.strip()+".png"
   filename = wrkdir + "/" + arrows_id.strip()+ "-large.png"
else:
   imagefile = archivemachine+"/chemdb_image/%d/%d/%d/%d/%d/" % (a,b,c,d,e)
   imagefile += arrows_id.strip()+".png"
   #imagefiler = dirmachine+"/chemdb_image/%d/%d/%d/%d/%d/" % (a,b,c,d,e)
   #imagefiler += arrows_id.strip()+".png"
   filename = wrkdir + "/" + arrows_id.strip()+ ".png"


if (hup=='sqlite3'):
   issqlite3 = True
   print("sqlite3 db file =",dbfile)
else:
   issqlite3 = False
   print("mysql db         =",dbfile)
print("table name       =",table)
print("arrows_id        =",arrows_id)
print("permanent imagefile =",imagefile)
print("temporary imagefile =",filename)

if (SaveImages):
   cmd0   = "scp " + imagefile + " " + filename
   if ((":/" not in imagefile) and (":/" not in filename)):
      cmd0 = cmd0.replace("scp","cp")
      ppth = os.path.dirname(filename)
      if (not os.path.isdir(ppth)):
         cmd9 = "mkdir -p " +  ppth
         pexpect_command(cmd9,archivepassword)
   print("cmd0=",cmd0)
   try:
      result = pexpect_command(cmd0,archivepassword)
      ##result = "Turning off until March 1st"
   
      if result is None:
         result = "Input/output error"
   except:
      result = "Input/output error"
else:
   result = "Turning off until March 1st"

print("RESULT=",result)

if "Input/output error" in result: 
   regenerateimage = True


### create imagefile if not found
if ((not os.path.isfile(filename)) or (regenerateimage)):
   print("Creating imagefile with jmol")
   xyzfile   = "chemdb.xyz"
   if (Id>0):
      if (issqlite3):
         sqlcheck  = "select xyz_blob from " + table + " where Id=?;"
      else:
         sqlcheck  = "select xyz_blob from " + table + " where Id=%s;"
      checklist = [Id]

      if (issqlite3):
         dbcon = sqlite3.connect(dbfile)
      else:
         host = hup.split()[0]
         user = hup.split()[1]
         pss = hup.split()[2]
         dbcon = MySQLdb.connect(host=host,user=user,password=pss,database=dbfile,autocommit=True,charset='utf8mb4')

      ### fetch xyzdata ###
      with dbcon:
         cur = dbcon.cursor()
         cur.execute(sqlcheck,checklist)
         row = cur.fetchone()
         xyzstring = row[0].decode("utf-8")
   else:
      xyzstring = "1\n\nH 0.0 0.0 0.0\n"

   ### generate image ###
   if isinstance(xyzstring,bytes): xyzstring = xyzstring.decode("utf-8")
   print(xyzstring)
   nion  = eval(xyzstring.split("\n")[0])
   xfile = open(xyzfile,'w')
   xfile.write(xyzstring)
   xfile.close()
   if largeimage:
      cmd6 = ARROWS_HOME + "/bin/jmol-big %s %s %s" % (ARROWS_HOME + "/bin/jmol.script",xyzfile,filename)
   else:
      if (nion<30):
         bigimage = False
         cmd6 = ARROWS_HOME + "/bin/jmol-small %s %s %s" % (ARROWS_HOME + "/bin/jmol.script",xyzfile,filename)
      else:
         bigimage = True
         cmd6 = ARROWS_HOME + "/bin/jmol-medium %s %s %s" % (ARROWS_HOMEr + "/bin/jmol.script",xyzfile,filename)
   print("cmd6="+cmd6)

   try:
      result1 = subprocess.check_output(TIMEOUT20 + cmd6,shell=True,env=MY_ENV).decode("utf-8")
   except:
      print("Attempt 1 failed, trying 40 second timeout")
      try:
         result2 = subprocess.check_output(TIMEOUT40 + cmd6,shell=True,env=MY_ENV).decode("utf-8")
      except:
         print("Attempt 2 failed, trying 80 second timeout")
         try:
            result3 = subprocess.check_output(TIMEOUT80 + cmd6,shell=True,env=MY_ENV).decode("utf-8")
         except:
            print("Attempt 3 failed, trying 160 second timeout")
            try:
               result4 = subprocess.check_output(TIMEOUT160 + cmd6,shell=True,env=MY_ENV).decode("utf-8")
            except:
               print("JMOL Failed to create PNG")
               exit()

   ##### delete file in archive ####
   #if (regenerateimage):
   #   cmd1d   = "ssh " + sshmachine0 + " rm " + imagefiler
   #   print("cmd1d",cmd1d)
   #   try:
   #      result = pexpect_command(cmd1d,archivepassword)
   #   except:
   #      print("cmd1d failed=",cmd1d)

   #### upload file ####
   if (SaveImages):
      cmd1   = "scp " + filename + " " + imagefile 
      if ((":/" not in filename) and (":/" not in imagefile)):
         cmd1 = cmd1.replace("scp","cp")
         ppth = os.path.dirname(imagefile)
         if (not os.path.isdir(ppth)):
            cmd9 = "mkdir -p " +  ppth
            pexpect_command(cmd9,archivepassword)
      print("cmd1",cmd1)
      try:
         result = pexpect_command(cmd1,archivepassword)
         ##result = "Upload turned off until March 1st."
      except:
         print("cmd1 failed=",cmd1)

filesize = os.path.getsize(filename)
print("filesize=",filesize)

bigimage = (filesize > 99999)
if bigimage:
   print("Big Image Created")
else:
   print("Small Image Created")

